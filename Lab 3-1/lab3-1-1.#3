/* Sample code for Lab 3.1. This code provides a basic start. */
#include <c8051_SDCC.h>
#include <stdio.h>
#include <stdlib.h>
//-----------------------------------------------------------------------------
// Function Prototypes
//-----------------------------------------------------------------------------
void Port_Init(void);
void PCA_Init (void);
void Interrupt_Init(void);
void XBR0_Init();
void Set_DrivePulsewidth(void);
void PCA_ISR ( void ) __interrupt 9;

//-----------------------------------------------------------------------------
// Global Variables
//-----------------------------------------------------------------------------
unsigned int DrivePW_Neutral = 2765;	//1.5 ms
unsigned int DrivePW_Min = 2028; 	//1.1 ms
unsigned int DrivePW_Max = 3502;	//1.9 ms
unsigned int DrivePW;
unsigned int counts;

//-----------------------------------------------------------------------------
// Main Function
//-----------------------------------------------------------------------------
void main(void)
{
    // initialize board
    Sys_Init();
    putchar(' ');
    Port_Init();
    XBR0_Init();
    PCA_Init();
    Interrupt_Init();

    //print beginning message
    printf("Embedded Control Pulsewidth Calibration \r\n");
    // set the PCA output to a neutral setting and wait 1 second

    DrivePW = DrivePW_Neutral;
	counts = 0;
	while (counts <= 50);

    while(1)
	{
        Set_DrivePulsewidth();
	}
}

//-----------------------------------------------------------------------------
void Set_DrivePulsewidth()
{
    char input;
    //wait for a key to be pressed
    input = getchar();
	printf("Press f to increase speed, press r to reverse speed \r\n");
    if (input == 'f')		//single character input to increase the pulsewidth
    {
        if(DrivePW > DrivePW_Max)		//check if greater than pulsewidth maximum
		{
			DrivePW = DrivePW_Max;	//set PW to the maximum value
		}
		else
		{
			DrivePW = DrivePW + 100;
		}
    }

    else if (input == 's')	//single character input to decrease the pulsewidth
    {
        if(DrivePW < DrivePW_Min)		//check if greater than pulsewidth maximum
		{
			DrivePW = DrivePW_Min;	//set PW to the maximum value
		}
		else
		{
			DrivePW = DrivePW - 100;
		}
    }

    printf("DrivePW: %u\r\n", DrivePW);
    PCA0CP2 = 0xFFFF - DrivePW;
}

//-----------------------------------------------------------------------------
// Port_Init
//-----------------------------------------------------------------------------
// Set up ports for input and output
void Port_Init()
{
	P1MDOUT = 0x02;
}

//-----------------------------------------------------------------------------
// XBR0_Init
//-----------------------------------------------------------------------------
// Set up the crossbar
void XBR0_Init()
{
	XBR0 = 0x27;
}

//-----------------------------------------------------------------------------
// PCA_Init
//-----------------------------------------------------------------------------
// Set up Programmable Counter Array
void PCA_Init(void)
{
	PCA0MD = 0x81;		//SYSCLK/12
	PCA0CPM2 = 0xC2;	//CCM2 in 16 bit compare mode
	PCA0CN = 0x40; 		//enable PCA counter
}

//-----------------------------------------------------------------------------
// Interrupt_Init
//-----------------------------------------------------------------------------
// Set up the PCA overflow interrupts
void Interrupt_Init()
{
	EA = 1;			//enable global interrupts
	EIE1 = 0x08;	//enable PCA interrupt
}

//-----------------------------------------------------------------------------
// PCA_ISR
//-----------------------------------------------------------------------------
// Interrupt Service Routine for Programmable Counter Array Overflow Interrupt
void PCA_ISR (void) __interrupt 9
{
	counts++;
	PCA0 = 28672;
	CF = 0;
}

//-----------------------------------------------------------------------------
// SMB_Init
//-----------------------------------------------------------------------------

void SMB_Init(void)
{
	SMB0CR=0x93; /* set SCL to 100KHz (actual freq ~ 94,594Hz)*/
	ENSMB=1; /* bit 6 of SMB0CN, enable the SMBus */
}

unsigned char ReadRanger()
{
	unsigned char Data[1];
	unsigned char light = 0;
	unsigned char addr=0xE0; // the address of the ranger is 0xE0
	//printf("here4");
	i2c_read_data(addr, 1, Data, 1); // read one byte, starting at reg 1
	//printf("here5");
	light = Data[0];
	Data[0] = 0x51; // write 0x51 to reg 0 of the ranger:
	i2c_write_data(addr,0,Data,1); // write one byte of data to reg 0 at addr// * insert ping initiation here *
	return light;
}
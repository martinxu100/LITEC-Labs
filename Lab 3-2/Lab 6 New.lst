                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.6.0 #9615 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module Lab_6_New
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _read_keypad
                                     13 	.globl _strlen
                                     14 	.globl _putchar
                                     15 	.globl _vsprintf
                                     16 	.globl _printf
                                     17 	.globl _getchar_nw
                                     18 	.globl _Sys_Init
                                     19 	.globl _UART0_Init
                                     20 	.globl _SYSCLK_Init
                                     21 	.globl _BAT
                                     22 	.globl _DS7
                                     23 	.globl _DS6
                                     24 	.globl _DS5
                                     25 	.globl _DS4
                                     26 	.globl _DS3
                                     27 	.globl _DS2
                                     28 	.globl _DS1
                                     29 	.globl _DS0
                                     30 	.globl _BUS_SCL
                                     31 	.globl _BUS_TOE
                                     32 	.globl _BUS_FTE
                                     33 	.globl _BUS_AA
                                     34 	.globl _BUS_INT
                                     35 	.globl _BUS_STOP
                                     36 	.globl _BUS_START
                                     37 	.globl _BUS_EN
                                     38 	.globl _BUS_BUSY
                                     39 	.globl _SPIF
                                     40 	.globl _WCOL
                                     41 	.globl _MODF
                                     42 	.globl _RXOVRN
                                     43 	.globl _TXBSY
                                     44 	.globl _SLVSEL
                                     45 	.globl _MSTEN
                                     46 	.globl _SPIEN
                                     47 	.globl _AD0EN
                                     48 	.globl _ADCEN
                                     49 	.globl _AD0TM
                                     50 	.globl _ADCTM
                                     51 	.globl _AD0INT
                                     52 	.globl _ADCINT
                                     53 	.globl _AD0BUSY
                                     54 	.globl _ADBUSY
                                     55 	.globl _AD0CM1
                                     56 	.globl _ADSTM1
                                     57 	.globl _AD0CM0
                                     58 	.globl _ADSTM0
                                     59 	.globl _AD0WINT
                                     60 	.globl _ADWINT
                                     61 	.globl _AD0LJST
                                     62 	.globl _ADLJST
                                     63 	.globl _CF
                                     64 	.globl _CR
                                     65 	.globl _CCF4
                                     66 	.globl _CCF3
                                     67 	.globl _CCF2
                                     68 	.globl _CCF1
                                     69 	.globl _CCF0
                                     70 	.globl _CY
                                     71 	.globl _AC
                                     72 	.globl _F0
                                     73 	.globl _RS1
                                     74 	.globl _RS0
                                     75 	.globl _OV
                                     76 	.globl _F1
                                     77 	.globl _P
                                     78 	.globl _TF2
                                     79 	.globl _EXF2
                                     80 	.globl _RCLK
                                     81 	.globl _TCLK
                                     82 	.globl _EXEN2
                                     83 	.globl _TR2
                                     84 	.globl _CT2
                                     85 	.globl _CPRL2
                                     86 	.globl _BUSY
                                     87 	.globl _ENSMB
                                     88 	.globl _STA
                                     89 	.globl _STO
                                     90 	.globl _SI
                                     91 	.globl _AA
                                     92 	.globl _SMBFTE
                                     93 	.globl _SMBTOE
                                     94 	.globl _PT2
                                     95 	.globl _PS
                                     96 	.globl _PS0
                                     97 	.globl _PT1
                                     98 	.globl _PX1
                                     99 	.globl _PT0
                                    100 	.globl _PX0
                                    101 	.globl _P3_7
                                    102 	.globl _P3_6
                                    103 	.globl _P3_5
                                    104 	.globl _P3_4
                                    105 	.globl _P3_3
                                    106 	.globl _P3_2
                                    107 	.globl _P3_1
                                    108 	.globl _P3_0
                                    109 	.globl _EA
                                    110 	.globl _ET2
                                    111 	.globl _ES
                                    112 	.globl _ES0
                                    113 	.globl _ET1
                                    114 	.globl _EX1
                                    115 	.globl _ET0
                                    116 	.globl _EX0
                                    117 	.globl _P2_7
                                    118 	.globl _P2_6
                                    119 	.globl _P2_5
                                    120 	.globl _P2_4
                                    121 	.globl _P2_3
                                    122 	.globl _P2_2
                                    123 	.globl _P2_1
                                    124 	.globl _P2_0
                                    125 	.globl _S0MODE
                                    126 	.globl _SM00
                                    127 	.globl _SM0
                                    128 	.globl _SM10
                                    129 	.globl _SM1
                                    130 	.globl _MCE0
                                    131 	.globl _SM20
                                    132 	.globl _SM2
                                    133 	.globl _REN0
                                    134 	.globl _REN
                                    135 	.globl _TB80
                                    136 	.globl _TB8
                                    137 	.globl _RB80
                                    138 	.globl _RB8
                                    139 	.globl _TI0
                                    140 	.globl _TI
                                    141 	.globl _RI0
                                    142 	.globl _RI
                                    143 	.globl _P1_7
                                    144 	.globl _P1_6
                                    145 	.globl _P1_5
                                    146 	.globl _P1_4
                                    147 	.globl _P1_3
                                    148 	.globl _P1_2
                                    149 	.globl _P1_1
                                    150 	.globl _P1_0
                                    151 	.globl _TF1
                                    152 	.globl _TR1
                                    153 	.globl _TF0
                                    154 	.globl _TR0
                                    155 	.globl _IE1
                                    156 	.globl _IT1
                                    157 	.globl _IE0
                                    158 	.globl _IT0
                                    159 	.globl _P0_7
                                    160 	.globl _P0_6
                                    161 	.globl _P0_5
                                    162 	.globl _P0_4
                                    163 	.globl _P0_3
                                    164 	.globl _P0_2
                                    165 	.globl _P0_1
                                    166 	.globl _P0_0
                                    167 	.globl _PCA0CP4
                                    168 	.globl _PCA0CP3
                                    169 	.globl _PCA0CP2
                                    170 	.globl _PCA0CP1
                                    171 	.globl _PCA0CP0
                                    172 	.globl _PCA0
                                    173 	.globl _DAC1
                                    174 	.globl _DAC0
                                    175 	.globl _ADC0LT
                                    176 	.globl _ADC0GT
                                    177 	.globl _ADC0
                                    178 	.globl _RCAP4
                                    179 	.globl _TMR4
                                    180 	.globl _TMR3RL
                                    181 	.globl _TMR3
                                    182 	.globl _RCAP2
                                    183 	.globl _TMR2
                                    184 	.globl _TMR1
                                    185 	.globl _TMR0
                                    186 	.globl _WDTCN
                                    187 	.globl _PCA0CPH4
                                    188 	.globl _PCA0CPH3
                                    189 	.globl _PCA0CPH2
                                    190 	.globl _PCA0CPH1
                                    191 	.globl _PCA0CPH0
                                    192 	.globl _PCA0H
                                    193 	.globl _SPI0CN
                                    194 	.globl _EIP2
                                    195 	.globl _EIP1
                                    196 	.globl _TH4
                                    197 	.globl _TL4
                                    198 	.globl _SADDR1
                                    199 	.globl _SBUF1
                                    200 	.globl _SCON1
                                    201 	.globl _B
                                    202 	.globl _RSTSRC
                                    203 	.globl _PCA0CPL4
                                    204 	.globl _PCA0CPL3
                                    205 	.globl _PCA0CPL2
                                    206 	.globl _PCA0CPL1
                                    207 	.globl _PCA0CPL0
                                    208 	.globl _PCA0L
                                    209 	.globl _ADC0CN
                                    210 	.globl _EIE2
                                    211 	.globl _EIE1
                                    212 	.globl _RCAP4H
                                    213 	.globl _RCAP4L
                                    214 	.globl _XBR2
                                    215 	.globl _XBR1
                                    216 	.globl _XBR0
                                    217 	.globl _ACC
                                    218 	.globl _PCA0CPM4
                                    219 	.globl _PCA0CPM3
                                    220 	.globl _PCA0CPM2
                                    221 	.globl _PCA0CPM1
                                    222 	.globl _PCA0CPM0
                                    223 	.globl _PCA0MD
                                    224 	.globl _PCA0CN
                                    225 	.globl _DAC1CN
                                    226 	.globl _DAC1H
                                    227 	.globl _DAC1L
                                    228 	.globl _DAC0CN
                                    229 	.globl _DAC0H
                                    230 	.globl _DAC0L
                                    231 	.globl _REF0CN
                                    232 	.globl _PSW
                                    233 	.globl _SMB0CR
                                    234 	.globl _TH2
                                    235 	.globl _TL2
                                    236 	.globl _RCAP2H
                                    237 	.globl _RCAP2L
                                    238 	.globl _T4CON
                                    239 	.globl _T2CON
                                    240 	.globl _ADC0LTH
                                    241 	.globl _ADC0LTL
                                    242 	.globl _ADC0GTH
                                    243 	.globl _ADC0GTL
                                    244 	.globl _SMB0ADR
                                    245 	.globl _SMB0DAT
                                    246 	.globl _SMB0STA
                                    247 	.globl _SMB0CN
                                    248 	.globl _ADC0H
                                    249 	.globl _ADC0L
                                    250 	.globl _P1MDIN
                                    251 	.globl _ADC0CF
                                    252 	.globl _AMX0SL
                                    253 	.globl _AMX0CF
                                    254 	.globl _SADEN0
                                    255 	.globl _IP
                                    256 	.globl _FLACL
                                    257 	.globl _FLSCL
                                    258 	.globl _P74OUT
                                    259 	.globl _OSCICN
                                    260 	.globl _OSCXCN
                                    261 	.globl _P3
                                    262 	.globl __XPAGE
                                    263 	.globl _EMI0CN
                                    264 	.globl _SADEN1
                                    265 	.globl _P3IF
                                    266 	.globl _AMX1SL
                                    267 	.globl _ADC1CF
                                    268 	.globl _ADC1CN
                                    269 	.globl _SADDR0
                                    270 	.globl _IE
                                    271 	.globl _P3MDOUT
                                    272 	.globl _PRT3CF
                                    273 	.globl _P2MDOUT
                                    274 	.globl _PRT2CF
                                    275 	.globl _P1MDOUT
                                    276 	.globl _PRT1CF
                                    277 	.globl _P0MDOUT
                                    278 	.globl _PRT0CF
                                    279 	.globl _EMI0CF
                                    280 	.globl _EMI0TC
                                    281 	.globl _P2
                                    282 	.globl _CPT1CN
                                    283 	.globl _CPT0CN
                                    284 	.globl _SPI0CKR
                                    285 	.globl _ADC1
                                    286 	.globl _SPI0DAT
                                    287 	.globl _SPI0CFG
                                    288 	.globl _SBUF0
                                    289 	.globl _SBUF
                                    290 	.globl _SCON0
                                    291 	.globl _SCON
                                    292 	.globl _P7
                                    293 	.globl _TMR3H
                                    294 	.globl _TMR3L
                                    295 	.globl _TMR3RLH
                                    296 	.globl _TMR3RLL
                                    297 	.globl _TMR3CN
                                    298 	.globl _P1
                                    299 	.globl _PSCTL
                                    300 	.globl _CKCON
                                    301 	.globl _TH1
                                    302 	.globl _TH0
                                    303 	.globl _TL1
                                    304 	.globl _TL0
                                    305 	.globl _TMOD
                                    306 	.globl _TCON
                                    307 	.globl _PCON
                                    308 	.globl _P6
                                    309 	.globl _P5
                                    310 	.globl _P4
                                    311 	.globl _DPH
                                    312 	.globl _DPL
                                    313 	.globl _SP
                                    314 	.globl _P0
                                    315 	.globl _angle
                                    316 	.globl _temp_pw
                                    317 	.globl _dk
                                    318 	.globl _pk
                                    319 	.globl _error
                                    320 	.globl _desired_heading
                                    321 	.globl _new_heading
                                    322 	.globl _heading
                                    323 	.globl _printcounts
                                    324 	.globl _h_count
                                    325 	.globl _counts
                                    326 	.globl _PW
                                    327 	.globl _PW_MIN
                                    328 	.globl _PW_MAX
                                    329 	.globl _PW_CENTER
                                    330 	.globl _new_range
                                    331 	.globl _ranger_count
                                    332 	.globl _distance
                                    333 	.globl _dr_input_data
                                    334 	.globl _i2c_read_data_PARM_4
                                    335 	.globl _i2c_read_data_PARM_3
                                    336 	.globl _i2c_read_data_PARM_2
                                    337 	.globl _i2c_write_data_PARM_4
                                    338 	.globl _i2c_write_data_PARM_3
                                    339 	.globl _i2c_write_data_PARM_2
                                    340 	.globl _aligned_alloc_PARM_2
                                    341 	.globl _Data2
                                    342 	.globl _lcd_print
                                    343 	.globl _lcd_clear
                                    344 	.globl _kpd_input
                                    345 	.globl _delay_time
                                    346 	.globl _i2c_start
                                    347 	.globl _i2c_write
                                    348 	.globl _i2c_write_and_stop
                                    349 	.globl _i2c_read
                                    350 	.globl _i2c_read_and_stop
                                    351 	.globl _i2c_write_data
                                    352 	.globl _i2c_read_data
                                    353 	.globl _Accel_Init
                                    354 	.globl _Accel_Init_C
                                    355 	.globl _setAngle
                                    356 	.globl _ReadRanger
                                    357 	.globl _ReadCompass
                                    358 	.globl _errHeading1
                                    359 	.globl _errHeading2
                                    360 	.globl _errHeading3
                                    361 	.globl _getGain
                                    362 	.globl _getHeading
                                    363 	.globl _printData
                                    364 	.globl _Port_Init
                                    365 	.globl _XBR0_Init
                                    366 	.globl _PCA_Init
                                    367 	.globl _Interrupt_Init
                                    368 	.globl _PCA_ISR
                                    369 	.globl _SMB_Init
                                    370 	.globl _ADC_Init
                                    371 	.globl _read_AD_input
                                    372 ;--------------------------------------------------------
                                    373 ; special function registers
                                    374 ;--------------------------------------------------------
                                    375 	.area RSEG    (ABS,DATA)
      000000                        376 	.org 0x0000
                           000080   377 G$P0$0$0 == 0x0080
                           000080   378 _P0	=	0x0080
                           000081   379 G$SP$0$0 == 0x0081
                           000081   380 _SP	=	0x0081
                           000082   381 G$DPL$0$0 == 0x0082
                           000082   382 _DPL	=	0x0082
                           000083   383 G$DPH$0$0 == 0x0083
                           000083   384 _DPH	=	0x0083
                           000084   385 G$P4$0$0 == 0x0084
                           000084   386 _P4	=	0x0084
                           000085   387 G$P5$0$0 == 0x0085
                           000085   388 _P5	=	0x0085
                           000086   389 G$P6$0$0 == 0x0086
                           000086   390 _P6	=	0x0086
                           000087   391 G$PCON$0$0 == 0x0087
                           000087   392 _PCON	=	0x0087
                           000088   393 G$TCON$0$0 == 0x0088
                           000088   394 _TCON	=	0x0088
                           000089   395 G$TMOD$0$0 == 0x0089
                           000089   396 _TMOD	=	0x0089
                           00008A   397 G$TL0$0$0 == 0x008a
                           00008A   398 _TL0	=	0x008a
                           00008B   399 G$TL1$0$0 == 0x008b
                           00008B   400 _TL1	=	0x008b
                           00008C   401 G$TH0$0$0 == 0x008c
                           00008C   402 _TH0	=	0x008c
                           00008D   403 G$TH1$0$0 == 0x008d
                           00008D   404 _TH1	=	0x008d
                           00008E   405 G$CKCON$0$0 == 0x008e
                           00008E   406 _CKCON	=	0x008e
                           00008F   407 G$PSCTL$0$0 == 0x008f
                           00008F   408 _PSCTL	=	0x008f
                           000090   409 G$P1$0$0 == 0x0090
                           000090   410 _P1	=	0x0090
                           000091   411 G$TMR3CN$0$0 == 0x0091
                           000091   412 _TMR3CN	=	0x0091
                           000092   413 G$TMR3RLL$0$0 == 0x0092
                           000092   414 _TMR3RLL	=	0x0092
                           000093   415 G$TMR3RLH$0$0 == 0x0093
                           000093   416 _TMR3RLH	=	0x0093
                           000094   417 G$TMR3L$0$0 == 0x0094
                           000094   418 _TMR3L	=	0x0094
                           000095   419 G$TMR3H$0$0 == 0x0095
                           000095   420 _TMR3H	=	0x0095
                           000096   421 G$P7$0$0 == 0x0096
                           000096   422 _P7	=	0x0096
                           000098   423 G$SCON$0$0 == 0x0098
                           000098   424 _SCON	=	0x0098
                           000098   425 G$SCON0$0$0 == 0x0098
                           000098   426 _SCON0	=	0x0098
                           000099   427 G$SBUF$0$0 == 0x0099
                           000099   428 _SBUF	=	0x0099
                           000099   429 G$SBUF0$0$0 == 0x0099
                           000099   430 _SBUF0	=	0x0099
                           00009A   431 G$SPI0CFG$0$0 == 0x009a
                           00009A   432 _SPI0CFG	=	0x009a
                           00009B   433 G$SPI0DAT$0$0 == 0x009b
                           00009B   434 _SPI0DAT	=	0x009b
                           00009C   435 G$ADC1$0$0 == 0x009c
                           00009C   436 _ADC1	=	0x009c
                           00009D   437 G$SPI0CKR$0$0 == 0x009d
                           00009D   438 _SPI0CKR	=	0x009d
                           00009E   439 G$CPT0CN$0$0 == 0x009e
                           00009E   440 _CPT0CN	=	0x009e
                           00009F   441 G$CPT1CN$0$0 == 0x009f
                           00009F   442 _CPT1CN	=	0x009f
                           0000A0   443 G$P2$0$0 == 0x00a0
                           0000A0   444 _P2	=	0x00a0
                           0000A1   445 G$EMI0TC$0$0 == 0x00a1
                           0000A1   446 _EMI0TC	=	0x00a1
                           0000A3   447 G$EMI0CF$0$0 == 0x00a3
                           0000A3   448 _EMI0CF	=	0x00a3
                           0000A4   449 G$PRT0CF$0$0 == 0x00a4
                           0000A4   450 _PRT0CF	=	0x00a4
                           0000A4   451 G$P0MDOUT$0$0 == 0x00a4
                           0000A4   452 _P0MDOUT	=	0x00a4
                           0000A5   453 G$PRT1CF$0$0 == 0x00a5
                           0000A5   454 _PRT1CF	=	0x00a5
                           0000A5   455 G$P1MDOUT$0$0 == 0x00a5
                           0000A5   456 _P1MDOUT	=	0x00a5
                           0000A6   457 G$PRT2CF$0$0 == 0x00a6
                           0000A6   458 _PRT2CF	=	0x00a6
                           0000A6   459 G$P2MDOUT$0$0 == 0x00a6
                           0000A6   460 _P2MDOUT	=	0x00a6
                           0000A7   461 G$PRT3CF$0$0 == 0x00a7
                           0000A7   462 _PRT3CF	=	0x00a7
                           0000A7   463 G$P3MDOUT$0$0 == 0x00a7
                           0000A7   464 _P3MDOUT	=	0x00a7
                           0000A8   465 G$IE$0$0 == 0x00a8
                           0000A8   466 _IE	=	0x00a8
                           0000A9   467 G$SADDR0$0$0 == 0x00a9
                           0000A9   468 _SADDR0	=	0x00a9
                           0000AA   469 G$ADC1CN$0$0 == 0x00aa
                           0000AA   470 _ADC1CN	=	0x00aa
                           0000AB   471 G$ADC1CF$0$0 == 0x00ab
                           0000AB   472 _ADC1CF	=	0x00ab
                           0000AC   473 G$AMX1SL$0$0 == 0x00ac
                           0000AC   474 _AMX1SL	=	0x00ac
                           0000AD   475 G$P3IF$0$0 == 0x00ad
                           0000AD   476 _P3IF	=	0x00ad
                           0000AE   477 G$SADEN1$0$0 == 0x00ae
                           0000AE   478 _SADEN1	=	0x00ae
                           0000AF   479 G$EMI0CN$0$0 == 0x00af
                           0000AF   480 _EMI0CN	=	0x00af
                           0000AF   481 G$_XPAGE$0$0 == 0x00af
                           0000AF   482 __XPAGE	=	0x00af
                           0000B0   483 G$P3$0$0 == 0x00b0
                           0000B0   484 _P3	=	0x00b0
                           0000B1   485 G$OSCXCN$0$0 == 0x00b1
                           0000B1   486 _OSCXCN	=	0x00b1
                           0000B2   487 G$OSCICN$0$0 == 0x00b2
                           0000B2   488 _OSCICN	=	0x00b2
                           0000B5   489 G$P74OUT$0$0 == 0x00b5
                           0000B5   490 _P74OUT	=	0x00b5
                           0000B6   491 G$FLSCL$0$0 == 0x00b6
                           0000B6   492 _FLSCL	=	0x00b6
                           0000B7   493 G$FLACL$0$0 == 0x00b7
                           0000B7   494 _FLACL	=	0x00b7
                           0000B8   495 G$IP$0$0 == 0x00b8
                           0000B8   496 _IP	=	0x00b8
                           0000B9   497 G$SADEN0$0$0 == 0x00b9
                           0000B9   498 _SADEN0	=	0x00b9
                           0000BA   499 G$AMX0CF$0$0 == 0x00ba
                           0000BA   500 _AMX0CF	=	0x00ba
                           0000BB   501 G$AMX0SL$0$0 == 0x00bb
                           0000BB   502 _AMX0SL	=	0x00bb
                           0000BC   503 G$ADC0CF$0$0 == 0x00bc
                           0000BC   504 _ADC0CF	=	0x00bc
                           0000BD   505 G$P1MDIN$0$0 == 0x00bd
                           0000BD   506 _P1MDIN	=	0x00bd
                           0000BE   507 G$ADC0L$0$0 == 0x00be
                           0000BE   508 _ADC0L	=	0x00be
                           0000BF   509 G$ADC0H$0$0 == 0x00bf
                           0000BF   510 _ADC0H	=	0x00bf
                           0000C0   511 G$SMB0CN$0$0 == 0x00c0
                           0000C0   512 _SMB0CN	=	0x00c0
                           0000C1   513 G$SMB0STA$0$0 == 0x00c1
                           0000C1   514 _SMB0STA	=	0x00c1
                           0000C2   515 G$SMB0DAT$0$0 == 0x00c2
                           0000C2   516 _SMB0DAT	=	0x00c2
                           0000C3   517 G$SMB0ADR$0$0 == 0x00c3
                           0000C3   518 _SMB0ADR	=	0x00c3
                           0000C4   519 G$ADC0GTL$0$0 == 0x00c4
                           0000C4   520 _ADC0GTL	=	0x00c4
                           0000C5   521 G$ADC0GTH$0$0 == 0x00c5
                           0000C5   522 _ADC0GTH	=	0x00c5
                           0000C6   523 G$ADC0LTL$0$0 == 0x00c6
                           0000C6   524 _ADC0LTL	=	0x00c6
                           0000C7   525 G$ADC0LTH$0$0 == 0x00c7
                           0000C7   526 _ADC0LTH	=	0x00c7
                           0000C8   527 G$T2CON$0$0 == 0x00c8
                           0000C8   528 _T2CON	=	0x00c8
                           0000C9   529 G$T4CON$0$0 == 0x00c9
                           0000C9   530 _T4CON	=	0x00c9
                           0000CA   531 G$RCAP2L$0$0 == 0x00ca
                           0000CA   532 _RCAP2L	=	0x00ca
                           0000CB   533 G$RCAP2H$0$0 == 0x00cb
                           0000CB   534 _RCAP2H	=	0x00cb
                           0000CC   535 G$TL2$0$0 == 0x00cc
                           0000CC   536 _TL2	=	0x00cc
                           0000CD   537 G$TH2$0$0 == 0x00cd
                           0000CD   538 _TH2	=	0x00cd
                           0000CF   539 G$SMB0CR$0$0 == 0x00cf
                           0000CF   540 _SMB0CR	=	0x00cf
                           0000D0   541 G$PSW$0$0 == 0x00d0
                           0000D0   542 _PSW	=	0x00d0
                           0000D1   543 G$REF0CN$0$0 == 0x00d1
                           0000D1   544 _REF0CN	=	0x00d1
                           0000D2   545 G$DAC0L$0$0 == 0x00d2
                           0000D2   546 _DAC0L	=	0x00d2
                           0000D3   547 G$DAC0H$0$0 == 0x00d3
                           0000D3   548 _DAC0H	=	0x00d3
                           0000D4   549 G$DAC0CN$0$0 == 0x00d4
                           0000D4   550 _DAC0CN	=	0x00d4
                           0000D5   551 G$DAC1L$0$0 == 0x00d5
                           0000D5   552 _DAC1L	=	0x00d5
                           0000D6   553 G$DAC1H$0$0 == 0x00d6
                           0000D6   554 _DAC1H	=	0x00d6
                           0000D7   555 G$DAC1CN$0$0 == 0x00d7
                           0000D7   556 _DAC1CN	=	0x00d7
                           0000D8   557 G$PCA0CN$0$0 == 0x00d8
                           0000D8   558 _PCA0CN	=	0x00d8
                           0000D9   559 G$PCA0MD$0$0 == 0x00d9
                           0000D9   560 _PCA0MD	=	0x00d9
                           0000DA   561 G$PCA0CPM0$0$0 == 0x00da
                           0000DA   562 _PCA0CPM0	=	0x00da
                           0000DB   563 G$PCA0CPM1$0$0 == 0x00db
                           0000DB   564 _PCA0CPM1	=	0x00db
                           0000DC   565 G$PCA0CPM2$0$0 == 0x00dc
                           0000DC   566 _PCA0CPM2	=	0x00dc
                           0000DD   567 G$PCA0CPM3$0$0 == 0x00dd
                           0000DD   568 _PCA0CPM3	=	0x00dd
                           0000DE   569 G$PCA0CPM4$0$0 == 0x00de
                           0000DE   570 _PCA0CPM4	=	0x00de
                           0000E0   571 G$ACC$0$0 == 0x00e0
                           0000E0   572 _ACC	=	0x00e0
                           0000E1   573 G$XBR0$0$0 == 0x00e1
                           0000E1   574 _XBR0	=	0x00e1
                           0000E2   575 G$XBR1$0$0 == 0x00e2
                           0000E2   576 _XBR1	=	0x00e2
                           0000E3   577 G$XBR2$0$0 == 0x00e3
                           0000E3   578 _XBR2	=	0x00e3
                           0000E4   579 G$RCAP4L$0$0 == 0x00e4
                           0000E4   580 _RCAP4L	=	0x00e4
                           0000E5   581 G$RCAP4H$0$0 == 0x00e5
                           0000E5   582 _RCAP4H	=	0x00e5
                           0000E6   583 G$EIE1$0$0 == 0x00e6
                           0000E6   584 _EIE1	=	0x00e6
                           0000E7   585 G$EIE2$0$0 == 0x00e7
                           0000E7   586 _EIE2	=	0x00e7
                           0000E8   587 G$ADC0CN$0$0 == 0x00e8
                           0000E8   588 _ADC0CN	=	0x00e8
                           0000E9   589 G$PCA0L$0$0 == 0x00e9
                           0000E9   590 _PCA0L	=	0x00e9
                           0000EA   591 G$PCA0CPL0$0$0 == 0x00ea
                           0000EA   592 _PCA0CPL0	=	0x00ea
                           0000EB   593 G$PCA0CPL1$0$0 == 0x00eb
                           0000EB   594 _PCA0CPL1	=	0x00eb
                           0000EC   595 G$PCA0CPL2$0$0 == 0x00ec
                           0000EC   596 _PCA0CPL2	=	0x00ec
                           0000ED   597 G$PCA0CPL3$0$0 == 0x00ed
                           0000ED   598 _PCA0CPL3	=	0x00ed
                           0000EE   599 G$PCA0CPL4$0$0 == 0x00ee
                           0000EE   600 _PCA0CPL4	=	0x00ee
                           0000EF   601 G$RSTSRC$0$0 == 0x00ef
                           0000EF   602 _RSTSRC	=	0x00ef
                           0000F0   603 G$B$0$0 == 0x00f0
                           0000F0   604 _B	=	0x00f0
                           0000F1   605 G$SCON1$0$0 == 0x00f1
                           0000F1   606 _SCON1	=	0x00f1
                           0000F2   607 G$SBUF1$0$0 == 0x00f2
                           0000F2   608 _SBUF1	=	0x00f2
                           0000F3   609 G$SADDR1$0$0 == 0x00f3
                           0000F3   610 _SADDR1	=	0x00f3
                           0000F4   611 G$TL4$0$0 == 0x00f4
                           0000F4   612 _TL4	=	0x00f4
                           0000F5   613 G$TH4$0$0 == 0x00f5
                           0000F5   614 _TH4	=	0x00f5
                           0000F6   615 G$EIP1$0$0 == 0x00f6
                           0000F6   616 _EIP1	=	0x00f6
                           0000F7   617 G$EIP2$0$0 == 0x00f7
                           0000F7   618 _EIP2	=	0x00f7
                           0000F8   619 G$SPI0CN$0$0 == 0x00f8
                           0000F8   620 _SPI0CN	=	0x00f8
                           0000F9   621 G$PCA0H$0$0 == 0x00f9
                           0000F9   622 _PCA0H	=	0x00f9
                           0000FA   623 G$PCA0CPH0$0$0 == 0x00fa
                           0000FA   624 _PCA0CPH0	=	0x00fa
                           0000FB   625 G$PCA0CPH1$0$0 == 0x00fb
                           0000FB   626 _PCA0CPH1	=	0x00fb
                           0000FC   627 G$PCA0CPH2$0$0 == 0x00fc
                           0000FC   628 _PCA0CPH2	=	0x00fc
                           0000FD   629 G$PCA0CPH3$0$0 == 0x00fd
                           0000FD   630 _PCA0CPH3	=	0x00fd
                           0000FE   631 G$PCA0CPH4$0$0 == 0x00fe
                           0000FE   632 _PCA0CPH4	=	0x00fe
                           0000FF   633 G$WDTCN$0$0 == 0x00ff
                           0000FF   634 _WDTCN	=	0x00ff
                           008C8A   635 G$TMR0$0$0 == 0x8c8a
                           008C8A   636 _TMR0	=	0x8c8a
                           008D8B   637 G$TMR1$0$0 == 0x8d8b
                           008D8B   638 _TMR1	=	0x8d8b
                           00CDCC   639 G$TMR2$0$0 == 0xcdcc
                           00CDCC   640 _TMR2	=	0xcdcc
                           00CBCA   641 G$RCAP2$0$0 == 0xcbca
                           00CBCA   642 _RCAP2	=	0xcbca
                           009594   643 G$TMR3$0$0 == 0x9594
                           009594   644 _TMR3	=	0x9594
                           009392   645 G$TMR3RL$0$0 == 0x9392
                           009392   646 _TMR3RL	=	0x9392
                           00F5F4   647 G$TMR4$0$0 == 0xf5f4
                           00F5F4   648 _TMR4	=	0xf5f4
                           00E5E4   649 G$RCAP4$0$0 == 0xe5e4
                           00E5E4   650 _RCAP4	=	0xe5e4
                           00BFBE   651 G$ADC0$0$0 == 0xbfbe
                           00BFBE   652 _ADC0	=	0xbfbe
                           00C5C4   653 G$ADC0GT$0$0 == 0xc5c4
                           00C5C4   654 _ADC0GT	=	0xc5c4
                           00C7C6   655 G$ADC0LT$0$0 == 0xc7c6
                           00C7C6   656 _ADC0LT	=	0xc7c6
                           00D3D2   657 G$DAC0$0$0 == 0xd3d2
                           00D3D2   658 _DAC0	=	0xd3d2
                           00D6D5   659 G$DAC1$0$0 == 0xd6d5
                           00D6D5   660 _DAC1	=	0xd6d5
                           00F9E9   661 G$PCA0$0$0 == 0xf9e9
                           00F9E9   662 _PCA0	=	0xf9e9
                           00FAEA   663 G$PCA0CP0$0$0 == 0xfaea
                           00FAEA   664 _PCA0CP0	=	0xfaea
                           00FBEB   665 G$PCA0CP1$0$0 == 0xfbeb
                           00FBEB   666 _PCA0CP1	=	0xfbeb
                           00FCEC   667 G$PCA0CP2$0$0 == 0xfcec
                           00FCEC   668 _PCA0CP2	=	0xfcec
                           00FDED   669 G$PCA0CP3$0$0 == 0xfded
                           00FDED   670 _PCA0CP3	=	0xfded
                           00FEEE   671 G$PCA0CP4$0$0 == 0xfeee
                           00FEEE   672 _PCA0CP4	=	0xfeee
                                    673 ;--------------------------------------------------------
                                    674 ; special function bits
                                    675 ;--------------------------------------------------------
                                    676 	.area RSEG    (ABS,DATA)
      000000                        677 	.org 0x0000
                           000080   678 G$P0_0$0$0 == 0x0080
                           000080   679 _P0_0	=	0x0080
                           000081   680 G$P0_1$0$0 == 0x0081
                           000081   681 _P0_1	=	0x0081
                           000082   682 G$P0_2$0$0 == 0x0082
                           000082   683 _P0_2	=	0x0082
                           000083   684 G$P0_3$0$0 == 0x0083
                           000083   685 _P0_3	=	0x0083
                           000084   686 G$P0_4$0$0 == 0x0084
                           000084   687 _P0_4	=	0x0084
                           000085   688 G$P0_5$0$0 == 0x0085
                           000085   689 _P0_5	=	0x0085
                           000086   690 G$P0_6$0$0 == 0x0086
                           000086   691 _P0_6	=	0x0086
                           000087   692 G$P0_7$0$0 == 0x0087
                           000087   693 _P0_7	=	0x0087
                           000088   694 G$IT0$0$0 == 0x0088
                           000088   695 _IT0	=	0x0088
                           000089   696 G$IE0$0$0 == 0x0089
                           000089   697 _IE0	=	0x0089
                           00008A   698 G$IT1$0$0 == 0x008a
                           00008A   699 _IT1	=	0x008a
                           00008B   700 G$IE1$0$0 == 0x008b
                           00008B   701 _IE1	=	0x008b
                           00008C   702 G$TR0$0$0 == 0x008c
                           00008C   703 _TR0	=	0x008c
                           00008D   704 G$TF0$0$0 == 0x008d
                           00008D   705 _TF0	=	0x008d
                           00008E   706 G$TR1$0$0 == 0x008e
                           00008E   707 _TR1	=	0x008e
                           00008F   708 G$TF1$0$0 == 0x008f
                           00008F   709 _TF1	=	0x008f
                           000090   710 G$P1_0$0$0 == 0x0090
                           000090   711 _P1_0	=	0x0090
                           000091   712 G$P1_1$0$0 == 0x0091
                           000091   713 _P1_1	=	0x0091
                           000092   714 G$P1_2$0$0 == 0x0092
                           000092   715 _P1_2	=	0x0092
                           000093   716 G$P1_3$0$0 == 0x0093
                           000093   717 _P1_3	=	0x0093
                           000094   718 G$P1_4$0$0 == 0x0094
                           000094   719 _P1_4	=	0x0094
                           000095   720 G$P1_5$0$0 == 0x0095
                           000095   721 _P1_5	=	0x0095
                           000096   722 G$P1_6$0$0 == 0x0096
                           000096   723 _P1_6	=	0x0096
                           000097   724 G$P1_7$0$0 == 0x0097
                           000097   725 _P1_7	=	0x0097
                           000098   726 G$RI$0$0 == 0x0098
                           000098   727 _RI	=	0x0098
                           000098   728 G$RI0$0$0 == 0x0098
                           000098   729 _RI0	=	0x0098
                           000099   730 G$TI$0$0 == 0x0099
                           000099   731 _TI	=	0x0099
                           000099   732 G$TI0$0$0 == 0x0099
                           000099   733 _TI0	=	0x0099
                           00009A   734 G$RB8$0$0 == 0x009a
                           00009A   735 _RB8	=	0x009a
                           00009A   736 G$RB80$0$0 == 0x009a
                           00009A   737 _RB80	=	0x009a
                           00009B   738 G$TB8$0$0 == 0x009b
                           00009B   739 _TB8	=	0x009b
                           00009B   740 G$TB80$0$0 == 0x009b
                           00009B   741 _TB80	=	0x009b
                           00009C   742 G$REN$0$0 == 0x009c
                           00009C   743 _REN	=	0x009c
                           00009C   744 G$REN0$0$0 == 0x009c
                           00009C   745 _REN0	=	0x009c
                           00009D   746 G$SM2$0$0 == 0x009d
                           00009D   747 _SM2	=	0x009d
                           00009D   748 G$SM20$0$0 == 0x009d
                           00009D   749 _SM20	=	0x009d
                           00009D   750 G$MCE0$0$0 == 0x009d
                           00009D   751 _MCE0	=	0x009d
                           00009E   752 G$SM1$0$0 == 0x009e
                           00009E   753 _SM1	=	0x009e
                           00009E   754 G$SM10$0$0 == 0x009e
                           00009E   755 _SM10	=	0x009e
                           00009F   756 G$SM0$0$0 == 0x009f
                           00009F   757 _SM0	=	0x009f
                           00009F   758 G$SM00$0$0 == 0x009f
                           00009F   759 _SM00	=	0x009f
                           00009F   760 G$S0MODE$0$0 == 0x009f
                           00009F   761 _S0MODE	=	0x009f
                           0000A0   762 G$P2_0$0$0 == 0x00a0
                           0000A0   763 _P2_0	=	0x00a0
                           0000A1   764 G$P2_1$0$0 == 0x00a1
                           0000A1   765 _P2_1	=	0x00a1
                           0000A2   766 G$P2_2$0$0 == 0x00a2
                           0000A2   767 _P2_2	=	0x00a2
                           0000A3   768 G$P2_3$0$0 == 0x00a3
                           0000A3   769 _P2_3	=	0x00a3
                           0000A4   770 G$P2_4$0$0 == 0x00a4
                           0000A4   771 _P2_4	=	0x00a4
                           0000A5   772 G$P2_5$0$0 == 0x00a5
                           0000A5   773 _P2_5	=	0x00a5
                           0000A6   774 G$P2_6$0$0 == 0x00a6
                           0000A6   775 _P2_6	=	0x00a6
                           0000A7   776 G$P2_7$0$0 == 0x00a7
                           0000A7   777 _P2_7	=	0x00a7
                           0000A8   778 G$EX0$0$0 == 0x00a8
                           0000A8   779 _EX0	=	0x00a8
                           0000A9   780 G$ET0$0$0 == 0x00a9
                           0000A9   781 _ET0	=	0x00a9
                           0000AA   782 G$EX1$0$0 == 0x00aa
                           0000AA   783 _EX1	=	0x00aa
                           0000AB   784 G$ET1$0$0 == 0x00ab
                           0000AB   785 _ET1	=	0x00ab
                           0000AC   786 G$ES0$0$0 == 0x00ac
                           0000AC   787 _ES0	=	0x00ac
                           0000AC   788 G$ES$0$0 == 0x00ac
                           0000AC   789 _ES	=	0x00ac
                           0000AD   790 G$ET2$0$0 == 0x00ad
                           0000AD   791 _ET2	=	0x00ad
                           0000AF   792 G$EA$0$0 == 0x00af
                           0000AF   793 _EA	=	0x00af
                           0000B0   794 G$P3_0$0$0 == 0x00b0
                           0000B0   795 _P3_0	=	0x00b0
                           0000B1   796 G$P3_1$0$0 == 0x00b1
                           0000B1   797 _P3_1	=	0x00b1
                           0000B2   798 G$P3_2$0$0 == 0x00b2
                           0000B2   799 _P3_2	=	0x00b2
                           0000B3   800 G$P3_3$0$0 == 0x00b3
                           0000B3   801 _P3_3	=	0x00b3
                           0000B4   802 G$P3_4$0$0 == 0x00b4
                           0000B4   803 _P3_4	=	0x00b4
                           0000B5   804 G$P3_5$0$0 == 0x00b5
                           0000B5   805 _P3_5	=	0x00b5
                           0000B6   806 G$P3_6$0$0 == 0x00b6
                           0000B6   807 _P3_6	=	0x00b6
                           0000B7   808 G$P3_7$0$0 == 0x00b7
                           0000B7   809 _P3_7	=	0x00b7
                           0000B8   810 G$PX0$0$0 == 0x00b8
                           0000B8   811 _PX0	=	0x00b8
                           0000B9   812 G$PT0$0$0 == 0x00b9
                           0000B9   813 _PT0	=	0x00b9
                           0000BA   814 G$PX1$0$0 == 0x00ba
                           0000BA   815 _PX1	=	0x00ba
                           0000BB   816 G$PT1$0$0 == 0x00bb
                           0000BB   817 _PT1	=	0x00bb
                           0000BC   818 G$PS0$0$0 == 0x00bc
                           0000BC   819 _PS0	=	0x00bc
                           0000BC   820 G$PS$0$0 == 0x00bc
                           0000BC   821 _PS	=	0x00bc
                           0000BD   822 G$PT2$0$0 == 0x00bd
                           0000BD   823 _PT2	=	0x00bd
                           0000C0   824 G$SMBTOE$0$0 == 0x00c0
                           0000C0   825 _SMBTOE	=	0x00c0
                           0000C1   826 G$SMBFTE$0$0 == 0x00c1
                           0000C1   827 _SMBFTE	=	0x00c1
                           0000C2   828 G$AA$0$0 == 0x00c2
                           0000C2   829 _AA	=	0x00c2
                           0000C3   830 G$SI$0$0 == 0x00c3
                           0000C3   831 _SI	=	0x00c3
                           0000C4   832 G$STO$0$0 == 0x00c4
                           0000C4   833 _STO	=	0x00c4
                           0000C5   834 G$STA$0$0 == 0x00c5
                           0000C5   835 _STA	=	0x00c5
                           0000C6   836 G$ENSMB$0$0 == 0x00c6
                           0000C6   837 _ENSMB	=	0x00c6
                           0000C7   838 G$BUSY$0$0 == 0x00c7
                           0000C7   839 _BUSY	=	0x00c7
                           0000C8   840 G$CPRL2$0$0 == 0x00c8
                           0000C8   841 _CPRL2	=	0x00c8
                           0000C9   842 G$CT2$0$0 == 0x00c9
                           0000C9   843 _CT2	=	0x00c9
                           0000CA   844 G$TR2$0$0 == 0x00ca
                           0000CA   845 _TR2	=	0x00ca
                           0000CB   846 G$EXEN2$0$0 == 0x00cb
                           0000CB   847 _EXEN2	=	0x00cb
                           0000CC   848 G$TCLK$0$0 == 0x00cc
                           0000CC   849 _TCLK	=	0x00cc
                           0000CD   850 G$RCLK$0$0 == 0x00cd
                           0000CD   851 _RCLK	=	0x00cd
                           0000CE   852 G$EXF2$0$0 == 0x00ce
                           0000CE   853 _EXF2	=	0x00ce
                           0000CF   854 G$TF2$0$0 == 0x00cf
                           0000CF   855 _TF2	=	0x00cf
                           0000D0   856 G$P$0$0 == 0x00d0
                           0000D0   857 _P	=	0x00d0
                           0000D1   858 G$F1$0$0 == 0x00d1
                           0000D1   859 _F1	=	0x00d1
                           0000D2   860 G$OV$0$0 == 0x00d2
                           0000D2   861 _OV	=	0x00d2
                           0000D3   862 G$RS0$0$0 == 0x00d3
                           0000D3   863 _RS0	=	0x00d3
                           0000D4   864 G$RS1$0$0 == 0x00d4
                           0000D4   865 _RS1	=	0x00d4
                           0000D5   866 G$F0$0$0 == 0x00d5
                           0000D5   867 _F0	=	0x00d5
                           0000D6   868 G$AC$0$0 == 0x00d6
                           0000D6   869 _AC	=	0x00d6
                           0000D7   870 G$CY$0$0 == 0x00d7
                           0000D7   871 _CY	=	0x00d7
                           0000D8   872 G$CCF0$0$0 == 0x00d8
                           0000D8   873 _CCF0	=	0x00d8
                           0000D9   874 G$CCF1$0$0 == 0x00d9
                           0000D9   875 _CCF1	=	0x00d9
                           0000DA   876 G$CCF2$0$0 == 0x00da
                           0000DA   877 _CCF2	=	0x00da
                           0000DB   878 G$CCF3$0$0 == 0x00db
                           0000DB   879 _CCF3	=	0x00db
                           0000DC   880 G$CCF4$0$0 == 0x00dc
                           0000DC   881 _CCF4	=	0x00dc
                           0000DE   882 G$CR$0$0 == 0x00de
                           0000DE   883 _CR	=	0x00de
                           0000DF   884 G$CF$0$0 == 0x00df
                           0000DF   885 _CF	=	0x00df
                           0000E8   886 G$ADLJST$0$0 == 0x00e8
                           0000E8   887 _ADLJST	=	0x00e8
                           0000E8   888 G$AD0LJST$0$0 == 0x00e8
                           0000E8   889 _AD0LJST	=	0x00e8
                           0000E9   890 G$ADWINT$0$0 == 0x00e9
                           0000E9   891 _ADWINT	=	0x00e9
                           0000E9   892 G$AD0WINT$0$0 == 0x00e9
                           0000E9   893 _AD0WINT	=	0x00e9
                           0000EA   894 G$ADSTM0$0$0 == 0x00ea
                           0000EA   895 _ADSTM0	=	0x00ea
                           0000EA   896 G$AD0CM0$0$0 == 0x00ea
                           0000EA   897 _AD0CM0	=	0x00ea
                           0000EB   898 G$ADSTM1$0$0 == 0x00eb
                           0000EB   899 _ADSTM1	=	0x00eb
                           0000EB   900 G$AD0CM1$0$0 == 0x00eb
                           0000EB   901 _AD0CM1	=	0x00eb
                           0000EC   902 G$ADBUSY$0$0 == 0x00ec
                           0000EC   903 _ADBUSY	=	0x00ec
                           0000EC   904 G$AD0BUSY$0$0 == 0x00ec
                           0000EC   905 _AD0BUSY	=	0x00ec
                           0000ED   906 G$ADCINT$0$0 == 0x00ed
                           0000ED   907 _ADCINT	=	0x00ed
                           0000ED   908 G$AD0INT$0$0 == 0x00ed
                           0000ED   909 _AD0INT	=	0x00ed
                           0000EE   910 G$ADCTM$0$0 == 0x00ee
                           0000EE   911 _ADCTM	=	0x00ee
                           0000EE   912 G$AD0TM$0$0 == 0x00ee
                           0000EE   913 _AD0TM	=	0x00ee
                           0000EF   914 G$ADCEN$0$0 == 0x00ef
                           0000EF   915 _ADCEN	=	0x00ef
                           0000EF   916 G$AD0EN$0$0 == 0x00ef
                           0000EF   917 _AD0EN	=	0x00ef
                           0000F8   918 G$SPIEN$0$0 == 0x00f8
                           0000F8   919 _SPIEN	=	0x00f8
                           0000F9   920 G$MSTEN$0$0 == 0x00f9
                           0000F9   921 _MSTEN	=	0x00f9
                           0000FA   922 G$SLVSEL$0$0 == 0x00fa
                           0000FA   923 _SLVSEL	=	0x00fa
                           0000FB   924 G$TXBSY$0$0 == 0x00fb
                           0000FB   925 _TXBSY	=	0x00fb
                           0000FC   926 G$RXOVRN$0$0 == 0x00fc
                           0000FC   927 _RXOVRN	=	0x00fc
                           0000FD   928 G$MODF$0$0 == 0x00fd
                           0000FD   929 _MODF	=	0x00fd
                           0000FE   930 G$WCOL$0$0 == 0x00fe
                           0000FE   931 _WCOL	=	0x00fe
                           0000FF   932 G$SPIF$0$0 == 0x00ff
                           0000FF   933 _SPIF	=	0x00ff
                           0000C7   934 G$BUS_BUSY$0$0 == 0x00c7
                           0000C7   935 _BUS_BUSY	=	0x00c7
                           0000C6   936 G$BUS_EN$0$0 == 0x00c6
                           0000C6   937 _BUS_EN	=	0x00c6
                           0000C5   938 G$BUS_START$0$0 == 0x00c5
                           0000C5   939 _BUS_START	=	0x00c5
                           0000C4   940 G$BUS_STOP$0$0 == 0x00c4
                           0000C4   941 _BUS_STOP	=	0x00c4
                           0000C3   942 G$BUS_INT$0$0 == 0x00c3
                           0000C3   943 _BUS_INT	=	0x00c3
                           0000C2   944 G$BUS_AA$0$0 == 0x00c2
                           0000C2   945 _BUS_AA	=	0x00c2
                           0000C1   946 G$BUS_FTE$0$0 == 0x00c1
                           0000C1   947 _BUS_FTE	=	0x00c1
                           0000C0   948 G$BUS_TOE$0$0 == 0x00c0
                           0000C0   949 _BUS_TOE	=	0x00c0
                           000083   950 G$BUS_SCL$0$0 == 0x0083
                           000083   951 _BUS_SCL	=	0x0083
                           0000B0   952 G$DS0$0$0 == 0x00b0
                           0000B0   953 _DS0	=	0x00b0
                           0000B1   954 G$DS1$0$0 == 0x00b1
                           0000B1   955 _DS1	=	0x00b1
                           0000B2   956 G$DS2$0$0 == 0x00b2
                           0000B2   957 _DS2	=	0x00b2
                           0000B3   958 G$DS3$0$0 == 0x00b3
                           0000B3   959 _DS3	=	0x00b3
                           0000B4   960 G$DS4$0$0 == 0x00b4
                           0000B4   961 _DS4	=	0x00b4
                           0000B5   962 G$DS5$0$0 == 0x00b5
                           0000B5   963 _DS5	=	0x00b5
                           0000B6   964 G$DS6$0$0 == 0x00b6
                           0000B6   965 _DS6	=	0x00b6
                           0000B7   966 G$DS7$0$0 == 0x00b7
                           0000B7   967 _DS7	=	0x00b7
                           000093   968 G$BAT$0$0 == 0x0093
                           000093   969 _BAT	=	0x0093
                                    970 ;--------------------------------------------------------
                                    971 ; overlayable register banks
                                    972 ;--------------------------------------------------------
                                    973 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        974 	.ds 8
                                    975 ;--------------------------------------------------------
                                    976 ; internal ram data
                                    977 ;--------------------------------------------------------
                                    978 	.area DSEG    (DATA)
                           000000   979 G$Data2$0$0==.
      000000                        980 _Data2::
      000000                        981 	.ds 3
                           000003   982 LLab_6_New.aligned_alloc$size$1$39==.
      000003                        983 _aligned_alloc_PARM_2:
      000003                        984 	.ds 2
                           000005   985 LLab_6_New.lcd_clear$NumBytes$1$85==.
      000005                        986 _lcd_clear_NumBytes_1_85:
      000005                        987 	.ds 1
                           000006   988 LLab_6_New.lcd_clear$Cmd$1$85==.
      000006                        989 _lcd_clear_Cmd_1_85:
      000006                        990 	.ds 2
                           000008   991 LLab_6_New.read_keypad$Data$1$86==.
      000008                        992 _read_keypad_Data_1_86:
      000008                        993 	.ds 2
                           00000A   994 LLab_6_New.i2c_write_data$start_reg$1$105==.
      00000A                        995 _i2c_write_data_PARM_2:
      00000A                        996 	.ds 1
                           00000B   997 LLab_6_New.i2c_write_data$buffer$1$105==.
      00000B                        998 _i2c_write_data_PARM_3:
      00000B                        999 	.ds 3
                           00000E  1000 LLab_6_New.i2c_write_data$num_bytes$1$105==.
      00000E                       1001 _i2c_write_data_PARM_4:
      00000E                       1002 	.ds 1
                           00000F  1003 LLab_6_New.i2c_read_data$start_reg$1$107==.
      00000F                       1004 _i2c_read_data_PARM_2:
      00000F                       1005 	.ds 1
                           000010  1006 LLab_6_New.i2c_read_data$buffer$1$107==.
      000010                       1007 _i2c_read_data_PARM_3:
      000010                       1008 	.ds 3
                           000013  1009 LLab_6_New.i2c_read_data$num_bytes$1$107==.
      000013                       1010 _i2c_read_data_PARM_4:
      000013                       1011 	.ds 1
                           000014  1012 G$dr_input_data$0$0==.
      000014                       1013 _dr_input_data::
      000014                       1014 	.ds 1
                           000015  1015 G$distance$0$0==.
      000015                       1016 _distance::
      000015                       1017 	.ds 2
                           000017  1018 G$ranger_count$0$0==.
      000017                       1019 _ranger_count::
      000017                       1020 	.ds 1
                           000018  1021 G$new_range$0$0==.
      000018                       1022 _new_range::
      000018                       1023 	.ds 1
                           000019  1024 G$PW_CENTER$0$0==.
      000019                       1025 _PW_CENTER::
      000019                       1026 	.ds 2
                           00001B  1027 G$PW_MAX$0$0==.
      00001B                       1028 _PW_MAX::
      00001B                       1029 	.ds 2
                           00001D  1030 G$PW_MIN$0$0==.
      00001D                       1031 _PW_MIN::
      00001D                       1032 	.ds 2
                           00001F  1033 G$PW$0$0==.
      00001F                       1034 _PW::
      00001F                       1035 	.ds 2
                           000021  1036 G$counts$0$0==.
      000021                       1037 _counts::
      000021                       1038 	.ds 2
                           000023  1039 G$h_count$0$0==.
      000023                       1040 _h_count::
      000023                       1041 	.ds 1
                           000024  1042 G$printcounts$0$0==.
      000024                       1043 _printcounts::
      000024                       1044 	.ds 1
                           000025  1045 G$heading$0$0==.
      000025                       1046 _heading::
      000025                       1047 	.ds 2
                           000027  1048 G$new_heading$0$0==.
      000027                       1049 _new_heading::
      000027                       1050 	.ds 2
                           000029  1051 G$desired_heading$0$0==.
      000029                       1052 _desired_heading::
      000029                       1053 	.ds 2
                           00002B  1054 G$error$0$0==.
      00002B                       1055 _error::
      00002B                       1056 	.ds 2
                           00002D  1057 G$pk$0$0==.
      00002D                       1058 _pk::
      00002D                       1059 	.ds 2
                           00002F  1060 G$dk$0$0==.
      00002F                       1061 _dk::
      00002F                       1062 	.ds 2
                           000031  1063 G$temp_pw$0$0==.
      000031                       1064 _temp_pw::
      000031                       1065 	.ds 2
                           000033  1066 G$angle$0$0==.
      000033                       1067 _angle::
      000033                       1068 	.ds 2
                           000035  1069 LLab_6_New.ReadRanger$dr_data_array$2$168==.
      000035                       1070 _ReadRanger_dr_data_array_2_168:
      000035                       1071 	.ds 2
                           000037  1072 LLab_6_New.ReadCompass$Data$2$171==.
      000037                       1073 _ReadCompass_Data_2_171:
      000037                       1074 	.ds 2
                                   1075 ;--------------------------------------------------------
                                   1076 ; overlayable items in internal ram 
                                   1077 ;--------------------------------------------------------
                                   1078 	.area	OSEG    (OVR,DATA)
                                   1079 	.area	OSEG    (OVR,DATA)
                                   1080 	.area	OSEG    (OVR,DATA)
                                   1081 	.area	OSEG    (OVR,DATA)
                                   1082 	.area	OSEG    (OVR,DATA)
                                   1083 	.area	OSEG    (OVR,DATA)
                                   1084 	.area	OSEG    (OVR,DATA)
                                   1085 	.area	OSEG    (OVR,DATA)
                                   1086 ;--------------------------------------------------------
                                   1087 ; Stack segment in internal ram 
                                   1088 ;--------------------------------------------------------
                                   1089 	.area	SSEG
      000000                       1090 __start__stack:
      000000                       1091 	.ds	1
                                   1092 
                                   1093 ;--------------------------------------------------------
                                   1094 ; indirectly addressable internal ram data
                                   1095 ;--------------------------------------------------------
                                   1096 	.area ISEG    (DATA)
                                   1097 ;--------------------------------------------------------
                                   1098 ; absolute internal ram data
                                   1099 ;--------------------------------------------------------
                                   1100 	.area IABS    (ABS,DATA)
                                   1101 	.area IABS    (ABS,DATA)
                                   1102 ;--------------------------------------------------------
                                   1103 ; bit data
                                   1104 ;--------------------------------------------------------
                                   1105 	.area BSEG    (BIT)
                                   1106 ;--------------------------------------------------------
                                   1107 ; paged external ram data
                                   1108 ;--------------------------------------------------------
                                   1109 	.area PSEG    (PAG,XDATA)
                                   1110 ;--------------------------------------------------------
                                   1111 ; external ram data
                                   1112 ;--------------------------------------------------------
                                   1113 	.area XSEG    (XDATA)
                           000000  1114 LLab_6_New.lcd_print$text$1$81==.
      000000                       1115 _lcd_print_text_1_81:
      000000                       1116 	.ds 80
                                   1117 ;--------------------------------------------------------
                                   1118 ; absolute external ram data
                                   1119 ;--------------------------------------------------------
                                   1120 	.area XABS    (ABS,XDATA)
                                   1121 ;--------------------------------------------------------
                                   1122 ; external initialized ram data
                                   1123 ;--------------------------------------------------------
                                   1124 	.area XISEG   (XDATA)
                                   1125 	.area HOME    (CODE)
                                   1126 	.area GSINIT0 (CODE)
                                   1127 	.area GSINIT1 (CODE)
                                   1128 	.area GSINIT2 (CODE)
                                   1129 	.area GSINIT3 (CODE)
                                   1130 	.area GSINIT4 (CODE)
                                   1131 	.area GSINIT5 (CODE)
                                   1132 	.area GSINIT  (CODE)
                                   1133 	.area GSFINAL (CODE)
                                   1134 	.area CSEG    (CODE)
                                   1135 ;--------------------------------------------------------
                                   1136 ; interrupt vector 
                                   1137 ;--------------------------------------------------------
                                   1138 	.area HOME    (CODE)
      000000                       1139 __interrupt_vect:
      000000 02r00r00         [24] 1140 	ljmp	__sdcc_gsinit_startup
      000003 32               [24] 1141 	reti
      000004                       1142 	.ds	7
      00000B 32               [24] 1143 	reti
      00000C                       1144 	.ds	7
      000013 32               [24] 1145 	reti
      000014                       1146 	.ds	7
      00001B 32               [24] 1147 	reti
      00001C                       1148 	.ds	7
      000023 32               [24] 1149 	reti
      000024                       1150 	.ds	7
      00002B 32               [24] 1151 	reti
      00002C                       1152 	.ds	7
      000033 32               [24] 1153 	reti
      000034                       1154 	.ds	7
      00003B 32               [24] 1155 	reti
      00003C                       1156 	.ds	7
      000043 32               [24] 1157 	reti
      000044                       1158 	.ds	7
      00004B 02r08r99         [24] 1159 	ljmp	_PCA_ISR
                                   1160 ;--------------------------------------------------------
                                   1161 ; global & static initialisations
                                   1162 ;--------------------------------------------------------
                                   1163 	.area HOME    (CODE)
                                   1164 	.area GSINIT  (CODE)
                                   1165 	.area GSFINAL (CODE)
                                   1166 	.area GSINIT  (CODE)
                                   1167 	.globl __sdcc_gsinit_startup
                                   1168 	.globl __sdcc_program_startup
                                   1169 	.globl __start__stack
                                   1170 	.globl __mcs51_genXINIT
                                   1171 	.globl __mcs51_genXRAMCLEAR
                                   1172 	.globl __mcs51_genRAMCLEAR
                           000000  1173 	C$Lab_6_New.c$33$1$204 ==.
                                   1174 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:33: unsigned char dr_input_data[0] = {0x51};	//setting to get range back in cm
      000000 75*14 51         [24] 1175 	mov	_dr_input_data,#0x51
                           000003  1176 	C$Lab_6_New.c$39$1$204 ==.
                                   1177 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:39: unsigned int PW_CENTER = 2765; 				//Steering initialization
      000003 75*19 CD         [24] 1178 	mov	_PW_CENTER,#0xcd
      000006 75*1A 0A         [24] 1179 	mov	(_PW_CENTER + 1),#0x0a
                           000009  1180 	C$Lab_6_New.c$40$1$204 ==.
                                   1181 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:40: unsigned int PW_MAX = 3502;					//
      000009 75*1B AE         [24] 1182 	mov	_PW_MAX,#0xae
      00000C 75*1C 0D         [24] 1183 	mov	(_PW_MAX + 1),#0x0d
                           00000F  1184 	C$Lab_6_New.c$41$1$204 ==.
                                   1185 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:41: unsigned int PW_MIN = 2028;					//
      00000F 75*1D EC         [24] 1186 	mov	_PW_MIN,#0xec
      000012 75*1E 07         [24] 1187 	mov	(_PW_MIN + 1),#0x07
                           000015  1188 	C$Lab_6_New.c$43$1$204 ==.
                                   1189 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:43: unsigned int counts = 0;					//count variables
      000015 E4               [12] 1190 	clr	a
      000016 F5*21            [12] 1191 	mov	_counts,a
      000018 F5*22            [12] 1192 	mov	(_counts + 1),a
                           00001A  1193 	C$Lab_6_New.c$48$1$204 ==.
                                   1194 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:48: unsigned int desired_heading = 0;			//heading desired by user input
      00001A F5*29            [12] 1195 	mov	_desired_heading,a
      00001C F5*2A            [12] 1196 	mov	(_desired_heading + 1),a
                           00001E  1197 	C$Lab_6_New.c$50$1$204 ==.
                                   1198 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:50: signed int pk = 0;							//steering multiplier
      00001E F5*2D            [12] 1199 	mov	_pk,a
      000020 F5*2E            [12] 1200 	mov	(_pk + 1),a
                           000022  1201 	C$Lab_6_New.c$51$1$204 ==.
                                   1202 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:51: signed int dk = 0;
      000022 F5*2F            [12] 1203 	mov	_dk,a
      000024 F5*30            [12] 1204 	mov	(_dk + 1),a
                           000026  1205 	C$Lab_6_New.c$54$1$204 ==.
                                   1206 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:54: signed int angle = 0;
      000026 F5*33            [12] 1207 	mov	_angle,a
      000028 F5*34            [12] 1208 	mov	(_angle + 1),a
                                   1209 	.area GSFINAL (CODE)
      000000 02r00r4E         [24] 1210 	ljmp	__sdcc_program_startup
                                   1211 ;--------------------------------------------------------
                                   1212 ; Home
                                   1213 ;--------------------------------------------------------
                                   1214 	.area HOME    (CODE)
                                   1215 	.area HOME    (CODE)
      00004E                       1216 __sdcc_program_startup:
      00004E 02r05r06         [24] 1217 	ljmp	_main
                                   1218 ;	return from main will return to caller
                                   1219 ;--------------------------------------------------------
                                   1220 ; code
                                   1221 ;--------------------------------------------------------
                                   1222 	.area CSEG    (CODE)
                                   1223 ;------------------------------------------------------------
                                   1224 ;Allocation info for local variables in function 'SYSCLK_Init'
                                   1225 ;------------------------------------------------------------
                                   1226 ;i                         Allocated to registers r6 r7 
                                   1227 ;------------------------------------------------------------
                           000000  1228 	G$SYSCLK_Init$0$0 ==.
                           000000  1229 	C$c8051_SDCC.h$62$0$0 ==.
                                   1230 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:62: void SYSCLK_Init(void)
                                   1231 ;	-----------------------------------------
                                   1232 ;	 function SYSCLK_Init
                                   1233 ;	-----------------------------------------
      000000                       1234 _SYSCLK_Init:
                           000007  1235 	ar7 = 0x07
                           000006  1236 	ar6 = 0x06
                           000005  1237 	ar5 = 0x05
                           000004  1238 	ar4 = 0x04
                           000003  1239 	ar3 = 0x03
                           000002  1240 	ar2 = 0x02
                           000001  1241 	ar1 = 0x01
                           000000  1242 	ar0 = 0x00
                           000000  1243 	C$c8051_SDCC.h$66$1$2 ==.
                                   1244 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:66: OSCXCN = 0x67;                      // start external oscillator with
      000000 75 B1 67         [24] 1245 	mov	_OSCXCN,#0x67
                           000003  1246 	C$c8051_SDCC.h$69$1$2 ==.
                                   1247 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:69: for (i=0; i < 256; i++);            // wait for oscillator to start
      000003 7E 00            [12] 1248 	mov	r6,#0x00
      000005 7F 01            [12] 1249 	mov	r7,#0x01
      000007                       1250 00107$:
      000007 EE               [12] 1251 	mov	a,r6
      000008 24 FF            [12] 1252 	add	a,#0xff
      00000A FC               [12] 1253 	mov	r4,a
      00000B EF               [12] 1254 	mov	a,r7
      00000C 34 FF            [12] 1255 	addc	a,#0xff
      00000E FD               [12] 1256 	mov	r5,a
      00000F 8C 06            [24] 1257 	mov	ar6,r4
      000011 8D 07            [24] 1258 	mov	ar7,r5
      000013 EC               [12] 1259 	mov	a,r4
      000014 4D               [12] 1260 	orl	a,r5
      000015 70 F0            [24] 1261 	jnz	00107$
                           000017  1262 	C$c8051_SDCC.h$71$1$2 ==.
                                   1263 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:71: while (!(OSCXCN & 0x80));           // Wait for crystal osc. to settle
      000017                       1264 00102$:
      000017 E5 B1            [12] 1265 	mov	a,_OSCXCN
      000019 30 E7 FB         [24] 1266 	jnb	acc.7,00102$
                           00001C  1267 	C$c8051_SDCC.h$73$1$2 ==.
                                   1268 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:73: OSCICN = 0x88;                      // select external oscillator as SYSCLK
      00001C 75 B2 88         [24] 1269 	mov	_OSCICN,#0x88
                           00001F  1270 	C$c8051_SDCC.h$76$1$2 ==.
                           00001F  1271 	XG$SYSCLK_Init$0$0 ==.
      00001F 22               [24] 1272 	ret
                                   1273 ;------------------------------------------------------------
                                   1274 ;Allocation info for local variables in function 'UART0_Init'
                                   1275 ;------------------------------------------------------------
                           000020  1276 	G$UART0_Init$0$0 ==.
                           000020  1277 	C$c8051_SDCC.h$84$1$2 ==.
                                   1278 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:84: void UART0_Init(void)
                                   1279 ;	-----------------------------------------
                                   1280 ;	 function UART0_Init
                                   1281 ;	-----------------------------------------
      000020                       1282 _UART0_Init:
                           000020  1283 	C$c8051_SDCC.h$86$1$4 ==.
                                   1284 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:86: SCON0  = 0x50;                      // SCON0: mode 1, 8-bit UART, enable RX
      000020 75 98 50         [24] 1285 	mov	_SCON0,#0x50
                           000023  1286 	C$c8051_SDCC.h$87$1$4 ==.
                                   1287 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:87: TMOD   = 0x20;                      // TMOD: timer 1, mode 2, 8-bit reload
      000023 75 89 20         [24] 1288 	mov	_TMOD,#0x20
                           000026  1289 	C$c8051_SDCC.h$88$1$4 ==.
                                   1290 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:88: TH1    = 0xFF&-(SYSCLK/BAUDRATE/16);     // set Timer1 reload value for baudrate
      000026 75 8D DC         [24] 1291 	mov	_TH1,#0xdc
                           000029  1292 	C$c8051_SDCC.h$89$1$4 ==.
                                   1293 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:89: TR1    = 1;                         // start Timer1
      000029 D2 8E            [12] 1294 	setb	_TR1
                           00002B  1295 	C$c8051_SDCC.h$90$1$4 ==.
                                   1296 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:90: CKCON |= 0x10;                      // Timer1 uses SYSCLK as time base
      00002B 43 8E 10         [24] 1297 	orl	_CKCON,#0x10
                           00002E  1298 	C$c8051_SDCC.h$91$1$4 ==.
                                   1299 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:91: PCON  |= 0x80;                      // SMOD00 = 1 (disable baud rate 
      00002E 43 87 80         [24] 1300 	orl	_PCON,#0x80
                           000031  1301 	C$c8051_SDCC.h$93$1$4 ==.
                                   1302 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:93: TI0    = 1;                         // Indicate TX0 ready
      000031 D2 99            [12] 1303 	setb	_TI0
                           000033  1304 	C$c8051_SDCC.h$94$1$4 ==.
                                   1305 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:94: P0MDOUT |= 0x01;                    // Set TX0 to push/pull
      000033 43 A4 01         [24] 1306 	orl	_P0MDOUT,#0x01
                           000036  1307 	C$c8051_SDCC.h$95$1$4 ==.
                           000036  1308 	XG$UART0_Init$0$0 ==.
      000036 22               [24] 1309 	ret
                                   1310 ;------------------------------------------------------------
                                   1311 ;Allocation info for local variables in function 'Sys_Init'
                                   1312 ;------------------------------------------------------------
                           000037  1313 	G$Sys_Init$0$0 ==.
                           000037  1314 	C$c8051_SDCC.h$103$1$4 ==.
                                   1315 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:103: void Sys_Init(void)
                                   1316 ;	-----------------------------------------
                                   1317 ;	 function Sys_Init
                                   1318 ;	-----------------------------------------
      000037                       1319 _Sys_Init:
                           000037  1320 	C$c8051_SDCC.h$105$1$6 ==.
                                   1321 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:105: WDTCN = 0xde;			// disable watchdog timer
      000037 75 FF DE         [24] 1322 	mov	_WDTCN,#0xde
                           00003A  1323 	C$c8051_SDCC.h$106$1$6 ==.
                                   1324 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:106: WDTCN = 0xad;
      00003A 75 FF AD         [24] 1325 	mov	_WDTCN,#0xad
                           00003D  1326 	C$c8051_SDCC.h$108$1$6 ==.
                                   1327 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:108: SYSCLK_Init();			// initialize oscillator
      00003D 12r00r00         [24] 1328 	lcall	_SYSCLK_Init
                           000040  1329 	C$c8051_SDCC.h$109$1$6 ==.
                                   1330 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:109: UART0_Init();			// initialize UART0
      000040 12r00r20         [24] 1331 	lcall	_UART0_Init
                           000043  1332 	C$c8051_SDCC.h$111$1$6 ==.
                                   1333 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:111: XBR0 |= 0x04;
      000043 43 E1 04         [24] 1334 	orl	_XBR0,#0x04
                           000046  1335 	C$c8051_SDCC.h$112$1$6 ==.
                                   1336 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:112: XBR2 |= 0x40;                    	// Enable crossbar and weak pull-ups
      000046 43 E3 40         [24] 1337 	orl	_XBR2,#0x40
                           000049  1338 	C$c8051_SDCC.h$113$1$6 ==.
                           000049  1339 	XG$Sys_Init$0$0 ==.
      000049 22               [24] 1340 	ret
                                   1341 ;------------------------------------------------------------
                                   1342 ;Allocation info for local variables in function 'putchar'
                                   1343 ;------------------------------------------------------------
                                   1344 ;c                         Allocated to registers r7 
                                   1345 ;------------------------------------------------------------
                           00004A  1346 	G$putchar$0$0 ==.
                           00004A  1347 	C$c8051_SDCC.h$129$1$6 ==.
                                   1348 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:129: void putchar(char c)
                                   1349 ;	-----------------------------------------
                                   1350 ;	 function putchar
                                   1351 ;	-----------------------------------------
      00004A                       1352 _putchar:
      00004A AF 82            [24] 1353 	mov	r7,dpl
                           00004C  1354 	C$c8051_SDCC.h$132$1$8 ==.
                                   1355 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:132: while (!TI0); 
      00004C                       1356 00101$:
                           00004C  1357 	C$c8051_SDCC.h$133$1$8 ==.
                                   1358 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:133: TI0 = 0;
      00004C 10 99 02         [24] 1359 	jbc	_TI0,00112$
      00004F 80 FB            [24] 1360 	sjmp	00101$
      000051                       1361 00112$:
                           000051  1362 	C$c8051_SDCC.h$134$1$8 ==.
                                   1363 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:134: SBUF0 = c;
      000051 8F 99            [24] 1364 	mov	_SBUF0,r7
                           000053  1365 	C$c8051_SDCC.h$135$1$8 ==.
                           000053  1366 	XG$putchar$0$0 ==.
      000053 22               [24] 1367 	ret
                                   1368 ;------------------------------------------------------------
                                   1369 ;Allocation info for local variables in function 'getchar'
                                   1370 ;------------------------------------------------------------
                                   1371 ;c                         Allocated to registers r7 
                                   1372 ;------------------------------------------------------------
                           000054  1373 	G$getchar$0$0 ==.
                           000054  1374 	C$c8051_SDCC.h$154$1$8 ==.
                                   1375 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:154: char getchar(void)
                                   1376 ;	-----------------------------------------
                                   1377 ;	 function getchar
                                   1378 ;	-----------------------------------------
      000054                       1379 _getchar:
                           000054  1380 	C$c8051_SDCC.h$157$1$10 ==.
                                   1381 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:157: while (!RI0);
      000054                       1382 00101$:
                           000054  1383 	C$c8051_SDCC.h$158$1$10 ==.
                                   1384 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:158: RI0 = 0;
      000054 10 98 02         [24] 1385 	jbc	_RI0,00112$
      000057 80 FB            [24] 1386 	sjmp	00101$
      000059                       1387 00112$:
                           000059  1388 	C$c8051_SDCC.h$159$1$10 ==.
                                   1389 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:159: c = SBUF0;
      000059 AF 99            [24] 1390 	mov	r7,_SBUF0
                           00005B  1391 	C$c8051_SDCC.h$160$1$10 ==.
                                   1392 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:160: putchar(c);                          // echo to terminal
      00005B 8F 82            [24] 1393 	mov	dpl,r7
      00005D C0 07            [24] 1394 	push	ar7
      00005F 12r00r4A         [24] 1395 	lcall	_putchar
      000062 D0 07            [24] 1396 	pop	ar7
                           000064  1397 	C$c8051_SDCC.h$161$1$10 ==.
                                   1398 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:161: return c;
      000064 8F 82            [24] 1399 	mov	dpl,r7
                           000066  1400 	C$c8051_SDCC.h$162$1$10 ==.
                           000066  1401 	XG$getchar$0$0 ==.
      000066 22               [24] 1402 	ret
                                   1403 ;------------------------------------------------------------
                                   1404 ;Allocation info for local variables in function 'getchar_nw'
                                   1405 ;------------------------------------------------------------
                                   1406 ;c                         Allocated to registers 
                                   1407 ;------------------------------------------------------------
                           000067  1408 	G$getchar_nw$0$0 ==.
                           000067  1409 	C$c8051_SDCC.h$168$1$10 ==.
                                   1410 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:168: char getchar_nw(void)
                                   1411 ;	-----------------------------------------
                                   1412 ;	 function getchar_nw
                                   1413 ;	-----------------------------------------
      000067                       1414 _getchar_nw:
                           000067  1415 	C$c8051_SDCC.h$171$1$12 ==.
                                   1416 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:171: if (!RI0) return 0xFF;
      000067 20 98 05         [24] 1417 	jb	_RI0,00102$
      00006A 75 82 FF         [24] 1418 	mov	dpl,#0xff
      00006D 80 0B            [24] 1419 	sjmp	00104$
      00006F                       1420 00102$:
                           00006F  1421 	C$c8051_SDCC.h$174$2$13 ==.
                                   1422 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:174: RI0 = 0;
      00006F C2 98            [12] 1423 	clr	_RI0
                           000071  1424 	C$c8051_SDCC.h$175$2$13 ==.
                                   1425 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:175: c = SBUF0;
      000071 85 99 82         [24] 1426 	mov	dpl,_SBUF0
                           000074  1427 	C$c8051_SDCC.h$176$2$13 ==.
                                   1428 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:176: putchar(c);                          // echo to terminal
      000074 12r00r4A         [24] 1429 	lcall	_putchar
                           000077  1430 	C$c8051_SDCC.h$177$2$13 ==.
                                   1431 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:177: return SBUF0;
      000077 85 99 82         [24] 1432 	mov	dpl,_SBUF0
      00007A                       1433 00104$:
                           00007A  1434 	C$c8051_SDCC.h$179$1$12 ==.
                           00007A  1435 	XG$getchar_nw$0$0 ==.
      00007A 22               [24] 1436 	ret
                                   1437 ;------------------------------------------------------------
                                   1438 ;Allocation info for local variables in function 'lcd_print'
                                   1439 ;------------------------------------------------------------
                                   1440 ;fmt                       Allocated to stack - _bp -5
                                   1441 ;len                       Allocated to registers r6 
                                   1442 ;i                         Allocated to registers 
                                   1443 ;ap                        Allocated to registers 
                                   1444 ;text                      Allocated with name '_lcd_print_text_1_81'
                                   1445 ;------------------------------------------------------------
                           00007B  1446 	G$lcd_print$0$0 ==.
                           00007B  1447 	C$i2c.h$84$1$12 ==.
                                   1448 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:84: void lcd_print(const char *fmt, ...)
                                   1449 ;	-----------------------------------------
                                   1450 ;	 function lcd_print
                                   1451 ;	-----------------------------------------
      00007B                       1452 _lcd_print:
      00007B C0*00            [24] 1453 	push	_bp
      00007D 85 81*00         [24] 1454 	mov	_bp,sp
                           000080  1455 	C$i2c.h$90$1$81 ==.
                                   1456 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:90: if ( strlen(fmt) <= 0 ) return;         //If there is no data to print, return
      000080 E5*00            [12] 1457 	mov	a,_bp
      000082 24 FB            [12] 1458 	add	a,#0xfb
      000084 F8               [12] 1459 	mov	r0,a
      000085 86 82            [24] 1460 	mov	dpl,@r0
      000087 08               [12] 1461 	inc	r0
      000088 86 83            [24] 1462 	mov	dph,@r0
      00008A 08               [12] 1463 	inc	r0
      00008B 86 F0            [24] 1464 	mov	b,@r0
      00008D 12r00r00         [24] 1465 	lcall	_strlen
      000090 E5 82            [12] 1466 	mov	a,dpl
      000092 85 83 F0         [24] 1467 	mov	b,dph
      000095 45 F0            [12] 1468 	orl	a,b
      000097 70 02            [24] 1469 	jnz	00102$
      000099 80 62            [24] 1470 	sjmp	00109$
      00009B                       1471 00102$:
                           00009B  1472 	C$i2c.h$92$2$82 ==.
                                   1473 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:92: va_start(ap, fmt);
      00009B E5*00            [12] 1474 	mov	a,_bp
      00009D 24 FB            [12] 1475 	add	a,#0xfb
      00009F FF               [12] 1476 	mov	r7,a
      0000A0 8F*00            [24] 1477 	mov	_vsprintf_PARM_3,r7
                           0000A2  1478 	C$i2c.h$93$1$81 ==.
                                   1479 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:93: vsprintf(text, fmt, ap);
      0000A2 E5*00            [12] 1480 	mov	a,_bp
      0000A4 24 FB            [12] 1481 	add	a,#0xfb
      0000A6 F8               [12] 1482 	mov	r0,a
      0000A7 86*00            [24] 1483 	mov	_vsprintf_PARM_2,@r0
      0000A9 08               [12] 1484 	inc	r0
      0000AA 86*01            [24] 1485 	mov	(_vsprintf_PARM_2 + 1),@r0
      0000AC 08               [12] 1486 	inc	r0
      0000AD 86*02            [24] 1487 	mov	(_vsprintf_PARM_2 + 2),@r0
      0000AF 90r00r00         [24] 1488 	mov	dptr,#_lcd_print_text_1_81
      0000B2 75 F0 00         [24] 1489 	mov	b,#0x00
      0000B5 12r00r00         [24] 1490 	lcall	_vsprintf
                           0000B8  1491 	C$i2c.h$96$1$81 ==.
                                   1492 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:96: len = strlen(text);
      0000B8 90r00r00         [24] 1493 	mov	dptr,#_lcd_print_text_1_81
      0000BB 75 F0 00         [24] 1494 	mov	b,#0x00
      0000BE 12r00r00         [24] 1495 	lcall	_strlen
      0000C1 AE 82            [24] 1496 	mov	r6,dpl
                           0000C3  1497 	C$i2c.h$97$1$81 ==.
                                   1498 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:97: for(i=0; i<len; i++)
      0000C3 7F 00            [12] 1499 	mov	r7,#0x00
      0000C5                       1500 00107$:
      0000C5 C3               [12] 1501 	clr	c
      0000C6 EF               [12] 1502 	mov	a,r7
      0000C7 9E               [12] 1503 	subb	a,r6
      0000C8 50 1F            [24] 1504 	jnc	00105$
                           0000CA  1505 	C$i2c.h$99$2$84 ==.
                                   1506 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:99: if(text[i] == (unsigned char)'\n') text[i] = 13;
      0000CA EF               [12] 1507 	mov	a,r7
      0000CB 24r00            [12] 1508 	add	a,#_lcd_print_text_1_81
      0000CD F5 82            [12] 1509 	mov	dpl,a
      0000CF E4               [12] 1510 	clr	a
      0000D0 34s00            [12] 1511 	addc	a,#(_lcd_print_text_1_81 >> 8)
      0000D2 F5 83            [12] 1512 	mov	dph,a
      0000D4 E0               [24] 1513 	movx	a,@dptr
      0000D5 FD               [12] 1514 	mov	r5,a
      0000D6 BD 0A 0D         [24] 1515 	cjne	r5,#0x0a,00108$
      0000D9 EF               [12] 1516 	mov	a,r7
      0000DA 24r00            [12] 1517 	add	a,#_lcd_print_text_1_81
      0000DC F5 82            [12] 1518 	mov	dpl,a
      0000DE E4               [12] 1519 	clr	a
      0000DF 34s00            [12] 1520 	addc	a,#(_lcd_print_text_1_81 >> 8)
      0000E1 F5 83            [12] 1521 	mov	dph,a
      0000E3 74 0D            [12] 1522 	mov	a,#0x0d
      0000E5 F0               [24] 1523 	movx	@dptr,a
      0000E6                       1524 00108$:
                           0000E6  1525 	C$i2c.h$97$1$81 ==.
                                   1526 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:97: for(i=0; i<len; i++)
      0000E6 0F               [12] 1527 	inc	r7
      0000E7 80 DC            [24] 1528 	sjmp	00107$
      0000E9                       1529 00105$:
                           0000E9  1530 	C$i2c.h$102$1$81 ==.
                                   1531 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:102: i2c_write_data(0xC6, 0x00, text, len);
      0000E9 75*0Br00         [24] 1532 	mov	_i2c_write_data_PARM_3,#_lcd_print_text_1_81
      0000EC 75*0Cs00         [24] 1533 	mov	(_i2c_write_data_PARM_3 + 1),#(_lcd_print_text_1_81 >> 8)
      0000EF 75*0D 00         [24] 1534 	mov	(_i2c_write_data_PARM_3 + 2),#0x00
      0000F2 75*0A 00         [24] 1535 	mov	_i2c_write_data_PARM_2,#0x00
      0000F5 8E*0E            [24] 1536 	mov	_i2c_write_data_PARM_4,r6
      0000F7 75 82 C6         [24] 1537 	mov	dpl,#0xc6
      0000FA 12r03r8C         [24] 1538 	lcall	_i2c_write_data
      0000FD                       1539 00109$:
      0000FD D0*00            [24] 1540 	pop	_bp
                           0000FF  1541 	C$i2c.h$103$1$81 ==.
                           0000FF  1542 	XG$lcd_print$0$0 ==.
      0000FF 22               [24] 1543 	ret
                                   1544 ;------------------------------------------------------------
                                   1545 ;Allocation info for local variables in function 'lcd_clear'
                                   1546 ;------------------------------------------------------------
                                   1547 ;NumBytes                  Allocated with name '_lcd_clear_NumBytes_1_85'
                                   1548 ;Cmd                       Allocated with name '_lcd_clear_Cmd_1_85'
                                   1549 ;------------------------------------------------------------
                           000100  1550 	G$lcd_clear$0$0 ==.
                           000100  1551 	C$i2c.h$106$1$81 ==.
                                   1552 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:106: void lcd_clear()
                                   1553 ;	-----------------------------------------
                                   1554 ;	 function lcd_clear
                                   1555 ;	-----------------------------------------
      000100                       1556 _lcd_clear:
                           000100  1557 	C$i2c.h$108$1$81 ==.
                                   1558 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:108: unsigned char NumBytes=0, Cmd[2];
      000100 75*05 00         [24] 1559 	mov	_lcd_clear_NumBytes_1_85,#0x00
                           000103  1560 	C$i2c.h$110$1$85 ==.
                                   1561 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:110: while(NumBytes < 64) i2c_read_data(0xC6, 0x00, &NumBytes, 1);
      000103                       1562 00101$:
      000103 74 C0            [12] 1563 	mov	a,#0x100 - 0x40
      000105 25*05            [12] 1564 	add	a,_lcd_clear_NumBytes_1_85
      000107 40 17            [24] 1565 	jc	00103$
      000109 75*10r05         [24] 1566 	mov	_i2c_read_data_PARM_3,#_lcd_clear_NumBytes_1_85
      00010C 75*11 00         [24] 1567 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      00010F 75*12 40         [24] 1568 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      000112 75*0F 00         [24] 1569 	mov	_i2c_read_data_PARM_2,#0x00
      000115 75*13 01         [24] 1570 	mov	_i2c_read_data_PARM_4,#0x01
      000118 75 82 C6         [24] 1571 	mov	dpl,#0xc6
      00011B 12r04r06         [24] 1572 	lcall	_i2c_read_data
      00011E 80 E3            [24] 1573 	sjmp	00101$
      000120                       1574 00103$:
                           000120  1575 	C$i2c.h$112$1$85 ==.
                                   1576 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:112: Cmd[0] = 12;
      000120 75*06 0C         [24] 1577 	mov	_lcd_clear_Cmd_1_85,#0x0c
                           000123  1578 	C$i2c.h$113$1$85 ==.
                                   1579 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:113: i2c_write_data(0xC6, 0x00, Cmd, 1);
      000123 75*0Br06         [24] 1580 	mov	_i2c_write_data_PARM_3,#_lcd_clear_Cmd_1_85
      000126 75*0C 00         [24] 1581 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      000129 75*0D 40         [24] 1582 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      00012C 75*0A 00         [24] 1583 	mov	_i2c_write_data_PARM_2,#0x00
      00012F 75*0E 01         [24] 1584 	mov	_i2c_write_data_PARM_4,#0x01
      000132 75 82 C6         [24] 1585 	mov	dpl,#0xc6
      000135 12r03r8C         [24] 1586 	lcall	_i2c_write_data
                           000138  1587 	C$i2c.h$114$1$85 ==.
                           000138  1588 	XG$lcd_clear$0$0 ==.
      000138 22               [24] 1589 	ret
                                   1590 ;------------------------------------------------------------
                                   1591 ;Allocation info for local variables in function 'read_keypad'
                                   1592 ;------------------------------------------------------------
                                   1593 ;i                         Allocated to registers r7 
                                   1594 ;Data                      Allocated with name '_read_keypad_Data_1_86'
                                   1595 ;------------------------------------------------------------
                           000139  1596 	G$read_keypad$0$0 ==.
                           000139  1597 	C$i2c.h$117$1$85 ==.
                                   1598 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:117: char read_keypad()
                                   1599 ;	-----------------------------------------
                                   1600 ;	 function read_keypad
                                   1601 ;	-----------------------------------------
      000139                       1602 _read_keypad:
                           000139  1603 	C$i2c.h$121$1$86 ==.
                                   1604 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:121: i2c_read_data(0xC6, 0x01, Data, 2); //Read I2C data on address 192, register 1, 2 bytes of data.
      000139 75*10r08         [24] 1605 	mov	_i2c_read_data_PARM_3,#_read_keypad_Data_1_86
      00013C 75*11 00         [24] 1606 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      00013F 75*12 40         [24] 1607 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      000142 75*0F 01         [24] 1608 	mov	_i2c_read_data_PARM_2,#0x01
      000145 75*13 02         [24] 1609 	mov	_i2c_read_data_PARM_4,#0x02
      000148 75 82 C6         [24] 1610 	mov	dpl,#0xc6
      00014B 12r04r06         [24] 1611 	lcall	_i2c_read_data
                           00014E  1612 	C$i2c.h$122$1$86 ==.
                                   1613 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:122: if(Data[0] == 0xFF) return 0;   //No response on bus, no display
      00014E 74 FF            [12] 1614 	mov	a,#0xff
      000150 B5*08 05         [24] 1615 	cjne	a,_read_keypad_Data_1_86,00102$
      000153 75 82 00         [24] 1616 	mov	dpl,#0x00
      000156 80 5F            [24] 1617 	sjmp	00116$
      000158                       1618 00102$:
                           000158  1619 	C$i2c.h$124$1$86 ==.
                                   1620 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:124: for(i=0; i<8; i++)              //loop 8 times
      000158 7F 00            [12] 1621 	mov	r7,#0x00
      00015A 8F 06            [24] 1622 	mov	ar6,r7
      00015C                       1623 00114$:
                           00015C  1624 	C$i2c.h$126$2$87 ==.
                                   1625 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:126: if(Data[0] & (0x01 << i))   //find the ASCII value of the keypad read, if it is the current loop value
      00015C 8E F0            [24] 1626 	mov	b,r6
      00015E 05 F0            [12] 1627 	inc	b
      000160 7C 01            [12] 1628 	mov	r4,#0x01
      000162 7D 00            [12] 1629 	mov	r5,#0x00
      000164 80 06            [24] 1630 	sjmp	00145$
      000166                       1631 00144$:
      000166 EC               [12] 1632 	mov	a,r4
      000167 2C               [12] 1633 	add	a,r4
      000168 FC               [12] 1634 	mov	r4,a
      000169 ED               [12] 1635 	mov	a,r5
      00016A 33               [12] 1636 	rlc	a
      00016B FD               [12] 1637 	mov	r5,a
      00016C                       1638 00145$:
      00016C D5 F0 F7         [24] 1639 	djnz	b,00144$
      00016F AA*08            [24] 1640 	mov	r2,_read_keypad_Data_1_86
      000171 7B 00            [12] 1641 	mov	r3,#0x00
      000173 EA               [12] 1642 	mov	a,r2
      000174 52 04            [12] 1643 	anl	ar4,a
      000176 EB               [12] 1644 	mov	a,r3
      000177 52 05            [12] 1645 	anl	ar5,a
      000179 EC               [12] 1646 	mov	a,r4
      00017A 4D               [12] 1647 	orl	a,r5
      00017B 60 07            [24] 1648 	jz	00115$
                           00017D  1649 	C$i2c.h$127$2$87 ==.
                                   1650 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:127: return i+49;
      00017D 74 31            [12] 1651 	mov	a,#0x31
      00017F 2F               [12] 1652 	add	a,r7
      000180 F5 82            [12] 1653 	mov	dpl,a
      000182 80 33            [24] 1654 	sjmp	00116$
      000184                       1655 00115$:
                           000184  1656 	C$i2c.h$124$1$86 ==.
                                   1657 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:124: for(i=0; i<8; i++)              //loop 8 times
      000184 0E               [12] 1658 	inc	r6
      000185 8E 07            [24] 1659 	mov	ar7,r6
      000187 BE 08 00         [24] 1660 	cjne	r6,#0x08,00147$
      00018A                       1661 00147$:
      00018A 40 D0            [24] 1662 	jc	00114$
                           00018C  1663 	C$i2c.h$130$1$86 ==.
                                   1664 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:130: if(Data[1] & 0x01) return '9';  //if the value is equal to 9 return 9.
      00018C E5*09            [12] 1665 	mov	a,(_read_keypad_Data_1_86 + 0x0001)
      00018E 30 E0 05         [24] 1666 	jnb	acc.0,00107$
      000191 75 82 39         [24] 1667 	mov	dpl,#0x39
      000194 80 21            [24] 1668 	sjmp	00116$
      000196                       1669 00107$:
                           000196  1670 	C$i2c.h$132$1$86 ==.
                                   1671 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:132: if(Data[1] & 0x02) return '*';  //if the value is equal to the star.
      000196 E5*09            [12] 1672 	mov	a,(_read_keypad_Data_1_86 + 0x0001)
      000198 30 E1 05         [24] 1673 	jnb	acc.1,00109$
      00019B 75 82 2A         [24] 1674 	mov	dpl,#0x2a
      00019E 80 17            [24] 1675 	sjmp	00116$
      0001A0                       1676 00109$:
                           0001A0  1677 	C$i2c.h$134$1$86 ==.
                                   1678 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:134: if(Data[1] & 0x04) return '0';  //if the value is equal to the 0 key
      0001A0 E5*09            [12] 1679 	mov	a,(_read_keypad_Data_1_86 + 0x0001)
      0001A2 30 E2 05         [24] 1680 	jnb	acc.2,00111$
      0001A5 75 82 30         [24] 1681 	mov	dpl,#0x30
      0001A8 80 0D            [24] 1682 	sjmp	00116$
      0001AA                       1683 00111$:
                           0001AA  1684 	C$i2c.h$136$1$86 ==.
                                   1685 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:136: if(Data[1] & 0x08) return '#';  //if the value is equal to the pound key
      0001AA E5*09            [12] 1686 	mov	a,(_read_keypad_Data_1_86 + 0x0001)
      0001AC 30 E3 05         [24] 1687 	jnb	acc.3,00113$
      0001AF 75 82 23         [24] 1688 	mov	dpl,#0x23
      0001B2 80 03            [24] 1689 	sjmp	00116$
      0001B4                       1690 00113$:
                           0001B4  1691 	C$i2c.h$138$1$86 ==.
                                   1692 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:138: return 0xFF;                    //else return a numerical -1 (0xFF)
      0001B4 75 82 FF         [24] 1693 	mov	dpl,#0xff
      0001B7                       1694 00116$:
                           0001B7  1695 	C$i2c.h$139$1$86 ==.
                           0001B7  1696 	XG$read_keypad$0$0 ==.
      0001B7 22               [24] 1697 	ret
                                   1698 ;------------------------------------------------------------
                                   1699 ;Allocation info for local variables in function 'kpd_input'
                                   1700 ;------------------------------------------------------------
                                   1701 ;mode                      Allocated to registers r7 
                                   1702 ;sum                       Allocated to registers r5 r6 
                                   1703 ;key                       Allocated to registers r3 
                                   1704 ;i                         Allocated to registers 
                                   1705 ;------------------------------------------------------------
                           0001B8  1706 	G$kpd_input$0$0 ==.
                           0001B8  1707 	C$i2c.h$151$1$86 ==.
                                   1708 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:151: unsigned int kpd_input(char mode)
                                   1709 ;	-----------------------------------------
                                   1710 ;	 function kpd_input
                                   1711 ;	-----------------------------------------
      0001B8                       1712 _kpd_input:
      0001B8 AF 82            [24] 1713 	mov	r7,dpl
                           0001BA  1714 	C$i2c.h$156$1$89 ==.
                                   1715 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:156: sum = 0;
                           0001BA  1716 	C$i2c.h$159$1$89 ==.
                                   1717 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:159: if(mode==0)lcd_print("\nType digits; end w/#");
      0001BA E4               [12] 1718 	clr	a
      0001BB FD               [12] 1719 	mov	r5,a
      0001BC FE               [12] 1720 	mov	r6,a
      0001BD EF               [12] 1721 	mov	a,r7
      0001BE 70 1D            [24] 1722 	jnz	00102$
      0001C0 C0 06            [24] 1723 	push	ar6
      0001C2 C0 05            [24] 1724 	push	ar5
      0001C4 74r00            [12] 1725 	mov	a,#___str_0
      0001C6 C0 E0            [24] 1726 	push	acc
      0001C8 74s00            [12] 1727 	mov	a,#(___str_0 >> 8)
      0001CA C0 E0            [24] 1728 	push	acc
      0001CC 74 80            [12] 1729 	mov	a,#0x80
      0001CE C0 E0            [24] 1730 	push	acc
      0001D0 12r00r7B         [24] 1731 	lcall	_lcd_print
      0001D3 15 81            [12] 1732 	dec	sp
      0001D5 15 81            [12] 1733 	dec	sp
      0001D7 15 81            [12] 1734 	dec	sp
      0001D9 D0 05            [24] 1735 	pop	ar5
      0001DB D0 06            [24] 1736 	pop	ar6
      0001DD                       1737 00102$:
                           0001DD  1738 	C$i2c.h$161$1$89 ==.
                                   1739 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:161: lcd_print("     %c%c%c%c%c",0x08,0x08,0x08,0x08,0x08);
      0001DD C0 06            [24] 1740 	push	ar6
      0001DF C0 05            [24] 1741 	push	ar5
      0001E1 74 08            [12] 1742 	mov	a,#0x08
      0001E3 C0 E0            [24] 1743 	push	acc
      0001E5 E4               [12] 1744 	clr	a
      0001E6 C0 E0            [24] 1745 	push	acc
      0001E8 74 08            [12] 1746 	mov	a,#0x08
      0001EA C0 E0            [24] 1747 	push	acc
      0001EC E4               [12] 1748 	clr	a
      0001ED C0 E0            [24] 1749 	push	acc
      0001EF 74 08            [12] 1750 	mov	a,#0x08
      0001F1 C0 E0            [24] 1751 	push	acc
      0001F3 E4               [12] 1752 	clr	a
      0001F4 C0 E0            [24] 1753 	push	acc
      0001F6 74 08            [12] 1754 	mov	a,#0x08
      0001F8 C0 E0            [24] 1755 	push	acc
      0001FA E4               [12] 1756 	clr	a
      0001FB C0 E0            [24] 1757 	push	acc
      0001FD 74 08            [12] 1758 	mov	a,#0x08
      0001FF C0 E0            [24] 1759 	push	acc
      000201 E4               [12] 1760 	clr	a
      000202 C0 E0            [24] 1761 	push	acc
      000204 74r16            [12] 1762 	mov	a,#___str_1
      000206 C0 E0            [24] 1763 	push	acc
      000208 74s00            [12] 1764 	mov	a,#(___str_1 >> 8)
      00020A C0 E0            [24] 1765 	push	acc
      00020C 74 80            [12] 1766 	mov	a,#0x80
      00020E C0 E0            [24] 1767 	push	acc
      000210 12r00r7B         [24] 1768 	lcall	_lcd_print
      000213 E5 81            [12] 1769 	mov	a,sp
      000215 24 F3            [12] 1770 	add	a,#0xf3
      000217 F5 81            [12] 1771 	mov	sp,a
                           000219  1772 	C$i2c.h$163$1$89 ==.
                                   1773 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:163: delay_time(500000);             //Add 20ms delay before reading i2c in loop
      000219 90 A1 20         [24] 1774 	mov	dptr,#0xa120
      00021C 75 F0 07         [24] 1775 	mov	b,#0x07
      00021F E4               [12] 1776 	clr	a
      000220 12r03r27         [24] 1777 	lcall	_delay_time
      000223 D0 05            [24] 1778 	pop	ar5
      000225 D0 06            [24] 1779 	pop	ar6
                           000227  1780 	C$i2c.h$167$1$89 ==.
                                   1781 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:167: for(i=0; i<5; i++)
      000227 7F 00            [12] 1782 	mov	r7,#0x00
                           000229  1783 	C$i2c.h$169$3$92 ==.
                                   1784 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:169: while(((key=read_keypad()) == 0xFF) || (key == '*'))delay_time(10000);
      000229                       1785 00104$:
      000229 C0 07            [24] 1786 	push	ar7
      00022B C0 06            [24] 1787 	push	ar6
      00022D C0 05            [24] 1788 	push	ar5
      00022F 12r01r39         [24] 1789 	lcall	_read_keypad
      000232 AC 82            [24] 1790 	mov	r4,dpl
      000234 D0 05            [24] 1791 	pop	ar5
      000236 D0 06            [24] 1792 	pop	ar6
      000238 D0 07            [24] 1793 	pop	ar7
      00023A 8C 03            [24] 1794 	mov	ar3,r4
      00023C BC FF 02         [24] 1795 	cjne	r4,#0xff,00146$
      00023F 80 03            [24] 1796 	sjmp	00105$
      000241                       1797 00146$:
      000241 BB 2A 17         [24] 1798 	cjne	r3,#0x2a,00106$
      000244                       1799 00105$:
      000244 90 27 10         [24] 1800 	mov	dptr,#0x2710
      000247 E4               [12] 1801 	clr	a
      000248 F5 F0            [12] 1802 	mov	b,a
      00024A C0 07            [24] 1803 	push	ar7
      00024C C0 06            [24] 1804 	push	ar6
      00024E C0 05            [24] 1805 	push	ar5
      000250 12r03r27         [24] 1806 	lcall	_delay_time
      000253 D0 05            [24] 1807 	pop	ar5
      000255 D0 06            [24] 1808 	pop	ar6
      000257 D0 07            [24] 1809 	pop	ar7
      000259 80 CE            [24] 1810 	sjmp	00104$
      00025B                       1811 00106$:
                           00025B  1812 	C$i2c.h$170$2$90 ==.
                                   1813 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:170: if(key == '#')
      00025B BB 23 2A         [24] 1814 	cjne	r3,#0x23,00114$
                           00025E  1815 	C$i2c.h$172$3$91 ==.
                                   1816 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:172: while(read_keypad() == '#')delay_time(10000);
      00025E                       1817 00107$:
      00025E C0 06            [24] 1818 	push	ar6
      000260 C0 05            [24] 1819 	push	ar5
      000262 12r01r39         [24] 1820 	lcall	_read_keypad
      000265 AC 82            [24] 1821 	mov	r4,dpl
      000267 D0 05            [24] 1822 	pop	ar5
      000269 D0 06            [24] 1823 	pop	ar6
      00026B BC 23 13         [24] 1824 	cjne	r4,#0x23,00109$
      00026E 90 27 10         [24] 1825 	mov	dptr,#0x2710
      000271 E4               [12] 1826 	clr	a
      000272 F5 F0            [12] 1827 	mov	b,a
      000274 C0 06            [24] 1828 	push	ar6
      000276 C0 05            [24] 1829 	push	ar5
      000278 12r03r27         [24] 1830 	lcall	_delay_time
      00027B D0 05            [24] 1831 	pop	ar5
      00027D D0 06            [24] 1832 	pop	ar6
      00027F 80 DD            [24] 1833 	sjmp	00107$
      000281                       1834 00109$:
                           000281  1835 	C$i2c.h$173$3$91 ==.
                                   1836 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:173: return sum;
      000281 8D 82            [24] 1837 	mov	dpl,r5
      000283 8E 83            [24] 1838 	mov	dph,r6
      000285 02r03r26         [24] 1839 	ljmp	00119$
      000288                       1840 00114$:
                           000288  1841 	C$i2c.h$177$3$92 ==.
                                   1842 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:177: lcd_print("%c", key);
      000288 8B 02            [24] 1843 	mov	ar2,r3
      00028A 7C 00            [12] 1844 	mov	r4,#0x00
      00028C C0 07            [24] 1845 	push	ar7
      00028E C0 06            [24] 1846 	push	ar6
      000290 C0 05            [24] 1847 	push	ar5
      000292 C0 04            [24] 1848 	push	ar4
      000294 C0 03            [24] 1849 	push	ar3
      000296 C0 02            [24] 1850 	push	ar2
      000298 C0 02            [24] 1851 	push	ar2
      00029A C0 04            [24] 1852 	push	ar4
      00029C 74r26            [12] 1853 	mov	a,#___str_2
      00029E C0 E0            [24] 1854 	push	acc
      0002A0 74s00            [12] 1855 	mov	a,#(___str_2 >> 8)
      0002A2 C0 E0            [24] 1856 	push	acc
      0002A4 74 80            [12] 1857 	mov	a,#0x80
      0002A6 C0 E0            [24] 1858 	push	acc
      0002A8 12r00r7B         [24] 1859 	lcall	_lcd_print
      0002AB E5 81            [12] 1860 	mov	a,sp
      0002AD 24 FB            [12] 1861 	add	a,#0xfb
      0002AF F5 81            [12] 1862 	mov	sp,a
      0002B1 D0 02            [24] 1863 	pop	ar2
      0002B3 D0 03            [24] 1864 	pop	ar3
      0002B5 D0 04            [24] 1865 	pop	ar4
      0002B7 D0 05            [24] 1866 	pop	ar5
      0002B9 D0 06            [24] 1867 	pop	ar6
                           0002BB  1868 	C$i2c.h$178$1$89 ==.
                                   1869 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:178: sum = sum*10 + key - '0';
      0002BB 8D*00            [24] 1870 	mov	__mulint_PARM_2,r5
      0002BD 8E*01            [24] 1871 	mov	(__mulint_PARM_2 + 1),r6
      0002BF 90 00 0A         [24] 1872 	mov	dptr,#0x000a
      0002C2 C0 04            [24] 1873 	push	ar4
      0002C4 C0 03            [24] 1874 	push	ar3
      0002C6 C0 02            [24] 1875 	push	ar2
      0002C8 12r00r00         [24] 1876 	lcall	__mulint
      0002CB A8 82            [24] 1877 	mov	r0,dpl
      0002CD A9 83            [24] 1878 	mov	r1,dph
      0002CF D0 02            [24] 1879 	pop	ar2
      0002D1 D0 03            [24] 1880 	pop	ar3
      0002D3 D0 04            [24] 1881 	pop	ar4
      0002D5 D0 07            [24] 1882 	pop	ar7
      0002D7 EA               [12] 1883 	mov	a,r2
      0002D8 28               [12] 1884 	add	a,r0
      0002D9 F8               [12] 1885 	mov	r0,a
      0002DA EC               [12] 1886 	mov	a,r4
      0002DB 39               [12] 1887 	addc	a,r1
      0002DC F9               [12] 1888 	mov	r1,a
      0002DD E8               [12] 1889 	mov	a,r0
      0002DE 24 D0            [12] 1890 	add	a,#0xd0
      0002E0 FD               [12] 1891 	mov	r5,a
      0002E1 E9               [12] 1892 	mov	a,r1
      0002E2 34 FF            [12] 1893 	addc	a,#0xff
      0002E4 FE               [12] 1894 	mov	r6,a
                           0002E5  1895 	C$i2c.h$179$3$92 ==.
                                   1896 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:179: while(read_keypad() == key)delay_time(10000); //wait for key to be released
      0002E5                       1897 00110$:
      0002E5 C0 07            [24] 1898 	push	ar7
      0002E7 C0 06            [24] 1899 	push	ar6
      0002E9 C0 05            [24] 1900 	push	ar5
      0002EB C0 03            [24] 1901 	push	ar3
      0002ED 12r01r39         [24] 1902 	lcall	_read_keypad
      0002F0 AC 82            [24] 1903 	mov	r4,dpl
      0002F2 D0 03            [24] 1904 	pop	ar3
      0002F4 D0 05            [24] 1905 	pop	ar5
      0002F6 D0 06            [24] 1906 	pop	ar6
      0002F8 D0 07            [24] 1907 	pop	ar7
      0002FA EC               [12] 1908 	mov	a,r4
      0002FB B5 03 1B         [24] 1909 	cjne	a,ar3,00118$
      0002FE 90 27 10         [24] 1910 	mov	dptr,#0x2710
      000301 E4               [12] 1911 	clr	a
      000302 F5 F0            [12] 1912 	mov	b,a
      000304 C0 07            [24] 1913 	push	ar7
      000306 C0 06            [24] 1914 	push	ar6
      000308 C0 05            [24] 1915 	push	ar5
      00030A C0 03            [24] 1916 	push	ar3
      00030C 12r03r27         [24] 1917 	lcall	_delay_time
      00030F D0 03            [24] 1918 	pop	ar3
      000311 D0 05            [24] 1919 	pop	ar5
      000313 D0 06            [24] 1920 	pop	ar6
      000315 D0 07            [24] 1921 	pop	ar7
      000317 80 CC            [24] 1922 	sjmp	00110$
      000319                       1923 00118$:
                           000319  1924 	C$i2c.h$167$1$89 ==.
                                   1925 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:167: for(i=0; i<5; i++)
      000319 0F               [12] 1926 	inc	r7
      00031A BF 05 00         [24] 1927 	cjne	r7,#0x05,00155$
      00031D                       1928 00155$:
      00031D 50 03            [24] 1929 	jnc	00156$
      00031F 02r02r29         [24] 1930 	ljmp	00104$
      000322                       1931 00156$:
                           000322  1932 	C$i2c.h$182$1$89 ==.
                                   1933 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:182: return sum;
      000322 8D 82            [24] 1934 	mov	dpl,r5
      000324 8E 83            [24] 1935 	mov	dph,r6
      000326                       1936 00119$:
                           000326  1937 	C$i2c.h$183$1$89 ==.
                           000326  1938 	XG$kpd_input$0$0 ==.
      000326 22               [24] 1939 	ret
                                   1940 ;------------------------------------------------------------
                                   1941 ;Allocation info for local variables in function 'delay_time'
                                   1942 ;------------------------------------------------------------
                                   1943 ;time_end                  Allocated to registers r4 r5 r6 r7 
                                   1944 ;index                     Allocated to registers 
                                   1945 ;------------------------------------------------------------
                           000327  1946 	G$delay_time$0$0 ==.
                           000327  1947 	C$i2c.h$192$1$89 ==.
                                   1948 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:192: void delay_time (unsigned long time_end)
                                   1949 ;	-----------------------------------------
                                   1950 ;	 function delay_time
                                   1951 ;	-----------------------------------------
      000327                       1952 _delay_time:
      000327 AC 82            [24] 1953 	mov	r4,dpl
      000329 AD 83            [24] 1954 	mov	r5,dph
      00032B AE F0            [24] 1955 	mov	r6,b
      00032D FF               [12] 1956 	mov	r7,a
                           00032E  1957 	C$i2c.h$196$1$94 ==.
                                   1958 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:196: for (index = 0; index < time_end; index++); //for loop delay
      00032E 78 00            [12] 1959 	mov	r0,#0x00
      000330 79 00            [12] 1960 	mov	r1,#0x00
      000332 7A 00            [12] 1961 	mov	r2,#0x00
      000334 7B 00            [12] 1962 	mov	r3,#0x00
      000336                       1963 00103$:
      000336 C3               [12] 1964 	clr	c
      000337 E8               [12] 1965 	mov	a,r0
      000338 9C               [12] 1966 	subb	a,r4
      000339 E9               [12] 1967 	mov	a,r1
      00033A 9D               [12] 1968 	subb	a,r5
      00033B EA               [12] 1969 	mov	a,r2
      00033C 9E               [12] 1970 	subb	a,r6
      00033D EB               [12] 1971 	mov	a,r3
      00033E 9F               [12] 1972 	subb	a,r7
      00033F 50 0F            [24] 1973 	jnc	00105$
      000341 08               [12] 1974 	inc	r0
      000342 B8 00 09         [24] 1975 	cjne	r0,#0x00,00115$
      000345 09               [12] 1976 	inc	r1
      000346 B9 00 05         [24] 1977 	cjne	r1,#0x00,00115$
      000349 0A               [12] 1978 	inc	r2
      00034A BA 00 E9         [24] 1979 	cjne	r2,#0x00,00103$
      00034D 0B               [12] 1980 	inc	r3
      00034E                       1981 00115$:
      00034E 80 E6            [24] 1982 	sjmp	00103$
      000350                       1983 00105$:
                           000350  1984 	C$i2c.h$197$1$94 ==.
                           000350  1985 	XG$delay_time$0$0 ==.
      000350 22               [24] 1986 	ret
                                   1987 ;------------------------------------------------------------
                                   1988 ;Allocation info for local variables in function 'i2c_start'
                                   1989 ;------------------------------------------------------------
                           000351  1990 	G$i2c_start$0$0 ==.
                           000351  1991 	C$i2c.h$200$1$94 ==.
                                   1992 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:200: void i2c_start(void)
                                   1993 ;	-----------------------------------------
                                   1994 ;	 function i2c_start
                                   1995 ;	-----------------------------------------
      000351                       1996 _i2c_start:
                           000351  1997 	C$i2c.h$202$1$96 ==.
                                   1998 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:202: while(BUSY);                //Wait until SMBus0 is free
      000351                       1999 00101$:
      000351 20 C7 FD         [24] 2000 	jb	_BUSY,00101$
                           000354  2001 	C$i2c.h$203$1$96 ==.
                                   2002 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:203: STA = 1;                    //Set Start Bit
      000354 D2 C5            [12] 2003 	setb	_STA
                           000356  2004 	C$i2c.h$204$1$96 ==.
                                   2005 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:204: while(!SI);                 //Wait until start sent
      000356                       2006 00104$:
      000356 30 C3 FD         [24] 2007 	jnb	_SI,00104$
                           000359  2008 	C$i2c.h$205$1$96 ==.
                                   2009 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:205: STA = 0;                    //Clear start bit
      000359 C2 C5            [12] 2010 	clr	_STA
                           00035B  2011 	C$i2c.h$206$1$96 ==.
                                   2012 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:206: SI = 0;                     //Clear SI
      00035B C2 C3            [12] 2013 	clr	_SI
                           00035D  2014 	C$i2c.h$207$1$96 ==.
                           00035D  2015 	XG$i2c_start$0$0 ==.
      00035D 22               [24] 2016 	ret
                                   2017 ;------------------------------------------------------------
                                   2018 ;Allocation info for local variables in function 'i2c_write'
                                   2019 ;------------------------------------------------------------
                                   2020 ;output_data               Allocated to registers 
                                   2021 ;------------------------------------------------------------
                           00035E  2022 	G$i2c_write$0$0 ==.
                           00035E  2023 	C$i2c.h$210$1$96 ==.
                                   2024 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:210: void i2c_write(unsigned char output_data)
                                   2025 ;	-----------------------------------------
                                   2026 ;	 function i2c_write
                                   2027 ;	-----------------------------------------
      00035E                       2028 _i2c_write:
      00035E 85 82 C2         [24] 2029 	mov	_SMB0DAT,dpl
                           000361  2030 	C$i2c.h$213$1$98 ==.
                                   2031 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:213: while(!SI);                 //Wait until send is complete
      000361                       2032 00101$:
                           000361  2033 	C$i2c.h$214$1$98 ==.
                                   2034 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:214: SI = 0;                     //Clear SI
      000361 10 C3 02         [24] 2035 	jbc	_SI,00112$
      000364 80 FB            [24] 2036 	sjmp	00101$
      000366                       2037 00112$:
                           000366  2038 	C$i2c.h$215$1$98 ==.
                           000366  2039 	XG$i2c_write$0$0 ==.
      000366 22               [24] 2040 	ret
                                   2041 ;------------------------------------------------------------
                                   2042 ;Allocation info for local variables in function 'i2c_write_and_stop'
                                   2043 ;------------------------------------------------------------
                                   2044 ;output_data               Allocated to registers 
                                   2045 ;------------------------------------------------------------
                           000367  2046 	G$i2c_write_and_stop$0$0 ==.
                           000367  2047 	C$i2c.h$218$1$98 ==.
                                   2048 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:218: void i2c_write_and_stop(unsigned char output_data)
                                   2049 ;	-----------------------------------------
                                   2050 ;	 function i2c_write_and_stop
                                   2051 ;	-----------------------------------------
      000367                       2052 _i2c_write_and_stop:
      000367 85 82 C2         [24] 2053 	mov	_SMB0DAT,dpl
                           00036A  2054 	C$i2c.h$221$1$100 ==.
                                   2055 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:221: STO = 1;                    //Set stop bit
      00036A D2 C4            [12] 2056 	setb	_STO
                           00036C  2057 	C$i2c.h$222$1$100 ==.
                                   2058 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:222: while(!SI);                 //Wait until send is complete
      00036C                       2059 00101$:
                           00036C  2060 	C$i2c.h$223$1$100 ==.
                                   2061 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:223: SI = 0;                     //Clear SI
      00036C 10 C3 02         [24] 2062 	jbc	_SI,00112$
      00036F 80 FB            [24] 2063 	sjmp	00101$
      000371                       2064 00112$:
                           000371  2065 	C$i2c.h$224$1$100 ==.
                           000371  2066 	XG$i2c_write_and_stop$0$0 ==.
      000371 22               [24] 2067 	ret
                                   2068 ;------------------------------------------------------------
                                   2069 ;Allocation info for local variables in function 'i2c_read'
                                   2070 ;------------------------------------------------------------
                                   2071 ;input_data                Allocated to registers 
                                   2072 ;------------------------------------------------------------
                           000372  2073 	G$i2c_read$0$0 ==.
                           000372  2074 	C$i2c.h$227$1$100 ==.
                                   2075 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:227: unsigned char i2c_read(void)
                                   2076 ;	-----------------------------------------
                                   2077 ;	 function i2c_read
                                   2078 ;	-----------------------------------------
      000372                       2079 _i2c_read:
                           000372  2080 	C$i2c.h$231$1$102 ==.
                                   2081 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:231: while(!SI);                 //Wait until we have data to read
      000372                       2082 00101$:
      000372 30 C3 FD         [24] 2083 	jnb	_SI,00101$
                           000375  2084 	C$i2c.h$232$1$102 ==.
                                   2085 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:232: input_data = SMB0DAT;       //Read the data
      000375 85 C2 82         [24] 2086 	mov	dpl,_SMB0DAT
                           000378  2087 	C$i2c.h$233$1$102 ==.
                                   2088 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:233: SI = 0;                     //Clear SI
      000378 C2 C3            [12] 2089 	clr	_SI
                           00037A  2090 	C$i2c.h$234$1$102 ==.
                                   2091 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:234: return input_data;          //Return the read data
                           00037A  2092 	C$i2c.h$235$1$102 ==.
                           00037A  2093 	XG$i2c_read$0$0 ==.
      00037A 22               [24] 2094 	ret
                                   2095 ;------------------------------------------------------------
                                   2096 ;Allocation info for local variables in function 'i2c_read_and_stop'
                                   2097 ;------------------------------------------------------------
                                   2098 ;input_data                Allocated to registers r7 
                                   2099 ;------------------------------------------------------------
                           00037B  2100 	G$i2c_read_and_stop$0$0 ==.
                           00037B  2101 	C$i2c.h$238$1$102 ==.
                                   2102 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:238: unsigned char i2c_read_and_stop(void)
                                   2103 ;	-----------------------------------------
                                   2104 ;	 function i2c_read_and_stop
                                   2105 ;	-----------------------------------------
      00037B                       2106 _i2c_read_and_stop:
                           00037B  2107 	C$i2c.h$242$1$104 ==.
                                   2108 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:242: while(!SI);                 //Wait until we have data to read
      00037B                       2109 00101$:
      00037B 30 C3 FD         [24] 2110 	jnb	_SI,00101$
                           00037E  2111 	C$i2c.h$243$1$104 ==.
                                   2112 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:243: input_data = SMB0DAT;       //Read the data
      00037E AF C2            [24] 2113 	mov	r7,_SMB0DAT
                           000380  2114 	C$i2c.h$244$1$104 ==.
                                   2115 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:244: SI = 0;                     //Clear SI
      000380 C2 C3            [12] 2116 	clr	_SI
                           000382  2117 	C$i2c.h$245$1$104 ==.
                                   2118 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:245: STO = 1;                    //Set stop bit
      000382 D2 C4            [12] 2119 	setb	_STO
                           000384  2120 	C$i2c.h$246$1$104 ==.
                                   2121 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:246: while(!SI);                 //Wait for stop
      000384                       2122 00104$:
                           000384  2123 	C$i2c.h$247$1$104 ==.
                                   2124 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:247: SI = 0;
      000384 10 C3 02         [24] 2125 	jbc	_SI,00122$
      000387 80 FB            [24] 2126 	sjmp	00104$
      000389                       2127 00122$:
                           000389  2128 	C$i2c.h$248$1$104 ==.
                                   2129 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:248: return input_data;          //Return the read data
      000389 8F 82            [24] 2130 	mov	dpl,r7
                           00038B  2131 	C$i2c.h$249$1$104 ==.
                           00038B  2132 	XG$i2c_read_and_stop$0$0 ==.
      00038B 22               [24] 2133 	ret
                                   2134 ;------------------------------------------------------------
                                   2135 ;Allocation info for local variables in function 'i2c_write_data'
                                   2136 ;------------------------------------------------------------
                                   2137 ;start_reg                 Allocated with name '_i2c_write_data_PARM_2'
                                   2138 ;buffer                    Allocated with name '_i2c_write_data_PARM_3'
                                   2139 ;num_bytes                 Allocated with name '_i2c_write_data_PARM_4'
                                   2140 ;addr                      Allocated to registers r7 
                                   2141 ;i                         Allocated to registers 
                                   2142 ;------------------------------------------------------------
                           00038C  2143 	G$i2c_write_data$0$0 ==.
                           00038C  2144 	C$i2c.h$252$1$104 ==.
                                   2145 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:252: void i2c_write_data(unsigned char addr, unsigned char start_reg, unsigned char *buffer, unsigned char num_bytes)
                                   2146 ;	-----------------------------------------
                                   2147 ;	 function i2c_write_data
                                   2148 ;	-----------------------------------------
      00038C                       2149 _i2c_write_data:
      00038C AF 82            [24] 2150 	mov	r7,dpl
                           00038E  2151 	C$i2c.h$256$1$106 ==.
                                   2152 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:256: EA = 0;                     //Don't allow interrupts during I2C work
      00038E C2 AF            [12] 2153 	clr	_EA
                           000390  2154 	C$i2c.h$257$1$106 ==.
                                   2155 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:257: i2c_start();                //Initiate I2C transfer
      000390 C0 07            [24] 2156 	push	ar7
      000392 12r03r51         [24] 2157 	lcall	_i2c_start
      000395 D0 07            [24] 2158 	pop	ar7
                           000397  2159 	C$i2c.h$258$1$106 ==.
                                   2160 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:258: i2c_write(addr & ~0x01);    //Write the desired address to the bus
      000397 74 FE            [12] 2161 	mov	a,#0xfe
      000399 5F               [12] 2162 	anl	a,r7
      00039A F5 82            [12] 2163 	mov	dpl,a
      00039C 12r03r5E         [24] 2164 	lcall	_i2c_write
                           00039F  2165 	C$i2c.h$259$1$106 ==.
                                   2166 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:259: i2c_write(start_reg);       //Write the start register to the bus
      00039F 85*0A 82         [24] 2167 	mov	dpl,_i2c_write_data_PARM_2
      0003A2 12r03r5E         [24] 2168 	lcall	_i2c_write
                           0003A5  2169 	C$i2c.h$260$1$106 ==.
                                   2170 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:260: for(i=0; i<num_bytes-1; i++) //Write the data to the register(s)
      0003A5 7F 00            [12] 2171 	mov	r7,#0x00
      0003A7                       2172 00103$:
      0003A7 AD*0E            [24] 2173 	mov	r5,_i2c_write_data_PARM_4
      0003A9 7E 00            [12] 2174 	mov	r6,#0x00
      0003AB 1D               [12] 2175 	dec	r5
      0003AC BD FF 01         [24] 2176 	cjne	r5,#0xff,00114$
      0003AF 1E               [12] 2177 	dec	r6
      0003B0                       2178 00114$:
      0003B0 8F 03            [24] 2179 	mov	ar3,r7
      0003B2 7C 00            [12] 2180 	mov	r4,#0x00
      0003B4 C3               [12] 2181 	clr	c
      0003B5 EB               [12] 2182 	mov	a,r3
      0003B6 9D               [12] 2183 	subb	a,r5
      0003B7 EC               [12] 2184 	mov	a,r4
      0003B8 64 80            [12] 2185 	xrl	a,#0x80
      0003BA 8E F0            [24] 2186 	mov	b,r6
      0003BC 63 F0 80         [24] 2187 	xrl	b,#0x80
      0003BF 95 F0            [12] 2188 	subb	a,b
      0003C1 50 1F            [24] 2189 	jnc	00101$
                           0003C3  2190 	C$i2c.h$261$1$106 ==.
                                   2191 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:261: i2c_write(buffer[i]);
      0003C3 EF               [12] 2192 	mov	a,r7
      0003C4 25*0B            [12] 2193 	add	a,_i2c_write_data_PARM_3
      0003C6 FC               [12] 2194 	mov	r4,a
      0003C7 E4               [12] 2195 	clr	a
      0003C8 35*0C            [12] 2196 	addc	a,(_i2c_write_data_PARM_3 + 1)
      0003CA FD               [12] 2197 	mov	r5,a
      0003CB AE*0D            [24] 2198 	mov	r6,(_i2c_write_data_PARM_3 + 2)
      0003CD 8C 82            [24] 2199 	mov	dpl,r4
      0003CF 8D 83            [24] 2200 	mov	dph,r5
      0003D1 8E F0            [24] 2201 	mov	b,r6
      0003D3 12r00r00         [24] 2202 	lcall	__gptrget
      0003D6 F5 82            [12] 2203 	mov	dpl,a
      0003D8 C0 07            [24] 2204 	push	ar7
      0003DA 12r03r5E         [24] 2205 	lcall	_i2c_write
      0003DD D0 07            [24] 2206 	pop	ar7
                           0003DF  2207 	C$i2c.h$260$1$106 ==.
                                   2208 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:260: for(i=0; i<num_bytes-1; i++) //Write the data to the register(s)
      0003DF 0F               [12] 2209 	inc	r7
      0003E0 80 C5            [24] 2210 	sjmp	00103$
      0003E2                       2211 00101$:
                           0003E2  2212 	C$i2c.h$262$1$106 ==.
                                   2213 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:262: i2c_write_and_stop(buffer[num_bytes-1]); //Stop transfer
      0003E2 AE*0E            [24] 2214 	mov	r6,_i2c_write_data_PARM_4
      0003E4 7F 00            [12] 2215 	mov	r7,#0x00
      0003E6 1E               [12] 2216 	dec	r6
      0003E7 BE FF 01         [24] 2217 	cjne	r6,#0xff,00116$
      0003EA 1F               [12] 2218 	dec	r7
      0003EB                       2219 00116$:
      0003EB EE               [12] 2220 	mov	a,r6
      0003EC 25*0B            [12] 2221 	add	a,_i2c_write_data_PARM_3
      0003EE FE               [12] 2222 	mov	r6,a
      0003EF EF               [12] 2223 	mov	a,r7
      0003F0 35*0C            [12] 2224 	addc	a,(_i2c_write_data_PARM_3 + 1)
      0003F2 FF               [12] 2225 	mov	r7,a
      0003F3 AD*0D            [24] 2226 	mov	r5,(_i2c_write_data_PARM_3 + 2)
      0003F5 8E 82            [24] 2227 	mov	dpl,r6
      0003F7 8F 83            [24] 2228 	mov	dph,r7
      0003F9 8D F0            [24] 2229 	mov	b,r5
      0003FB 12r00r00         [24] 2230 	lcall	__gptrget
      0003FE F5 82            [12] 2231 	mov	dpl,a
      000400 12r03r67         [24] 2232 	lcall	_i2c_write_and_stop
                           000403  2233 	C$i2c.h$263$1$106 ==.
                                   2234 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:263: EA = 1;                     //Re-Enable interrupts
      000403 D2 AF            [12] 2235 	setb	_EA
                           000405  2236 	C$i2c.h$264$1$106 ==.
                           000405  2237 	XG$i2c_write_data$0$0 ==.
      000405 22               [24] 2238 	ret
                                   2239 ;------------------------------------------------------------
                                   2240 ;Allocation info for local variables in function 'i2c_read_data'
                                   2241 ;------------------------------------------------------------
                                   2242 ;start_reg                 Allocated with name '_i2c_read_data_PARM_2'
                                   2243 ;buffer                    Allocated with name '_i2c_read_data_PARM_3'
                                   2244 ;num_bytes                 Allocated with name '_i2c_read_data_PARM_4'
                                   2245 ;addr                      Allocated to registers r7 
                                   2246 ;j                         Allocated to registers 
                                   2247 ;------------------------------------------------------------
                           000406  2248 	G$i2c_read_data$0$0 ==.
                           000406  2249 	C$i2c.h$267$1$106 ==.
                                   2250 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:267: void i2c_read_data(unsigned char addr, unsigned char start_reg, unsigned char *buffer, unsigned char num_bytes)
                                   2251 ;	-----------------------------------------
                                   2252 ;	 function i2c_read_data
                                   2253 ;	-----------------------------------------
      000406                       2254 _i2c_read_data:
      000406 AF 82            [24] 2255 	mov	r7,dpl
                           000408  2256 	C$i2c.h$271$1$108 ==.
                                   2257 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:271: EA = 0;                     //Don't allow interrupts during I2C work
      000408 C2 AF            [12] 2258 	clr	_EA
                           00040A  2259 	C$i2c.h$272$1$108 ==.
                                   2260 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:272: i2c_start();                //Start I2C transfer
      00040A C0 07            [24] 2261 	push	ar7
      00040C 12r03r51         [24] 2262 	lcall	_i2c_start
      00040F D0 07            [24] 2263 	pop	ar7
                           000411  2264 	C$i2c.h$273$1$108 ==.
                                   2265 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:273: i2c_write(addr & ~0x01);    //Write address of device that will be written to, send 0
      000411 74 FE            [12] 2266 	mov	a,#0xfe
      000413 5F               [12] 2267 	anl	a,r7
      000414 F5 82            [12] 2268 	mov	dpl,a
      000416 C0 07            [24] 2269 	push	ar7
      000418 12r03r5E         [24] 2270 	lcall	_i2c_write
                           00041B  2271 	C$i2c.h$274$1$108 ==.
                                   2272 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:274: i2c_write_and_stop(start_reg); //Write & stop the 1st register to be read
      00041B 85*0F 82         [24] 2273 	mov	dpl,_i2c_read_data_PARM_2
      00041E 12r03r67         [24] 2274 	lcall	_i2c_write_and_stop
                           000421  2275 	C$i2c.h$275$1$108 ==.
                                   2276 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:275: i2c_start();                //Start I2C transfer
      000421 12r03r51         [24] 2277 	lcall	_i2c_start
      000424 D0 07            [24] 2278 	pop	ar7
                           000426  2279 	C$i2c.h$276$1$108 ==.
                                   2280 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:276: i2c_write(addr | 0x01);     //Write address again, this time indicating a read operation
      000426 74 01            [12] 2281 	mov	a,#0x01
      000428 4F               [12] 2282 	orl	a,r7
      000429 F5 82            [12] 2283 	mov	dpl,a
      00042B 12r03r5E         [24] 2284 	lcall	_i2c_write
                           00042E  2285 	C$i2c.h$277$1$108 ==.
                                   2286 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:277: for(j = 0; j < num_bytes - 1; j++)
      00042E 7F 00            [12] 2287 	mov	r7,#0x00
      000430                       2288 00103$:
      000430 AD*13            [24] 2289 	mov	r5,_i2c_read_data_PARM_4
      000432 7E 00            [12] 2290 	mov	r6,#0x00
      000434 1D               [12] 2291 	dec	r5
      000435 BD FF 01         [24] 2292 	cjne	r5,#0xff,00114$
      000438 1E               [12] 2293 	dec	r6
      000439                       2294 00114$:
      000439 8F 03            [24] 2295 	mov	ar3,r7
      00043B 7C 00            [12] 2296 	mov	r4,#0x00
      00043D C3               [12] 2297 	clr	c
      00043E EB               [12] 2298 	mov	a,r3
      00043F 9D               [12] 2299 	subb	a,r5
      000440 EC               [12] 2300 	mov	a,r4
      000441 64 80            [12] 2301 	xrl	a,#0x80
      000443 8E F0            [24] 2302 	mov	b,r6
      000445 63 F0 80         [24] 2303 	xrl	b,#0x80
      000448 95 F0            [12] 2304 	subb	a,b
      00044A 50 2E            [24] 2305 	jnc	00101$
                           00044C  2306 	C$i2c.h$279$2$109 ==.
                                   2307 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:279: AA = 1;                 //Set acknowledge bit
      00044C D2 C2            [12] 2308 	setb	_AA
                           00044E  2309 	C$i2c.h$280$2$109 ==.
                                   2310 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:280: buffer[j] = i2c_read(); //Read data, save it in buffer
      00044E EF               [12] 2311 	mov	a,r7
      00044F 25*10            [12] 2312 	add	a,_i2c_read_data_PARM_3
      000451 FC               [12] 2313 	mov	r4,a
      000452 E4               [12] 2314 	clr	a
      000453 35*11            [12] 2315 	addc	a,(_i2c_read_data_PARM_3 + 1)
      000455 FD               [12] 2316 	mov	r5,a
      000456 AE*12            [24] 2317 	mov	r6,(_i2c_read_data_PARM_3 + 2)
      000458 C0 07            [24] 2318 	push	ar7
      00045A C0 06            [24] 2319 	push	ar6
      00045C C0 05            [24] 2320 	push	ar5
      00045E C0 04            [24] 2321 	push	ar4
      000460 12r03r72         [24] 2322 	lcall	_i2c_read
      000463 AB 82            [24] 2323 	mov	r3,dpl
      000465 D0 04            [24] 2324 	pop	ar4
      000467 D0 05            [24] 2325 	pop	ar5
      000469 D0 06            [24] 2326 	pop	ar6
      00046B D0 07            [24] 2327 	pop	ar7
      00046D 8C 82            [24] 2328 	mov	dpl,r4
      00046F 8D 83            [24] 2329 	mov	dph,r5
      000471 8E F0            [24] 2330 	mov	b,r6
      000473 EB               [12] 2331 	mov	a,r3
      000474 12r00r00         [24] 2332 	lcall	__gptrput
                           000477  2333 	C$i2c.h$277$1$108 ==.
                                   2334 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:277: for(j = 0; j < num_bytes - 1; j++)
      000477 0F               [12] 2335 	inc	r7
      000478 80 B6            [24] 2336 	sjmp	00103$
      00047A                       2337 00101$:
                           00047A  2338 	C$i2c.h$282$1$108 ==.
                                   2339 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:282: AA = 0;
      00047A C2 C2            [12] 2340 	clr	_AA
                           00047C  2341 	C$i2c.h$283$1$108 ==.
                                   2342 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:283: buffer[num_bytes - 1] = i2c_read_and_stop(); //Read the last byte and stop, save it in the buffer
      00047C AE*13            [24] 2343 	mov	r6,_i2c_read_data_PARM_4
      00047E 7F 00            [12] 2344 	mov	r7,#0x00
      000480 1E               [12] 2345 	dec	r6
      000481 BE FF 01         [24] 2346 	cjne	r6,#0xff,00116$
      000484 1F               [12] 2347 	dec	r7
      000485                       2348 00116$:
      000485 EE               [12] 2349 	mov	a,r6
      000486 25*10            [12] 2350 	add	a,_i2c_read_data_PARM_3
      000488 FE               [12] 2351 	mov	r6,a
      000489 EF               [12] 2352 	mov	a,r7
      00048A 35*11            [12] 2353 	addc	a,(_i2c_read_data_PARM_3 + 1)
      00048C FF               [12] 2354 	mov	r7,a
      00048D AD*12            [24] 2355 	mov	r5,(_i2c_read_data_PARM_3 + 2)
      00048F C0 07            [24] 2356 	push	ar7
      000491 C0 06            [24] 2357 	push	ar6
      000493 C0 05            [24] 2358 	push	ar5
      000495 12r03r7B         [24] 2359 	lcall	_i2c_read_and_stop
      000498 AC 82            [24] 2360 	mov	r4,dpl
      00049A D0 05            [24] 2361 	pop	ar5
      00049C D0 06            [24] 2362 	pop	ar6
      00049E D0 07            [24] 2363 	pop	ar7
      0004A0 8E 82            [24] 2364 	mov	dpl,r6
      0004A2 8F 83            [24] 2365 	mov	dph,r7
      0004A4 8D F0            [24] 2366 	mov	b,r5
      0004A6 EC               [12] 2367 	mov	a,r4
      0004A7 12r00r00         [24] 2368 	lcall	__gptrput
                           0004AA  2369 	C$i2c.h$284$1$108 ==.
                                   2370 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:284: EA = 1;                     //Re-Enable interrupts
      0004AA D2 AF            [12] 2371 	setb	_EA
                           0004AC  2372 	C$i2c.h$285$1$108 ==.
                           0004AC  2373 	XG$i2c_read_data$0$0 ==.
      0004AC 22               [24] 2374 	ret
                                   2375 ;------------------------------------------------------------
                                   2376 ;Allocation info for local variables in function 'Accel_Init'
                                   2377 ;------------------------------------------------------------
                           0004AD  2378 	G$Accel_Init$0$0 ==.
                           0004AD  2379 	C$i2c.h$294$1$108 ==.
                                   2380 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:294: void Accel_Init(void)
                                   2381 ;	-----------------------------------------
                                   2382 ;	 function Accel_Init
                                   2383 ;	-----------------------------------------
      0004AD                       2384 _Accel_Init:
                           0004AD  2385 	C$i2c.h$298$1$111 ==.
                                   2386 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:298: Data2[0]=0x23;  //normal power mode, 50Hz ODR, y & x axes enabled
      0004AD 75*00 23         [24] 2387 	mov	_Data2,#0x23
                           0004B0  2388 	C$i2c.h$300$1$111 ==.
                                   2389 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:300: Data2[1]=0x00;  //default - no filtering
      0004B0 75*01 00         [24] 2390 	mov	(_Data2 + 0x0001),#0x00
                           0004B3  2391 	C$i2c.h$301$1$111 ==.
                                   2392 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:301: Data2[1]=0x10;  //filtered data selected, HPF = 1.0->0.125Hz
      0004B3 75*01 10         [24] 2393 	mov	(_Data2 + 0x0001),#0x10
                           0004B6  2394 	C$i2c.h$302$1$111 ==.
                                   2395 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:302: Data2[2]=0x00;  //default - no interrupts enabled
      0004B6 75*02 00         [24] 2396 	mov	(_Data2 + 0x0002),#0x00
                           0004B9  2397 	C$i2c.h$304$1$111 ==.
                                   2398 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:304: i2c_write_data(addr_accel, 0x20, Data2, 1);
      0004B9 75*0Br00         [24] 2399 	mov	_i2c_write_data_PARM_3,#_Data2
      0004BC 75*0C 00         [24] 2400 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      0004BF 75*0D 40         [24] 2401 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      0004C2 75*0A 20         [24] 2402 	mov	_i2c_write_data_PARM_2,#0x20
      0004C5 75*0E 01         [24] 2403 	mov	_i2c_write_data_PARM_4,#0x01
      0004C8 75 82 30         [24] 2404 	mov	dpl,#0x30
      0004CB 12r03r8C         [24] 2405 	lcall	_i2c_write_data
                           0004CE  2406 	C$i2c.h$310$1$111 ==.
                           0004CE  2407 	XG$Accel_Init$0$0 ==.
      0004CE 22               [24] 2408 	ret
                                   2409 ;------------------------------------------------------------
                                   2410 ;Allocation info for local variables in function 'Accel_Init_C'
                                   2411 ;------------------------------------------------------------
                           0004CF  2412 	G$Accel_Init_C$0$0 ==.
                           0004CF  2413 	C$i2c.h$313$1$111 ==.
                                   2414 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:313: void Accel_Init_C(void)
                                   2415 ;	-----------------------------------------
                                   2416 ;	 function Accel_Init_C
                                   2417 ;	-----------------------------------------
      0004CF                       2418 _Accel_Init_C:
                           0004CF  2419 	C$i2c.h$318$1$113 ==.
                                   2420 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:318: Data2[0]=0x04;  //set register address auto increment bit
      0004CF 75*00 04         [24] 2421 	mov	_Data2,#0x04
                           0004D2  2422 	C$i2c.h$319$1$113 ==.
                                   2423 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:319: i2c_write_data(addr_accelC, 0x23, Data2, 1);
      0004D2 75*0Br00         [24] 2424 	mov	_i2c_write_data_PARM_3,#_Data2
      0004D5 75*0C 00         [24] 2425 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      0004D8 75*0D 40         [24] 2426 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      0004DB 75*0A 23         [24] 2427 	mov	_i2c_write_data_PARM_2,#0x23
      0004DE 75*0E 01         [24] 2428 	mov	_i2c_write_data_PARM_4,#0x01
      0004E1 75 82 3A         [24] 2429 	mov	dpl,#0x3a
      0004E4 12r03r8C         [24] 2430 	lcall	_i2c_write_data
                           0004E7  2431 	C$i2c.h$321$1$113 ==.
                                   2432 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:321: Data2[0]=0x6B;  //R20 normal power mode, 800Hz ODR, y & x axes enabled
      0004E7 75*00 6B         [24] 2433 	mov	_Data2,#0x6b
                           0004EA  2434 	C$i2c.h$323$1$113 ==.
                                   2435 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:323: Data2[1]=0x00;  //R21 Default - no HP filtering
      0004EA 75*01 00         [24] 2436 	mov	(_Data2 + 0x0001),#0x00
                           0004ED  2437 	C$i2c.h$325$1$113 ==.
                                   2438 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:325: Data2[2]=0x00;  //R22 Default - no interrupts enabled
      0004ED 75*02 00         [24] 2439 	mov	(_Data2 + 0x0002),#0x00
                           0004F0  2440 	C$i2c.h$326$1$113 ==.
                                   2441 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:326: i2c_write_data(addr_accelC, 0x20, Data2, 1);
      0004F0 75*0Br00         [24] 2442 	mov	_i2c_write_data_PARM_3,#_Data2
      0004F3 75*0C 00         [24] 2443 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      0004F6 75*0D 40         [24] 2444 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      0004F9 75*0A 20         [24] 2445 	mov	_i2c_write_data_PARM_2,#0x20
      0004FC 75*0E 01         [24] 2446 	mov	_i2c_write_data_PARM_4,#0x01
      0004FF 75 82 3A         [24] 2447 	mov	dpl,#0x3a
      000502 12r03r8C         [24] 2448 	lcall	_i2c_write_data
                           000505  2449 	C$i2c.h$328$1$113 ==.
                           000505  2450 	XG$Accel_Init_C$0$0 ==.
      000505 22               [24] 2451 	ret
                                   2452 ;------------------------------------------------------------
                                   2453 ;Allocation info for local variables in function 'main'
                                   2454 ;------------------------------------------------------------
                           000506  2455 	G$main$0$0 ==.
                           000506  2456 	C$Lab_6_New.c$70$1$113 ==.
                                   2457 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:70: void main(void)
                                   2458 ;	-----------------------------------------
                                   2459 ;	 function main
                                   2460 ;	-----------------------------------------
      000506                       2461 _main:
                           000506  2462 	C$Lab_6_New.c$73$1$155 ==.
                                   2463 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:73: Sys_Init();
      000506 12r00r37         [24] 2464 	lcall	_Sys_Init
                           000509  2465 	C$Lab_6_New.c$74$1$155 ==.
                                   2466 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:74: putchar(' ');
      000509 75 82 20         [24] 2467 	mov	dpl,#0x20
      00050C 12r00r4A         [24] 2468 	lcall	_putchar
                           00050F  2469 	C$Lab_6_New.c$75$1$155 ==.
                                   2470 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:75: Port_Init();
      00050F 12r08r67         [24] 2471 	lcall	_Port_Init
                           000512  2472 	C$Lab_6_New.c$76$1$155 ==.
                                   2473 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:76: XBR0_Init();
      000512 12r08r7C         [24] 2474 	lcall	_XBR0_Init
                           000515  2475 	C$Lab_6_New.c$77$1$155 ==.
                                   2476 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:77: PCA_Init();
      000515 12r08r80         [24] 2477 	lcall	_PCA_Init
                           000518  2478 	C$Lab_6_New.c$78$1$155 ==.
                                   2479 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:78: Interrupt_Init();
      000518 12r08r93         [24] 2480 	lcall	_Interrupt_Init
                           00051B  2481 	C$Lab_6_New.c$79$1$155 ==.
                                   2482 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:79: SMB_Init();
      00051B 12r08rD4         [24] 2483 	lcall	_SMB_Init
                           00051E  2484 	C$Lab_6_New.c$80$1$155 ==.
                                   2485 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:80: ADC_Init();
      00051E 12r08rDA         [24] 2486 	lcall	_ADC_Init
                           000521  2487 	C$Lab_6_New.c$81$1$155 ==.
                                   2488 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:81: CR = 1;
      000521 D2 DE            [12] 2489 	setb	_CR
                           000523  2490 	C$Lab_6_New.c$83$1$155 ==.
                                   2491 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:83: while(1)
      000523                       2492 00121$:
                           000523  2493 	C$Lab_6_New.c$85$2$156 ==.
                                   2494 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:85: if (DS0)		//switch 1 is off
      000523 30 B0 1F         [24] 2495 	jnb	_DS0,00118$
                           000526  2496 	C$Lab_6_New.c$88$3$157 ==.
                                   2497 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:88: getGain();
      000526 12r07r43         [24] 2498 	lcall	_getGain
                           000529  2499 	C$Lab_6_New.c$89$3$157 ==.
                                   2500 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:89: getHeading();
      000529 12r07rD3         [24] 2501 	lcall	_getHeading
                           00052C  2502 	C$Lab_6_New.c$92$3$157 ==.
                                   2503 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:92: setAngle();
      00052C 12r05r9F         [24] 2504 	lcall	_setAngle
                           00052F  2505 	C$Lab_6_New.c$94$3$157 ==.
                                   2506 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:94: if (DS7 == 1)		//if switch 8 is on
      00052F 30 B7 08         [24] 2507 	jnb	_DS7,00104$
                           000532  2508 	C$Lab_6_New.c$96$4$158 ==.
                                   2509 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:96: angle = 1200;
      000532 75*33 B0         [24] 2510 	mov	_angle,#0xb0
      000535 75*34 04         [24] 2511 	mov	(_angle + 1),#0x04
      000538 80 E9            [24] 2512 	sjmp	00121$
      00053A                       2513 00104$:
                           00053A  2514 	C$Lab_6_New.c$98$3$157 ==.
                                   2515 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:98: else if (DS7 == 0)	//if switch 8 is off
      00053A 20 B7 E6         [24] 2516 	jb	_DS7,00121$
                           00053D  2517 	C$Lab_6_New.c$100$4$159 ==.
                                   2518 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:100: angle = -1200;
      00053D 75*33 50         [24] 2519 	mov	_angle,#0x50
      000540 75*34 FB         [24] 2520 	mov	(_angle + 1),#0xfb
      000543 80 DE            [24] 2521 	sjmp	00121$
      000545                       2522 00118$:
                           000545  2523 	C$Lab_6_New.c$104$2$156 ==.
                                   2524 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:104: else if (!DS0)	//switch 1 is on
      000545 20 B0 DB         [24] 2525 	jb	_DS0,00121$
                           000548  2526 	C$Lab_6_New.c$106$3$160 ==.
                                   2527 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:106: ReadRanger();
      000548 12r05rA0         [24] 2528 	lcall	_ReadRanger
                           00054B  2529 	C$Lab_6_New.c$107$3$160 ==.
                                   2530 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:107: ReadCompass();
      00054B 12r05rE2         [24] 2531 	lcall	_ReadCompass
                           00054E  2532 	C$Lab_6_New.c$109$3$160 ==.
                                   2533 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:109: counts = 0;
      00054E E4               [12] 2534 	clr	a
      00054F F5*21            [12] 2535 	mov	_counts,a
      000551 F5*22            [12] 2536 	mov	(_counts + 1),a
                           000553  2537 	C$Lab_6_New.c$110$3$160 ==.
                                   2538 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:110: while (counts <= 1000)
      000553                       2539 00106$:
      000553 C3               [12] 2540 	clr	c
      000554 74 E8            [12] 2541 	mov	a,#0xe8
      000556 95*21            [12] 2542 	subb	a,_counts
      000558 74 03            [12] 2543 	mov	a,#0x03
      00055A 95*22            [12] 2544 	subb	a,(_counts + 1)
      00055C 40 0E            [24] 2545 	jc	00109$
                           00055E  2546 	C$Lab_6_New.c$112$4$161 ==.
                                   2547 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:112: ReadRanger();
      00055E 12r05rA0         [24] 2548 	lcall	_ReadRanger
                           000561  2549 	C$Lab_6_New.c$113$4$161 ==.
                                   2550 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:113: ReadCompass();
      000561 12r05rE2         [24] 2551 	lcall	_ReadCompass
                           000564  2552 	C$Lab_6_New.c$114$4$161 ==.
                                   2553 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:114: errHeading1();
      000564 12r06r0E         [24] 2554 	lcall	_errHeading1
                           000567  2555 	C$Lab_6_New.c$115$4$161 ==.
                                   2556 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:115: printData();
      000567 12r08r1D         [24] 2557 	lcall	_printData
                           00056A  2558 	C$Lab_6_New.c$118$3$160 ==.
                                   2559 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:118: while (counts <= 2000)
      00056A 80 E7            [24] 2560 	sjmp	00106$
      00056C                       2561 00109$:
      00056C C3               [12] 2562 	clr	c
      00056D 74 D0            [12] 2563 	mov	a,#0xd0
      00056F 95*21            [12] 2564 	subb	a,_counts
      000571 74 07            [12] 2565 	mov	a,#0x07
      000573 95*22            [12] 2566 	subb	a,(_counts + 1)
      000575 40 0E            [24] 2567 	jc	00112$
                           000577  2568 	C$Lab_6_New.c$120$4$162 ==.
                                   2569 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:120: ReadRanger();
      000577 12r05rA0         [24] 2570 	lcall	_ReadRanger
                           00057A  2571 	C$Lab_6_New.c$121$4$162 ==.
                                   2572 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:121: ReadCompass();
      00057A 12r05rE2         [24] 2573 	lcall	_ReadCompass
                           00057D  2574 	C$Lab_6_New.c$122$4$162 ==.
                                   2575 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:122: errHeading1();
      00057D 12r06r0E         [24] 2576 	lcall	_errHeading1
                           000580  2577 	C$Lab_6_New.c$123$4$162 ==.
                                   2578 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:123: printData();
      000580 12r08r1D         [24] 2579 	lcall	_printData
                           000583  2580 	C$Lab_6_New.c$126$3$160 ==.
                                   2581 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:126: while (counts <= 3000)
      000583 80 E7            [24] 2582 	sjmp	00109$
      000585                       2583 00112$:
      000585 C3               [12] 2584 	clr	c
      000586 74 B8            [12] 2585 	mov	a,#0xb8
      000588 95*21            [12] 2586 	subb	a,_counts
      00058A 74 0B            [12] 2587 	mov	a,#0x0b
      00058C 95*22            [12] 2588 	subb	a,(_counts + 1)
      00058E 40 93            [24] 2589 	jc	00121$
                           000590  2590 	C$Lab_6_New.c$128$4$163 ==.
                                   2591 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:128: ReadRanger();
      000590 12r05rA0         [24] 2592 	lcall	_ReadRanger
                           000593  2593 	C$Lab_6_New.c$129$4$163 ==.
                                   2594 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:129: ReadCompass();
      000593 12r05rE2         [24] 2595 	lcall	_ReadCompass
                           000596  2596 	C$Lab_6_New.c$130$4$163 ==.
                                   2597 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:130: errHeading3();
      000596 12r06rDC         [24] 2598 	lcall	_errHeading3
                           000599  2599 	C$Lab_6_New.c$131$4$163 ==.
                                   2600 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:131: printData();
      000599 12r08r1D         [24] 2601 	lcall	_printData
      00059C 80 E7            [24] 2602 	sjmp	00112$
                           00059E  2603 	C$Lab_6_New.c$135$1$155 ==.
                           00059E  2604 	XG$main$0$0 ==.
      00059E 22               [24] 2605 	ret
                                   2606 ;------------------------------------------------------------
                                   2607 ;Allocation info for local variables in function 'setAngle'
                                   2608 ;------------------------------------------------------------
                           00059F  2609 	G$setAngle$0$0 ==.
                           00059F  2610 	C$Lab_6_New.c$141$1$155 ==.
                                   2611 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:141: void setAngle(void)		//calibrate side fan angle, CEX1
                                   2612 ;	-----------------------------------------
                                   2613 ;	 function setAngle
                                   2614 ;	-----------------------------------------
      00059F                       2615 _setAngle:
                           00059F  2616 	C$Lab_6_New.c$143$1$155 ==.
                                   2617 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:143: }
                           00059F  2618 	C$Lab_6_New.c$143$1$155 ==.
                           00059F  2619 	XG$setAngle$0$0 ==.
      00059F 22               [24] 2620 	ret
                                   2621 ;------------------------------------------------------------
                                   2622 ;Allocation info for local variables in function 'ReadRanger'
                                   2623 ;------------------------------------------------------------
                                   2624 ;addr                      Allocated to registers 
                                   2625 ;dr_data_array             Allocated with name '_ReadRanger_dr_data_array_2_168'
                                   2626 ;------------------------------------------------------------
                           0005A0  2627 	G$ReadRanger$0$0 ==.
                           0005A0  2628 	C$Lab_6_New.c$149$1$155 ==.
                                   2629 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:149: void ReadRanger(void)
                                   2630 ;	-----------------------------------------
                                   2631 ;	 function ReadRanger
                                   2632 ;	-----------------------------------------
      0005A0                       2633 _ReadRanger:
                           0005A0  2634 	C$Lab_6_New.c$151$1$167 ==.
                                   2635 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:151: if (new_range)
      0005A0 E5*18            [12] 2636 	mov	a,_new_range
      0005A2 60 25            [24] 2637 	jz	00102$
                           0005A4  2638 	C$Lab_6_New.c$155$2$168 ==.
                                   2639 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:155: i2c_read_data(addr, 2, dr_data_array, 2);								//read register 2 and 3, echo 1
      0005A4 75*10r35         [24] 2640 	mov	_i2c_read_data_PARM_3,#_ReadRanger_dr_data_array_2_168
      0005A7 75*11 00         [24] 2641 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      0005AA 75*12 40         [24] 2642 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      0005AD 75*0F 02         [24] 2643 	mov	_i2c_read_data_PARM_2,#0x02
      0005B0 75*13 02         [24] 2644 	mov	_i2c_read_data_PARM_4,#0x02
      0005B3 75 82 E0         [24] 2645 	mov	dpl,#0xe0
      0005B6 12r04r06         [24] 2646 	lcall	_i2c_read_data
                           0005B9  2647 	C$Lab_6_New.c$156$2$168 ==.
                                   2648 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:156: distance = (((unsigned int)dr_data_array[0] << 8) | dr_data_array[1]);	//concatenate
      0005B9 AF*35            [24] 2649 	mov	r7,_ReadRanger_dr_data_array_2_168
      0005BB 7E 00            [12] 2650 	mov	r6,#0x00
      0005BD AC*36            [24] 2651 	mov	r4,(_ReadRanger_dr_data_array_2_168 + 0x0001)
      0005BF 7D 00            [12] 2652 	mov	r5,#0x00
      0005C1 EC               [12] 2653 	mov	a,r4
      0005C2 4E               [12] 2654 	orl	a,r6
      0005C3 F5*15            [12] 2655 	mov	_distance,a
      0005C5 ED               [12] 2656 	mov	a,r5
      0005C6 4F               [12] 2657 	orl	a,r7
      0005C7 F5*16            [12] 2658 	mov	(_distance + 1),a
      0005C9                       2659 00102$:
                           0005C9  2660 	C$Lab_6_New.c$159$1$167 ==.
                                   2661 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:159: i2c_write_data(0xE0, 0, dr_input_data, 1);		//start ping to get range back in cm
      0005C9 75*0Br14         [24] 2662 	mov	_i2c_write_data_PARM_3,#_dr_input_data
      0005CC 75*0C 00         [24] 2663 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      0005CF 75*0D 40         [24] 2664 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      0005D2 75*0A 00         [24] 2665 	mov	_i2c_write_data_PARM_2,#0x00
      0005D5 75*0E 01         [24] 2666 	mov	_i2c_write_data_PARM_4,#0x01
      0005D8 75 82 E0         [24] 2667 	mov	dpl,#0xe0
      0005DB 12r03r8C         [24] 2668 	lcall	_i2c_write_data
                           0005DE  2669 	C$Lab_6_New.c$160$1$167 ==.
                                   2670 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:160: new_range = 0;
      0005DE 75*18 00         [24] 2671 	mov	_new_range,#0x00
                           0005E1  2672 	C$Lab_6_New.c$161$1$167 ==.
                           0005E1  2673 	XG$ReadRanger$0$0 ==.
      0005E1 22               [24] 2674 	ret
                                   2675 ;------------------------------------------------------------
                                   2676 ;Allocation info for local variables in function 'ReadCompass'
                                   2677 ;------------------------------------------------------------
                                   2678 ;addr                      Allocated to registers 
                                   2679 ;Data                      Allocated with name '_ReadCompass_Data_2_171'
                                   2680 ;------------------------------------------------------------
                           0005E2  2681 	G$ReadCompass$0$0 ==.
                           0005E2  2682 	C$Lab_6_New.c$166$1$167 ==.
                                   2683 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:166: void ReadCompass(void)
                                   2684 ;	-----------------------------------------
                                   2685 ;	 function ReadCompass
                                   2686 ;	-----------------------------------------
      0005E2                       2687 _ReadCompass:
                           0005E2  2688 	C$Lab_6_New.c$168$1$170 ==.
                                   2689 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:168: if (new_heading)	
      0005E2 E5*27            [12] 2690 	mov	a,_new_heading
      0005E4 45*28            [12] 2691 	orl	a,(_new_heading + 1)
      0005E6 60 25            [24] 2692 	jz	00103$
                           0005E8  2693 	C$Lab_6_New.c$172$2$171 ==.
                                   2694 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:172: i2c_read_data(addr, 2, Data, 2);					//read two byte, starting at reg 2
      0005E8 75*10r37         [24] 2695 	mov	_i2c_read_data_PARM_3,#_ReadCompass_Data_2_171
      0005EB 75*11 00         [24] 2696 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      0005EE 75*12 40         [24] 2697 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      0005F1 75*0F 02         [24] 2698 	mov	_i2c_read_data_PARM_2,#0x02
      0005F4 75*13 02         [24] 2699 	mov	_i2c_read_data_PARM_4,#0x02
      0005F7 75 82 C0         [24] 2700 	mov	dpl,#0xc0
      0005FA 12r04r06         [24] 2701 	lcall	_i2c_read_data
                           0005FD  2702 	C$Lab_6_New.c$173$2$171 ==.
                                   2703 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:173: heading =(((unsigned int)Data[0] << 8) | Data[1]);	//combine the two values
      0005FD AF*37            [24] 2704 	mov	r7,_ReadCompass_Data_2_171
      0005FF 7E 00            [12] 2705 	mov	r6,#0x00
      000601 AC*38            [24] 2706 	mov	r4,(_ReadCompass_Data_2_171 + 0x0001)
      000603 7D 00            [12] 2707 	mov	r5,#0x00
      000605 EC               [12] 2708 	mov	a,r4
      000606 4E               [12] 2709 	orl	a,r6
      000607 F5*25            [12] 2710 	mov	_heading,a
      000609 ED               [12] 2711 	mov	a,r5
      00060A 4F               [12] 2712 	orl	a,r7
      00060B F5*26            [12] 2713 	mov	(_heading + 1),a
      00060D                       2714 00103$:
                           00060D  2715 	C$Lab_6_New.c$175$1$170 ==.
                           00060D  2716 	XG$ReadCompass$0$0 ==.
      00060D 22               [24] 2717 	ret
                                   2718 ;------------------------------------------------------------
                                   2719 ;Allocation info for local variables in function 'errHeading1'
                                   2720 ;------------------------------------------------------------
                           00060E  2721 	G$errHeading1$0$0 ==.
                           00060E  2722 	C$Lab_6_New.c$177$1$170 ==.
                                   2723 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:177: void errHeading1(void)		//all 3 fans, CEX0, CEX2, CEX3
                                   2724 ;	-----------------------------------------
                                   2725 ;	 function errHeading1
                                   2726 ;	-----------------------------------------
      00060E                       2727 _errHeading1:
                           00060E  2728 	C$Lab_6_New.c$179$1$173 ==.
                                   2729 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:179: error = desired_heading - heading;		
      00060E AE*25            [24] 2730 	mov	r6,_heading
      000610 AF*26            [24] 2731 	mov	r7,(_heading + 1)
      000612 E5*29            [12] 2732 	mov	a,_desired_heading
      000614 C3               [12] 2733 	clr	c
      000615 9E               [12] 2734 	subb	a,r6
      000616 F5*2B            [12] 2735 	mov	_error,a
      000618 E5*2A            [12] 2736 	mov	a,(_desired_heading + 1)
      00061A 9F               [12] 2737 	subb	a,r7
      00061B F5*2C            [12] 2738 	mov	(_error + 1),a
                           00061D  2739 	C$Lab_6_New.c$180$1$173 ==.
                                   2740 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:180: if(error > 1800) 								//fixes issue when desired and actual heading are very far away from each other
      00061D C3               [12] 2741 	clr	c
      00061E 74 08            [12] 2742 	mov	a,#0x08
      000620 95*2B            [12] 2743 	subb	a,_error
      000622 74 87            [12] 2744 	mov	a,#(0x07 ^ 0x80)
      000624 85*2C F0         [24] 2745 	mov	b,(_error + 1)
      000627 63 F0 80         [24] 2746 	xrl	b,#0x80
      00062A 95 F0            [12] 2747 	subb	a,b
      00062C 50 0E            [24] 2748 	jnc	00104$
                           00062E  2749 	C$Lab_6_New.c$182$2$174 ==.
                                   2750 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:182: error -= 3600;
      00062E E5*2B            [12] 2751 	mov	a,_error
      000630 24 F0            [12] 2752 	add	a,#0xf0
      000632 F5*2B            [12] 2753 	mov	_error,a
      000634 E5*2C            [12] 2754 	mov	a,(_error + 1)
      000636 34 F1            [12] 2755 	addc	a,#0xf1
      000638 F5*2C            [12] 2756 	mov	(_error + 1),a
      00063A 80 19            [24] 2757 	sjmp	00105$
      00063C                       2758 00104$:
                           00063C  2759 	C$Lab_6_New.c$184$1$173 ==.
                                   2760 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:184: else if(error < -1800) 
      00063C C3               [12] 2761 	clr	c
      00063D E5*2B            [12] 2762 	mov	a,_error
      00063F 94 F8            [12] 2763 	subb	a,#0xf8
      000641 E5*2C            [12] 2764 	mov	a,(_error + 1)
      000643 64 80            [12] 2765 	xrl	a,#0x80
      000645 94 78            [12] 2766 	subb	a,#0x78
      000647 50 0C            [24] 2767 	jnc	00105$
                           000649  2768 	C$Lab_6_New.c$186$2$175 ==.
                                   2769 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:186: error += 3600;
      000649 74 10            [12] 2770 	mov	a,#0x10
      00064B 25*2B            [12] 2771 	add	a,_error
      00064D F5*2B            [12] 2772 	mov	_error,a
      00064F 74 0E            [12] 2773 	mov	a,#0x0e
      000651 35*2C            [12] 2774 	addc	a,(_error + 1)
      000653 F5*2C            [12] 2775 	mov	(_error + 1),a
      000655                       2776 00105$:
                           000655  2777 	C$Lab_6_New.c$191$1$173 ==.
                                   2778 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:191: PW = temp_pw;									//saves the equation value as the current pulsewidth
      000655 85*31*1F         [24] 2779 	mov	_PW,_temp_pw
      000658 85*32*20         [24] 2780 	mov	(_PW + 1),(_temp_pw + 1)
                           00065B  2781 	C$Lab_6_New.c$192$1$173 ==.
                                   2782 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:192: PCA0CPL0 = 0xFFFF - PW;
      00065B AF*1F            [24] 2783 	mov	r7,_PW
      00065D 74 FF            [12] 2784 	mov	a,#0xff
      00065F C3               [12] 2785 	clr	c
      000660 9F               [12] 2786 	subb	a,r7
      000661 F5 EA            [12] 2787 	mov	_PCA0CPL0,a
                           000663  2788 	C$Lab_6_New.c$193$1$173 ==.
                                   2789 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:193: PCA0CPH0 = (0xFFFF - PW) >> 8;
      000663 74 FF            [12] 2790 	mov	a,#0xff
      000665 C3               [12] 2791 	clr	c
      000666 95*1F            [12] 2792 	subb	a,_PW
      000668 74 FF            [12] 2793 	mov	a,#0xff
      00066A 95*20            [12] 2794 	subb	a,(_PW + 1)
      00066C FF               [12] 2795 	mov	r7,a
      00066D 8F FA            [24] 2796 	mov	_PCA0CPH0,r7
                           00066F  2797 	C$Lab_6_New.c$194$1$173 ==.
                                   2798 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:194: new_heading = 0;
      00066F E4               [12] 2799 	clr	a
      000670 F5*27            [12] 2800 	mov	_new_heading,a
      000672 F5*28            [12] 2801 	mov	(_new_heading + 1),a
                           000674  2802 	C$Lab_6_New.c$195$1$173 ==.
                           000674  2803 	XG$errHeading1$0$0 ==.
      000674 22               [24] 2804 	ret
                                   2805 ;------------------------------------------------------------
                                   2806 ;Allocation info for local variables in function 'errHeading2'
                                   2807 ;------------------------------------------------------------
                           000675  2808 	G$errHeading2$0$0 ==.
                           000675  2809 	C$Lab_6_New.c$197$1$173 ==.
                                   2810 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:197: void errHeading2(void)		//side fans, CEX2. CEX3
                                   2811 ;	-----------------------------------------
                                   2812 ;	 function errHeading2
                                   2813 ;	-----------------------------------------
      000675                       2814 _errHeading2:
                           000675  2815 	C$Lab_6_New.c$199$1$177 ==.
                                   2816 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:199: error = desired_heading - heading;		
      000675 AE*25            [24] 2817 	mov	r6,_heading
      000677 AF*26            [24] 2818 	mov	r7,(_heading + 1)
      000679 E5*29            [12] 2819 	mov	a,_desired_heading
      00067B C3               [12] 2820 	clr	c
      00067C 9E               [12] 2821 	subb	a,r6
      00067D F5*2B            [12] 2822 	mov	_error,a
      00067F E5*2A            [12] 2823 	mov	a,(_desired_heading + 1)
      000681 9F               [12] 2824 	subb	a,r7
      000682 F5*2C            [12] 2825 	mov	(_error + 1),a
                           000684  2826 	C$Lab_6_New.c$200$1$177 ==.
                                   2827 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:200: if(error > 1800) 								//fixes issue when desired and actual heading are very far away from each other
      000684 C3               [12] 2828 	clr	c
      000685 74 08            [12] 2829 	mov	a,#0x08
      000687 95*2B            [12] 2830 	subb	a,_error
      000689 74 87            [12] 2831 	mov	a,#(0x07 ^ 0x80)
      00068B 85*2C F0         [24] 2832 	mov	b,(_error + 1)
      00068E 63 F0 80         [24] 2833 	xrl	b,#0x80
      000691 95 F0            [12] 2834 	subb	a,b
      000693 50 0E            [24] 2835 	jnc	00104$
                           000695  2836 	C$Lab_6_New.c$202$2$178 ==.
                                   2837 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:202: error -= 3600;
      000695 E5*2B            [12] 2838 	mov	a,_error
      000697 24 F0            [12] 2839 	add	a,#0xf0
      000699 F5*2B            [12] 2840 	mov	_error,a
      00069B E5*2C            [12] 2841 	mov	a,(_error + 1)
      00069D 34 F1            [12] 2842 	addc	a,#0xf1
      00069F F5*2C            [12] 2843 	mov	(_error + 1),a
      0006A1 80 19            [24] 2844 	sjmp	00105$
      0006A3                       2845 00104$:
                           0006A3  2846 	C$Lab_6_New.c$204$1$177 ==.
                                   2847 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:204: else if(error < -1800) 
      0006A3 C3               [12] 2848 	clr	c
      0006A4 E5*2B            [12] 2849 	mov	a,_error
      0006A6 94 F8            [12] 2850 	subb	a,#0xf8
      0006A8 E5*2C            [12] 2851 	mov	a,(_error + 1)
      0006AA 64 80            [12] 2852 	xrl	a,#0x80
      0006AC 94 78            [12] 2853 	subb	a,#0x78
      0006AE 50 0C            [24] 2854 	jnc	00105$
                           0006B0  2855 	C$Lab_6_New.c$206$2$179 ==.
                                   2856 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:206: error += 3600;
      0006B0 74 10            [12] 2857 	mov	a,#0x10
      0006B2 25*2B            [12] 2858 	add	a,_error
      0006B4 F5*2B            [12] 2859 	mov	_error,a
      0006B6 74 0E            [12] 2860 	mov	a,#0x0e
      0006B8 35*2C            [12] 2861 	addc	a,(_error + 1)
      0006BA F5*2C            [12] 2862 	mov	(_error + 1),a
      0006BC                       2863 00105$:
                           0006BC  2864 	C$Lab_6_New.c$211$1$177 ==.
                                   2865 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:211: PW = temp_pw;									//saves the equation value as the current pulsewidth
      0006BC 85*31*1F         [24] 2866 	mov	_PW,_temp_pw
      0006BF 85*32*20         [24] 2867 	mov	(_PW + 1),(_temp_pw + 1)
                           0006C2  2868 	C$Lab_6_New.c$212$1$177 ==.
                                   2869 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:212: PCA0CPL0 = 0xFFFF - PW;
      0006C2 AF*1F            [24] 2870 	mov	r7,_PW
      0006C4 74 FF            [12] 2871 	mov	a,#0xff
      0006C6 C3               [12] 2872 	clr	c
      0006C7 9F               [12] 2873 	subb	a,r7
      0006C8 F5 EA            [12] 2874 	mov	_PCA0CPL0,a
                           0006CA  2875 	C$Lab_6_New.c$213$1$177 ==.
                                   2876 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:213: PCA0CPH0 = (0xFFFF - PW) >> 8;
      0006CA 74 FF            [12] 2877 	mov	a,#0xff
      0006CC C3               [12] 2878 	clr	c
      0006CD 95*1F            [12] 2879 	subb	a,_PW
      0006CF 74 FF            [12] 2880 	mov	a,#0xff
      0006D1 95*20            [12] 2881 	subb	a,(_PW + 1)
      0006D3 FF               [12] 2882 	mov	r7,a
      0006D4 8F FA            [24] 2883 	mov	_PCA0CPH0,r7
                           0006D6  2884 	C$Lab_6_New.c$214$1$177 ==.
                                   2885 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:214: new_heading = 0;
      0006D6 E4               [12] 2886 	clr	a
      0006D7 F5*27            [12] 2887 	mov	_new_heading,a
      0006D9 F5*28            [12] 2888 	mov	(_new_heading + 1),a
                           0006DB  2889 	C$Lab_6_New.c$215$1$177 ==.
                           0006DB  2890 	XG$errHeading2$0$0 ==.
      0006DB 22               [24] 2891 	ret
                                   2892 ;------------------------------------------------------------
                                   2893 ;Allocation info for local variables in function 'errHeading3'
                                   2894 ;------------------------------------------------------------
                           0006DC  2895 	G$errHeading3$0$0 ==.
                           0006DC  2896 	C$Lab_6_New.c$217$1$177 ==.
                                   2897 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:217: void errHeading3(void)		//rudder fan, CEX0
                                   2898 ;	-----------------------------------------
                                   2899 ;	 function errHeading3
                                   2900 ;	-----------------------------------------
      0006DC                       2901 _errHeading3:
                           0006DC  2902 	C$Lab_6_New.c$219$1$181 ==.
                                   2903 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:219: error = desired_heading - heading;		
      0006DC AE*25            [24] 2904 	mov	r6,_heading
      0006DE AF*26            [24] 2905 	mov	r7,(_heading + 1)
      0006E0 E5*29            [12] 2906 	mov	a,_desired_heading
      0006E2 C3               [12] 2907 	clr	c
      0006E3 9E               [12] 2908 	subb	a,r6
      0006E4 F5*2B            [12] 2909 	mov	_error,a
      0006E6 E5*2A            [12] 2910 	mov	a,(_desired_heading + 1)
      0006E8 9F               [12] 2911 	subb	a,r7
      0006E9 F5*2C            [12] 2912 	mov	(_error + 1),a
                           0006EB  2913 	C$Lab_6_New.c$220$1$181 ==.
                                   2914 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:220: if(error > 1800) 								//fixes issue when desired and actual heading are very far away from each other
      0006EB C3               [12] 2915 	clr	c
      0006EC 74 08            [12] 2916 	mov	a,#0x08
      0006EE 95*2B            [12] 2917 	subb	a,_error
      0006F0 74 87            [12] 2918 	mov	a,#(0x07 ^ 0x80)
      0006F2 85*2C F0         [24] 2919 	mov	b,(_error + 1)
      0006F5 63 F0 80         [24] 2920 	xrl	b,#0x80
      0006F8 95 F0            [12] 2921 	subb	a,b
      0006FA 50 0E            [24] 2922 	jnc	00104$
                           0006FC  2923 	C$Lab_6_New.c$222$2$182 ==.
                                   2924 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:222: error -= 3600;
      0006FC E5*2B            [12] 2925 	mov	a,_error
      0006FE 24 F0            [12] 2926 	add	a,#0xf0
      000700 F5*2B            [12] 2927 	mov	_error,a
      000702 E5*2C            [12] 2928 	mov	a,(_error + 1)
      000704 34 F1            [12] 2929 	addc	a,#0xf1
      000706 F5*2C            [12] 2930 	mov	(_error + 1),a
      000708 80 19            [24] 2931 	sjmp	00105$
      00070A                       2932 00104$:
                           00070A  2933 	C$Lab_6_New.c$224$1$181 ==.
                                   2934 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:224: else if(error < -1800) 
      00070A C3               [12] 2935 	clr	c
      00070B E5*2B            [12] 2936 	mov	a,_error
      00070D 94 F8            [12] 2937 	subb	a,#0xf8
      00070F E5*2C            [12] 2938 	mov	a,(_error + 1)
      000711 64 80            [12] 2939 	xrl	a,#0x80
      000713 94 78            [12] 2940 	subb	a,#0x78
      000715 50 0C            [24] 2941 	jnc	00105$
                           000717  2942 	C$Lab_6_New.c$226$2$183 ==.
                                   2943 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:226: error += 3600;
      000717 74 10            [12] 2944 	mov	a,#0x10
      000719 25*2B            [12] 2945 	add	a,_error
      00071B F5*2B            [12] 2946 	mov	_error,a
      00071D 74 0E            [12] 2947 	mov	a,#0x0e
      00071F 35*2C            [12] 2948 	addc	a,(_error + 1)
      000721 F5*2C            [12] 2949 	mov	(_error + 1),a
      000723                       2950 00105$:
                           000723  2951 	C$Lab_6_New.c$231$1$181 ==.
                                   2952 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:231: PW = temp_pw;									//saves the equation value as the current pulsewidth
      000723 85*31*1F         [24] 2953 	mov	_PW,_temp_pw
      000726 85*32*20         [24] 2954 	mov	(_PW + 1),(_temp_pw + 1)
                           000729  2955 	C$Lab_6_New.c$232$1$181 ==.
                                   2956 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:232: PCA0CPL0 = 0xFFFF - PW;
      000729 AF*1F            [24] 2957 	mov	r7,_PW
      00072B 74 FF            [12] 2958 	mov	a,#0xff
      00072D C3               [12] 2959 	clr	c
      00072E 9F               [12] 2960 	subb	a,r7
      00072F F5 EA            [12] 2961 	mov	_PCA0CPL0,a
                           000731  2962 	C$Lab_6_New.c$233$1$181 ==.
                                   2963 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:233: PCA0CPH0 = (0xFFFF - PW) >> 8;
      000731 74 FF            [12] 2964 	mov	a,#0xff
      000733 C3               [12] 2965 	clr	c
      000734 95*1F            [12] 2966 	subb	a,_PW
      000736 74 FF            [12] 2967 	mov	a,#0xff
      000738 95*20            [12] 2968 	subb	a,(_PW + 1)
      00073A FF               [12] 2969 	mov	r7,a
      00073B 8F FA            [24] 2970 	mov	_PCA0CPH0,r7
                           00073D  2971 	C$Lab_6_New.c$234$1$181 ==.
                                   2972 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:234: new_heading = 0;
      00073D E4               [12] 2973 	clr	a
      00073E F5*27            [12] 2974 	mov	_new_heading,a
      000740 F5*28            [12] 2975 	mov	(_new_heading + 1),a
                           000742  2976 	C$Lab_6_New.c$235$1$181 ==.
                           000742  2977 	XG$errHeading3$0$0 ==.
      000742 22               [24] 2978 	ret
                                   2979 ;------------------------------------------------------------
                                   2980 ;Allocation info for local variables in function 'getGain'
                                   2981 ;------------------------------------------------------------
                           000743  2982 	G$getGain$0$0 ==.
                           000743  2983 	C$Lab_6_New.c$240$1$181 ==.
                                   2984 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:240: void getGain(void) 
                                   2985 ;	-----------------------------------------
                                   2986 ;	 function getGain
                                   2987 ;	-----------------------------------------
      000743                       2988 _getGain:
                           000743  2989 	C$Lab_6_New.c$242$1$185 ==.
                                   2990 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:242: lcd_clear();								//clears lcd screen
      000743 12r01r00         [24] 2991 	lcall	_lcd_clear
                           000746  2992 	C$Lab_6_New.c$243$1$185 ==.
                                   2993 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:243: lcd_print("Input Proportional Gain: \r");		//gets input of desired drive gain from keypad and saves to variable
      000746 74r29            [12] 2994 	mov	a,#___str_3
      000748 C0 E0            [24] 2995 	push	acc
      00074A 74s00            [12] 2996 	mov	a,#(___str_3 >> 8)
      00074C C0 E0            [24] 2997 	push	acc
      00074E 74 80            [12] 2998 	mov	a,#0x80
      000750 C0 E0            [24] 2999 	push	acc
      000752 12r00r7B         [24] 3000 	lcall	_lcd_print
      000755 15 81            [12] 3001 	dec	sp
      000757 15 81            [12] 3002 	dec	sp
      000759 15 81            [12] 3003 	dec	sp
                           00075B  3004 	C$Lab_6_New.c$244$1$185 ==.
                                   3005 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:244: pk = kpd_input(1);
      00075B 75 82 01         [24] 3006 	mov	dpl,#0x01
      00075E 12r01rB8         [24] 3007 	lcall	_kpd_input
      000761 85 82*2D         [24] 3008 	mov	_pk,dpl
      000764 85 83*2E         [24] 3009 	mov	(_pk + 1),dph
                           000767  3010 	C$Lab_6_New.c$245$1$185 ==.
                                   3011 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:245: printf("Proportional Gain: %d \r\n", pk);
      000767 C0*2D            [24] 3012 	push	_pk
      000769 C0*2E            [24] 3013 	push	(_pk + 1)
      00076B 74r44            [12] 3014 	mov	a,#___str_4
      00076D C0 E0            [24] 3015 	push	acc
      00076F 74s00            [12] 3016 	mov	a,#(___str_4 >> 8)
      000771 C0 E0            [24] 3017 	push	acc
      000773 74 80            [12] 3018 	mov	a,#0x80
      000775 C0 E0            [24] 3019 	push	acc
      000777 12r00r00         [24] 3020 	lcall	_printf
      00077A E5 81            [12] 3021 	mov	a,sp
      00077C 24 FB            [12] 3022 	add	a,#0xfb
      00077E F5 81            [12] 3023 	mov	sp,a
                           000780  3024 	C$Lab_6_New.c$246$1$185 ==.
                                   3025 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:246: printcounts = 0;
      000780 75*24 00         [24] 3026 	mov	_printcounts,#0x00
                           000783  3027 	C$Lab_6_New.c$247$1$185 ==.
                                   3028 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:247: while(printcounts < 100);
      000783                       3029 00101$:
      000783 74 9C            [12] 3030 	mov	a,#0x100 - 0x64
      000785 25*24            [12] 3031 	add	a,_printcounts
      000787 50 FA            [24] 3032 	jnc	00101$
                           000789  3033 	C$Lab_6_New.c$248$1$185 ==.
                                   3034 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:248: lcd_clear(); 						
      000789 12r01r00         [24] 3035 	lcall	_lcd_clear
                           00078C  3036 	C$Lab_6_New.c$250$1$185 ==.
                                   3037 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:250: lcd_print("Input Derivative Gain: \r");		//gets input of steering from keypad and saves to variable
      00078C 74r5D            [12] 3038 	mov	a,#___str_5
      00078E C0 E0            [24] 3039 	push	acc
      000790 74s00            [12] 3040 	mov	a,#(___str_5 >> 8)
      000792 C0 E0            [24] 3041 	push	acc
      000794 74 80            [12] 3042 	mov	a,#0x80
      000796 C0 E0            [24] 3043 	push	acc
      000798 12r00r7B         [24] 3044 	lcall	_lcd_print
      00079B 15 81            [12] 3045 	dec	sp
      00079D 15 81            [12] 3046 	dec	sp
      00079F 15 81            [12] 3047 	dec	sp
                           0007A1  3048 	C$Lab_6_New.c$251$1$185 ==.
                                   3049 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:251: dk = kpd_input(1);
      0007A1 75 82 01         [24] 3050 	mov	dpl,#0x01
      0007A4 12r01rB8         [24] 3051 	lcall	_kpd_input
      0007A7 85 82*2F         [24] 3052 	mov	_dk,dpl
      0007AA 85 83*30         [24] 3053 	mov	(_dk + 1),dph
                           0007AD  3054 	C$Lab_6_New.c$252$1$185 ==.
                                   3055 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:252: printf("Derivative Gain: %d \r\n", dk);
      0007AD C0*2F            [24] 3056 	push	_dk
      0007AF C0*30            [24] 3057 	push	(_dk + 1)
      0007B1 74r76            [12] 3058 	mov	a,#___str_6
      0007B3 C0 E0            [24] 3059 	push	acc
      0007B5 74s00            [12] 3060 	mov	a,#(___str_6 >> 8)
      0007B7 C0 E0            [24] 3061 	push	acc
      0007B9 74 80            [12] 3062 	mov	a,#0x80
      0007BB C0 E0            [24] 3063 	push	acc
      0007BD 12r00r00         [24] 3064 	lcall	_printf
      0007C0 E5 81            [12] 3065 	mov	a,sp
      0007C2 24 FB            [12] 3066 	add	a,#0xfb
      0007C4 F5 81            [12] 3067 	mov	sp,a
                           0007C6  3068 	C$Lab_6_New.c$253$1$185 ==.
                                   3069 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:253: printcounts = 0;
      0007C6 75*24 00         [24] 3070 	mov	_printcounts,#0x00
                           0007C9  3071 	C$Lab_6_New.c$254$1$185 ==.
                                   3072 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:254: while(printcounts < 100);
      0007C9                       3073 00104$:
      0007C9 74 9C            [12] 3074 	mov	a,#0x100 - 0x64
      0007CB 25*24            [12] 3075 	add	a,_printcounts
      0007CD 50 FA            [24] 3076 	jnc	00104$
                           0007CF  3077 	C$Lab_6_New.c$255$1$185 ==.
                                   3078 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:255: lcd_clear();
      0007CF 12r01r00         [24] 3079 	lcall	_lcd_clear
                           0007D2  3080 	C$Lab_6_New.c$256$1$185 ==.
                           0007D2  3081 	XG$getGain$0$0 ==.
      0007D2 22               [24] 3082 	ret
                                   3083 ;------------------------------------------------------------
                                   3084 ;Allocation info for local variables in function 'getHeading'
                                   3085 ;------------------------------------------------------------
                           0007D3  3086 	G$getHeading$0$0 ==.
                           0007D3  3087 	C$Lab_6_New.c$258$1$185 ==.
                                   3088 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:258: void getHeading(void)
                                   3089 ;	-----------------------------------------
                                   3090 ;	 function getHeading
                                   3091 ;	-----------------------------------------
      0007D3                       3092 _getHeading:
                           0007D3  3093 	C$Lab_6_New.c$260$1$187 ==.
                                   3094 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:260: lcd_clear();									//gets desired heading
      0007D3 12r01r00         [24] 3095 	lcall	_lcd_clear
                           0007D6  3096 	C$Lab_6_New.c$261$1$187 ==.
                                   3097 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:261: lcd_print("Input Heading: \r");
      0007D6 74r8D            [12] 3098 	mov	a,#___str_7
      0007D8 C0 E0            [24] 3099 	push	acc
      0007DA 74s00            [12] 3100 	mov	a,#(___str_7 >> 8)
      0007DC C0 E0            [24] 3101 	push	acc
      0007DE 74 80            [12] 3102 	mov	a,#0x80
      0007E0 C0 E0            [24] 3103 	push	acc
      0007E2 12r00r7B         [24] 3104 	lcall	_lcd_print
      0007E5 15 81            [12] 3105 	dec	sp
      0007E7 15 81            [12] 3106 	dec	sp
      0007E9 15 81            [12] 3107 	dec	sp
                           0007EB  3108 	C$Lab_6_New.c$262$1$187 ==.
                                   3109 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:262: desired_heading = kpd_input(1);
      0007EB 75 82 01         [24] 3110 	mov	dpl,#0x01
      0007EE 12r01rB8         [24] 3111 	lcall	_kpd_input
      0007F1 85 82*29         [24] 3112 	mov	_desired_heading,dpl
      0007F4 85 83*2A         [24] 3113 	mov	(_desired_heading + 1),dph
                           0007F7  3114 	C$Lab_6_New.c$263$1$187 ==.
                                   3115 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:263: printf("Desired Heading: %d \r\n", desired_heading);
      0007F7 C0*29            [24] 3116 	push	_desired_heading
      0007F9 C0*2A            [24] 3117 	push	(_desired_heading + 1)
      0007FB 74r9E            [12] 3118 	mov	a,#___str_8
      0007FD C0 E0            [24] 3119 	push	acc
      0007FF 74s00            [12] 3120 	mov	a,#(___str_8 >> 8)
      000801 C0 E0            [24] 3121 	push	acc
      000803 74 80            [12] 3122 	mov	a,#0x80
      000805 C0 E0            [24] 3123 	push	acc
      000807 12r00r00         [24] 3124 	lcall	_printf
      00080A E5 81            [12] 3125 	mov	a,sp
      00080C 24 FB            [12] 3126 	add	a,#0xfb
      00080E F5 81            [12] 3127 	mov	sp,a
                           000810  3128 	C$Lab_6_New.c$264$1$187 ==.
                                   3129 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:264: printcounts = 0;
      000810 75*24 00         [24] 3130 	mov	_printcounts,#0x00
                           000813  3131 	C$Lab_6_New.c$265$1$187 ==.
                                   3132 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:265: while(printcounts < 100);
      000813                       3133 00101$:
      000813 74 9C            [12] 3134 	mov	a,#0x100 - 0x64
      000815 25*24            [12] 3135 	add	a,_printcounts
      000817 50 FA            [24] 3136 	jnc	00101$
                           000819  3137 	C$Lab_6_New.c$266$1$187 ==.
                                   3138 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:266: lcd_clear();
      000819 12r01r00         [24] 3139 	lcall	_lcd_clear
                           00081C  3140 	C$Lab_6_New.c$267$1$187 ==.
                           00081C  3141 	XG$getHeading$0$0 ==.
      00081C 22               [24] 3142 	ret
                                   3143 ;------------------------------------------------------------
                                   3144 ;Allocation info for local variables in function 'printData'
                                   3145 ;------------------------------------------------------------
                           00081D  3146 	G$printData$0$0 ==.
                           00081D  3147 	C$Lab_6_New.c$273$1$187 ==.
                                   3148 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:273: void printData(void)								//prints necessary values
                                   3149 ;	-----------------------------------------
                                   3150 ;	 function printData
                                   3151 ;	-----------------------------------------
      00081D                       3152 _printData:
                           00081D  3153 	C$Lab_6_New.c$275$1$189 ==.
                                   3154 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:275: printf("Desired Heading   Actual Heading   Ranger Reading   Heading Angle Adjustment   Thrust Pulsewidth   Battery Voltage \r\n");
      00081D 74rB5            [12] 3155 	mov	a,#___str_9
      00081F C0 E0            [24] 3156 	push	acc
      000821 74s00            [12] 3157 	mov	a,#(___str_9 >> 8)
      000823 C0 E0            [24] 3158 	push	acc
      000825 74 80            [12] 3159 	mov	a,#0x80
      000827 C0 E0            [24] 3160 	push	acc
      000829 12r00r00         [24] 3161 	lcall	_printf
      00082C 15 81            [12] 3162 	dec	sp
      00082E 15 81            [12] 3163 	dec	sp
      000830 15 81            [12] 3164 	dec	sp
                           000832  3165 	C$Lab_6_New.c$276$1$189 ==.
                                   3166 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:276: printf("%8.3d,   %8.3d,   %8.3d,   %8.3d,   %8.3d,   %8.3d \r\n\n", desired_heading, heading, distance, error, PW, BAT);
      000832 A2 93            [12] 3167 	mov	c,_BAT
      000834 E4               [12] 3168 	clr	a
      000835 33               [12] 3169 	rlc	a
      000836 FE               [12] 3170 	mov	r6,a
      000837 7F 00            [12] 3171 	mov	r7,#0x00
      000839 C0 06            [24] 3172 	push	ar6
      00083B C0 07            [24] 3173 	push	ar7
      00083D C0*1F            [24] 3174 	push	_PW
      00083F C0*20            [24] 3175 	push	(_PW + 1)
      000841 C0*2B            [24] 3176 	push	_error
      000843 C0*2C            [24] 3177 	push	(_error + 1)
      000845 C0*15            [24] 3178 	push	_distance
      000847 C0*16            [24] 3179 	push	(_distance + 1)
      000849 C0*25            [24] 3180 	push	_heading
      00084B C0*26            [24] 3181 	push	(_heading + 1)
      00084D C0*29            [24] 3182 	push	_desired_heading
      00084F C0*2A            [24] 3183 	push	(_desired_heading + 1)
      000851 74r2B            [12] 3184 	mov	a,#___str_10
      000853 C0 E0            [24] 3185 	push	acc
      000855 74s01            [12] 3186 	mov	a,#(___str_10 >> 8)
      000857 C0 E0            [24] 3187 	push	acc
      000859 74 80            [12] 3188 	mov	a,#0x80
      00085B C0 E0            [24] 3189 	push	acc
      00085D 12r00r00         [24] 3190 	lcall	_printf
      000860 E5 81            [12] 3191 	mov	a,sp
      000862 24 F1            [12] 3192 	add	a,#0xf1
      000864 F5 81            [12] 3193 	mov	sp,a
                           000866  3194 	C$Lab_6_New.c$277$1$189 ==.
                           000866  3195 	XG$printData$0$0 ==.
      000866 22               [24] 3196 	ret
                                   3197 ;------------------------------------------------------------
                                   3198 ;Allocation info for local variables in function 'Port_Init'
                                   3199 ;------------------------------------------------------------
                           000867  3200 	G$Port_Init$0$0 ==.
                           000867  3201 	C$Lab_6_New.c$282$1$189 ==.
                                   3202 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:282: void Port_Init()
                                   3203 ;	-----------------------------------------
                                   3204 ;	 function Port_Init
                                   3205 ;	-----------------------------------------
      000867                       3206 _Port_Init:
                           000867  3207 	C$Lab_6_New.c$284$1$190 ==.
                                   3208 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:284: P0MDOUT &= 0x02;
      000867 53 A4 02         [24] 3209 	anl	_P0MDOUT,#0x02
                           00086A  3210 	C$Lab_6_New.c$285$1$190 ==.
                                   3211 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:285: P1MDOUT &= ~0x08;
      00086A 53 A5 F7         [24] 3212 	anl	_P1MDOUT,#0xf7
                           00086D  3213 	C$Lab_6_New.c$286$1$190 ==.
                                   3214 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:286: P1MDIN |= 0x08;
      00086D 43 BD 08         [24] 3215 	orl	_P1MDIN,#0x08
                           000870  3216 	C$Lab_6_New.c$287$1$190 ==.
                                   3217 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:287: P1 = 0x08;
      000870 75 90 08         [24] 3218 	mov	_P1,#0x08
                           000873  3219 	C$Lab_6_New.c$288$1$190 ==.
                                   3220 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:288: P3MDOUT &= 0x00;
      000873 E5 A7            [12] 3221 	mov	a,_P3MDOUT
      000875 75 A7 00         [24] 3222 	mov	_P3MDOUT,#0x00
                           000878  3223 	C$Lab_6_New.c$289$1$190 ==.
                                   3224 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:289: P3 = 0xFF;
      000878 75 B0 FF         [24] 3225 	mov	_P3,#0xff
                           00087B  3226 	C$Lab_6_New.c$290$1$190 ==.
                           00087B  3227 	XG$Port_Init$0$0 ==.
      00087B 22               [24] 3228 	ret
                                   3229 ;------------------------------------------------------------
                                   3230 ;Allocation info for local variables in function 'XBR0_Init'
                                   3231 ;------------------------------------------------------------
                           00087C  3232 	G$XBR0_Init$0$0 ==.
                           00087C  3233 	C$Lab_6_New.c$294$1$190 ==.
                                   3234 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:294: void XBR0_Init()
                                   3235 ;	-----------------------------------------
                                   3236 ;	 function XBR0_Init
                                   3237 ;	-----------------------------------------
      00087C                       3238 _XBR0_Init:
                           00087C  3239 	C$Lab_6_New.c$296$1$191 ==.
                                   3240 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:296: XBR0 = 0x25;
      00087C 75 E1 25         [24] 3241 	mov	_XBR0,#0x25
                           00087F  3242 	C$Lab_6_New.c$297$1$191 ==.
                           00087F  3243 	XG$XBR0_Init$0$0 ==.
      00087F 22               [24] 3244 	ret
                                   3245 ;------------------------------------------------------------
                                   3246 ;Allocation info for local variables in function 'PCA_Init'
                                   3247 ;------------------------------------------------------------
                           000880  3248 	G$PCA_Init$0$0 ==.
                           000880  3249 	C$Lab_6_New.c$301$1$191 ==.
                                   3250 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:301: void PCA_Init(void)
                                   3251 ;	-----------------------------------------
                                   3252 ;	 function PCA_Init
                                   3253 ;	-----------------------------------------
      000880                       3254 _PCA_Init:
                           000880  3255 	C$Lab_6_New.c$303$1$193 ==.
                                   3256 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:303: PCA0MD = 0x81;	
      000880 75 D9 81         [24] 3257 	mov	_PCA0MD,#0x81
                           000883  3258 	C$Lab_6_New.c$304$1$193 ==.
                                   3259 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:304: PCA0CPM0 = 0xC2;	//SYSCLK/12
      000883 75 DA C2         [24] 3260 	mov	_PCA0CPM0,#0xc2
                           000886  3261 	C$Lab_6_New.c$305$1$193 ==.
                                   3262 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:305: PCA0CPM1 = 0xC2;	//CCM2 in 16 bit compare mode
      000886 75 DB C2         [24] 3263 	mov	_PCA0CPM1,#0xc2
                           000889  3264 	C$Lab_6_New.c$306$1$193 ==.
                                   3265 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:306: PCA0CPM2 = 0xC2;
      000889 75 DC C2         [24] 3266 	mov	_PCA0CPM2,#0xc2
                           00088C  3267 	C$Lab_6_New.c$307$1$193 ==.
                                   3268 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:307: PCA0CPM3 = 0xC2;
      00088C 75 DD C2         [24] 3269 	mov	_PCA0CPM3,#0xc2
                           00088F  3270 	C$Lab_6_New.c$308$1$193 ==.
                                   3271 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:308: PCA0CN = 0x40; 		//enable PCA counter
      00088F 75 D8 40         [24] 3272 	mov	_PCA0CN,#0x40
                           000892  3273 	C$Lab_6_New.c$309$1$193 ==.
                           000892  3274 	XG$PCA_Init$0$0 ==.
      000892 22               [24] 3275 	ret
                                   3276 ;------------------------------------------------------------
                                   3277 ;Allocation info for local variables in function 'Interrupt_Init'
                                   3278 ;------------------------------------------------------------
                           000893  3279 	G$Interrupt_Init$0$0 ==.
                           000893  3280 	C$Lab_6_New.c$313$1$193 ==.
                                   3281 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:313: void Interrupt_Init()
                                   3282 ;	-----------------------------------------
                                   3283 ;	 function Interrupt_Init
                                   3284 ;	-----------------------------------------
      000893                       3285 _Interrupt_Init:
                           000893  3286 	C$Lab_6_New.c$315$1$194 ==.
                                   3287 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:315: EA = 1;			//enable global interrupts
      000893 D2 AF            [12] 3288 	setb	_EA
                           000895  3289 	C$Lab_6_New.c$316$1$194 ==.
                                   3290 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:316: EIE1 = 0x08;	//enable PCA interrupt
      000895 75 E6 08         [24] 3291 	mov	_EIE1,#0x08
                           000898  3292 	C$Lab_6_New.c$317$1$194 ==.
                           000898  3293 	XG$Interrupt_Init$0$0 ==.
      000898 22               [24] 3294 	ret
                                   3295 ;------------------------------------------------------------
                                   3296 ;Allocation info for local variables in function 'PCA_ISR'
                                   3297 ;------------------------------------------------------------
                           000899  3298 	G$PCA_ISR$0$0 ==.
                           000899  3299 	C$Lab_6_New.c$321$1$194 ==.
                                   3300 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:321: void PCA_ISR (void) __interrupt 9
                                   3301 ;	-----------------------------------------
                                   3302 ;	 function PCA_ISR
                                   3303 ;	-----------------------------------------
      000899                       3304 _PCA_ISR:
      000899 C0 E0            [24] 3305 	push	acc
      00089B C0 D0            [24] 3306 	push	psw
                           00089D  3307 	C$Lab_6_New.c$323$1$196 ==.
                                   3308 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:323: counts++;
      00089D 05*21            [12] 3309 	inc	_counts
      00089F E4               [12] 3310 	clr	a
      0008A0 B5*21 02         [24] 3311 	cjne	a,_counts,00113$
      0008A3 05*22            [12] 3312 	inc	(_counts + 1)
      0008A5                       3313 00113$:
                           0008A5  3314 	C$Lab_6_New.c$324$1$196 ==.
                                   3315 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:324: ranger_count++;
      0008A5 05*17            [12] 3316 	inc	_ranger_count
                           0008A7  3317 	C$Lab_6_New.c$325$1$196 ==.
                                   3318 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:325: h_count++;
      0008A7 05*23            [12] 3319 	inc	_h_count
                           0008A9  3320 	C$Lab_6_New.c$326$1$196 ==.
                                   3321 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:326: printcounts++;
      0008A9 05*24            [12] 3322 	inc	_printcounts
                           0008AB  3323 	C$Lab_6_New.c$327$1$196 ==.
                                   3324 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:327: PCA0 = 28672;			//20ms start value
      0008AB 75 E9 00         [24] 3325 	mov	((_PCA0 >> 0) & 0xFF),#0x00
      0008AE 75 F9 70         [24] 3326 	mov	((_PCA0 >> 8) & 0xFF),#0x70
                           0008B1  3327 	C$Lab_6_New.c$328$1$196 ==.
                                   3328 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:328: CF = 0;
      0008B1 C2 DF            [12] 3329 	clr	_CF
                           0008B3  3330 	C$Lab_6_New.c$329$1$196 ==.
                                   3331 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:329: PCA0CN &= 0x40;
      0008B3 53 D8 40         [24] 3332 	anl	_PCA0CN,#0x40
                           0008B6  3333 	C$Lab_6_New.c$332$1$196 ==.
                                   3334 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:332: if (ranger_count == 4)	//80ms wait
      0008B6 74 04            [12] 3335 	mov	a,#0x04
      0008B8 B5*17 06         [24] 3336 	cjne	a,_ranger_count,00102$
                           0008BB  3337 	C$Lab_6_New.c$334$2$197 ==.
                                   3338 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:334: new_range = 1;
      0008BB 75*18 01         [24] 3339 	mov	_new_range,#0x01
                           0008BE  3340 	C$Lab_6_New.c$335$2$197 ==.
                                   3341 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:335: ranger_count = 0;
      0008BE 75*17 00         [24] 3342 	mov	_ranger_count,#0x00
      0008C1                       3343 00102$:
                           0008C1  3344 	C$Lab_6_New.c$338$1$196 ==.
                                   3345 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:338: if (h_count == 3) 		//60ms wait
      0008C1 74 03            [12] 3346 	mov	a,#0x03
      0008C3 B5*23 09         [24] 3347 	cjne	a,_h_count,00105$
                           0008C6  3348 	C$Lab_6_New.c$340$2$198 ==.
                                   3349 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:340: new_heading = 1;
      0008C6 75*27 01         [24] 3350 	mov	_new_heading,#0x01
      0008C9 75*28 00         [24] 3351 	mov	(_new_heading + 1),#0x00
                           0008CC  3352 	C$Lab_6_New.c$341$2$198 ==.
                                   3353 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:341: h_count = 0;
      0008CC 75*23 00         [24] 3354 	mov	_h_count,#0x00
      0008CF                       3355 00105$:
      0008CF D0 D0            [24] 3356 	pop	psw
      0008D1 D0 E0            [24] 3357 	pop	acc
                           0008D3  3358 	C$Lab_6_New.c$343$1$196 ==.
                           0008D3  3359 	XG$PCA_ISR$0$0 ==.
      0008D3 32               [24] 3360 	reti
                                   3361 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                   3362 ;	eliminated unneeded push/pop dpl
                                   3363 ;	eliminated unneeded push/pop dph
                                   3364 ;	eliminated unneeded push/pop b
                                   3365 ;------------------------------------------------------------
                                   3366 ;Allocation info for local variables in function 'SMB_Init'
                                   3367 ;------------------------------------------------------------
                           0008D4  3368 	G$SMB_Init$0$0 ==.
                           0008D4  3369 	C$Lab_6_New.c$346$1$196 ==.
                                   3370 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:346: void SMB_Init(void)
                                   3371 ;	-----------------------------------------
                                   3372 ;	 function SMB_Init
                                   3373 ;	-----------------------------------------
      0008D4                       3374 _SMB_Init:
                           0008D4  3375 	C$Lab_6_New.c$348$1$200 ==.
                                   3376 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:348: SMB0CR=0x93; 	/* set SCL to 100KHz (actual freq ~ 94,594Hz)*/
      0008D4 75 CF 93         [24] 3377 	mov	_SMB0CR,#0x93
                           0008D7  3378 	C$Lab_6_New.c$349$1$200 ==.
                                   3379 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:349: ENSMB=1; 		/* bit 6 of SMB0CN, enable the SMBus */
      0008D7 D2 C6            [12] 3380 	setb	_ENSMB
                           0008D9  3381 	C$Lab_6_New.c$350$1$200 ==.
                           0008D9  3382 	XG$SMB_Init$0$0 ==.
      0008D9 22               [24] 3383 	ret
                                   3384 ;------------------------------------------------------------
                                   3385 ;Allocation info for local variables in function 'ADC_Init'
                                   3386 ;------------------------------------------------------------
                           0008DA  3387 	G$ADC_Init$0$0 ==.
                           0008DA  3388 	C$Lab_6_New.c$353$1$200 ==.
                                   3389 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:353: void ADC_Init(void)
                                   3390 ;	-----------------------------------------
                                   3391 ;	 function ADC_Init
                                   3392 ;	-----------------------------------------
      0008DA                       3393 _ADC_Init:
                           0008DA  3394 	C$Lab_6_New.c$356$1$202 ==.
                                   3395 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:356: REF0CN = 0x03;  //set VREF to internal pin not external
      0008DA 75 D1 03         [24] 3396 	mov	_REF0CN,#0x03
                           0008DD  3397 	C$Lab_6_New.c$357$1$202 ==.
                                   3398 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:357: ADC1CN = 0x80;  //set ADC1 to active
      0008DD 75 AA 80         [24] 3399 	mov	_ADC1CN,#0x80
                           0008E0  3400 	C$Lab_6_New.c$358$1$202 ==.
                                   3401 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:358: ADC1CF |= 0x01; //set gain to 1
      0008E0 43 AB 01         [24] 3402 	orl	_ADC1CF,#0x01
                           0008E3  3403 	C$Lab_6_New.c$359$1$202 ==.
                           0008E3  3404 	XG$ADC_Init$0$0 ==.
      0008E3 22               [24] 3405 	ret
                                   3406 ;------------------------------------------------------------
                                   3407 ;Allocation info for local variables in function 'read_AD_input'
                                   3408 ;------------------------------------------------------------
                                   3409 ;n                         Allocated to registers 
                                   3410 ;------------------------------------------------------------
                           0008E4  3411 	G$read_AD_input$0$0 ==.
                           0008E4  3412 	C$Lab_6_New.c$361$1$202 ==.
                                   3413 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:361: unsigned char read_AD_input(unsigned char n)
                                   3414 ;	-----------------------------------------
                                   3415 ;	 function read_AD_input
                                   3416 ;	-----------------------------------------
      0008E4                       3417 _read_AD_input:
      0008E4 85 82 AC         [24] 3418 	mov	_AMX1SL,dpl
                           0008E7  3419 	C$Lab_6_New.c$364$1$204 ==.
                                   3420 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:364: ADC1CN &= ~0x20; 				 //clears conversion flag
      0008E7 53 AA DF         [24] 3421 	anl	_ADC1CN,#0xdf
                           0008EA  3422 	C$Lab_6_New.c$365$1$204 ==.
                                   3423 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:365: ADC1CN |= 0x10; 				 //initiate A/D conversion
      0008EA 43 AA 10         [24] 3424 	orl	_ADC1CN,#0x10
                           0008ED  3425 	C$Lab_6_New.c$366$1$204 ==.
                                   3426 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:366: while ((ADC1CN & 0x20) == 0x00); //waits until the control register says conversion is complete
      0008ED                       3427 00101$:
      0008ED E5 AA            [12] 3428 	mov	a,_ADC1CN
      0008EF 30 E5 FB         [24] 3429 	jnb	acc.5,00101$
                           0008F2  3430 	C$Lab_6_New.c$367$1$204 ==.
                                   3431 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 3-2\Lab 6 New.c:367: return ADC1; 				   	 //outputs conversion's value
      0008F2 85 9C 82         [24] 3432 	mov	dpl,_ADC1
                           0008F5  3433 	C$Lab_6_New.c$368$1$204 ==.
                           0008F5  3434 	XG$read_AD_input$0$0 ==.
      0008F5 22               [24] 3435 	ret
                                   3436 	.area CSEG    (CODE)
                                   3437 	.area CONST   (CODE)
                           000000  3438 FLab_6_New$__str_0$0$0 == .
      000000                       3439 ___str_0:
      000000 0A                    3440 	.db 0x0a
      000001 54 79 70 65 20 64 69  3441 	.ascii "Type digits; end w/#"
             67 69 74 73 3B 20 65
             6E 64 20 77 2F 23
      000015 00                    3442 	.db 0x00
                           000016  3443 FLab_6_New$__str_1$0$0 == .
      000016                       3444 ___str_1:
      000016 20 20 20 20 20 25 63  3445 	.ascii "     %c%c%c%c%c"
             25 63 25 63 25 63 25
             63
      000025 00                    3446 	.db 0x00
                           000026  3447 FLab_6_New$__str_2$0$0 == .
      000026                       3448 ___str_2:
      000026 25 63                 3449 	.ascii "%c"
      000028 00                    3450 	.db 0x00
                           000029  3451 FLab_6_New$__str_3$0$0 == .
      000029                       3452 ___str_3:
      000029 49 6E 70 75 74 20 50  3453 	.ascii "Input Proportional Gain: "
             72 6F 70 6F 72 74 69
             6F 6E 61 6C 20 47 61
             69 6E 3A 20
      000042 0D                    3454 	.db 0x0d
      000043 00                    3455 	.db 0x00
                           000044  3456 FLab_6_New$__str_4$0$0 == .
      000044                       3457 ___str_4:
      000044 50 72 6F 70 6F 72 74  3458 	.ascii "Proportional Gain: %d "
             69 6F 6E 61 6C 20 47
             61 69 6E 3A 20 25 64
             20
      00005A 0D                    3459 	.db 0x0d
      00005B 0A                    3460 	.db 0x0a
      00005C 00                    3461 	.db 0x00
                           00005D  3462 FLab_6_New$__str_5$0$0 == .
      00005D                       3463 ___str_5:
      00005D 49 6E 70 75 74 20 44  3464 	.ascii "Input Derivative Gain: "
             65 72 69 76 61 74 69
             76 65 20 47 61 69 6E
             3A 20
      000074 0D                    3465 	.db 0x0d
      000075 00                    3466 	.db 0x00
                           000076  3467 FLab_6_New$__str_6$0$0 == .
      000076                       3468 ___str_6:
      000076 44 65 72 69 76 61 74  3469 	.ascii "Derivative Gain: %d "
             69 76 65 20 47 61 69
             6E 3A 20 25 64 20
      00008A 0D                    3470 	.db 0x0d
      00008B 0A                    3471 	.db 0x0a
      00008C 00                    3472 	.db 0x00
                           00008D  3473 FLab_6_New$__str_7$0$0 == .
      00008D                       3474 ___str_7:
      00008D 49 6E 70 75 74 20 48  3475 	.ascii "Input Heading: "
             65 61 64 69 6E 67 3A
             20
      00009C 0D                    3476 	.db 0x0d
      00009D 00                    3477 	.db 0x00
                           00009E  3478 FLab_6_New$__str_8$0$0 == .
      00009E                       3479 ___str_8:
      00009E 44 65 73 69 72 65 64  3480 	.ascii "Desired Heading: %d "
             20 48 65 61 64 69 6E
             67 3A 20 25 64 20
      0000B2 0D                    3481 	.db 0x0d
      0000B3 0A                    3482 	.db 0x0a
      0000B4 00                    3483 	.db 0x00
                           0000B5  3484 FLab_6_New$__str_9$0$0 == .
      0000B5                       3485 ___str_9:
      0000B5 44 65 73 69 72 65 64  3486 	.ascii "Desired Heading   Actual Heading   Ranger Reading   Heading "
             20 48 65 61 64 69 6E
             67 20 20 20 41 63 74
             75 61 6C 20 48 65 61
             64 69 6E 67 20 20 20
             52 61 6E 67 65 72 20
             52 65 61 64 69 6E 67
             20 20 20 48 65 61 64
             69 6E 67 20
      0000F1 41 6E 67 6C 65 20 41  3487 	.ascii "Angle Adjustment   Thrust Pulsewidth   Battery Voltage "
             64 6A 75 73 74 6D 65
             6E 74 20 20 20 54 68
             72 75 73 74 20 50 75
             6C 73 65 77 69 64 74
             68 20 20 20 42 61 74
             74 65 72 79 20 56 6F
             6C 74 61 67 65 20
      000128 0D                    3488 	.db 0x0d
      000129 0A                    3489 	.db 0x0a
      00012A 00                    3490 	.db 0x00
                           00012B  3491 FLab_6_New$__str_10$0$0 == .
      00012B                       3492 ___str_10:
      00012B 25 38 2E 33 64 2C 20  3493 	.ascii "%8.3d,   %8.3d,   %8.3d,   %8.3d,   %8.3d,   %8.3d "
             20 20 25 38 2E 33 64
             2C 20 20 20 25 38 2E
             33 64 2C 20 20 20 25
             38 2E 33 64 2C 20 20
             20 25 38 2E 33 64 2C
             20 20 20 25 38 2E 33
             64 20
      00015E 0D                    3494 	.db 0x0d
      00015F 0A                    3495 	.db 0x0a
      000160 0A                    3496 	.db 0x0a
      000161 00                    3497 	.db 0x00
                                   3498 	.area XINIT   (CODE)
                                   3499 	.area CABS    (ABS,CODE)

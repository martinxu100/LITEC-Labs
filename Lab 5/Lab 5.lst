                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.6.0 #9615 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module Lab_5
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _read_keypad
                                     13 	.globl _strlen
                                     14 	.globl _abs
                                     15 	.globl _putchar
                                     16 	.globl _vsprintf
                                     17 	.globl _printf
                                     18 	.globl _getchar_nw
                                     19 	.globl _Sys_Init
                                     20 	.globl _UART0_Init
                                     21 	.globl _SYSCLK_Init
                                     22 	.globl _POT
                                     23 	.globl _BLED2
                                     24 	.globl _BLED1
                                     25 	.globl _RSSS
                                     26 	.globl _FBSS
                                     27 	.globl _BUS_SCL
                                     28 	.globl _BUS_TOE
                                     29 	.globl _BUS_FTE
                                     30 	.globl _BUS_AA
                                     31 	.globl _BUS_INT
                                     32 	.globl _BUS_STOP
                                     33 	.globl _BUS_START
                                     34 	.globl _BUS_EN
                                     35 	.globl _BUS_BUSY
                                     36 	.globl _SPIF
                                     37 	.globl _WCOL
                                     38 	.globl _MODF
                                     39 	.globl _RXOVRN
                                     40 	.globl _TXBSY
                                     41 	.globl _SLVSEL
                                     42 	.globl _MSTEN
                                     43 	.globl _SPIEN
                                     44 	.globl _AD0EN
                                     45 	.globl _ADCEN
                                     46 	.globl _AD0TM
                                     47 	.globl _ADCTM
                                     48 	.globl _AD0INT
                                     49 	.globl _ADCINT
                                     50 	.globl _AD0BUSY
                                     51 	.globl _ADBUSY
                                     52 	.globl _AD0CM1
                                     53 	.globl _ADSTM1
                                     54 	.globl _AD0CM0
                                     55 	.globl _ADSTM0
                                     56 	.globl _AD0WINT
                                     57 	.globl _ADWINT
                                     58 	.globl _AD0LJST
                                     59 	.globl _ADLJST
                                     60 	.globl _CF
                                     61 	.globl _CR
                                     62 	.globl _CCF4
                                     63 	.globl _CCF3
                                     64 	.globl _CCF2
                                     65 	.globl _CCF1
                                     66 	.globl _CCF0
                                     67 	.globl _CY
                                     68 	.globl _AC
                                     69 	.globl _F0
                                     70 	.globl _RS1
                                     71 	.globl _RS0
                                     72 	.globl _OV
                                     73 	.globl _F1
                                     74 	.globl _P
                                     75 	.globl _TF2
                                     76 	.globl _EXF2
                                     77 	.globl _RCLK
                                     78 	.globl _TCLK
                                     79 	.globl _EXEN2
                                     80 	.globl _TR2
                                     81 	.globl _CT2
                                     82 	.globl _CPRL2
                                     83 	.globl _BUSY
                                     84 	.globl _ENSMB
                                     85 	.globl _STA
                                     86 	.globl _STO
                                     87 	.globl _SI
                                     88 	.globl _AA
                                     89 	.globl _SMBFTE
                                     90 	.globl _SMBTOE
                                     91 	.globl _PT2
                                     92 	.globl _PS
                                     93 	.globl _PS0
                                     94 	.globl _PT1
                                     95 	.globl _PX1
                                     96 	.globl _PT0
                                     97 	.globl _PX0
                                     98 	.globl _P3_7
                                     99 	.globl _P3_6
                                    100 	.globl _P3_5
                                    101 	.globl _P3_4
                                    102 	.globl _P3_3
                                    103 	.globl _P3_2
                                    104 	.globl _P3_1
                                    105 	.globl _P3_0
                                    106 	.globl _EA
                                    107 	.globl _ET2
                                    108 	.globl _ES
                                    109 	.globl _ES0
                                    110 	.globl _ET1
                                    111 	.globl _EX1
                                    112 	.globl _ET0
                                    113 	.globl _EX0
                                    114 	.globl _P2_7
                                    115 	.globl _P2_6
                                    116 	.globl _P2_5
                                    117 	.globl _P2_4
                                    118 	.globl _P2_3
                                    119 	.globl _P2_2
                                    120 	.globl _P2_1
                                    121 	.globl _P2_0
                                    122 	.globl _S0MODE
                                    123 	.globl _SM00
                                    124 	.globl _SM0
                                    125 	.globl _SM10
                                    126 	.globl _SM1
                                    127 	.globl _MCE0
                                    128 	.globl _SM20
                                    129 	.globl _SM2
                                    130 	.globl _REN0
                                    131 	.globl _REN
                                    132 	.globl _TB80
                                    133 	.globl _TB8
                                    134 	.globl _RB80
                                    135 	.globl _RB8
                                    136 	.globl _TI0
                                    137 	.globl _TI
                                    138 	.globl _RI0
                                    139 	.globl _RI
                                    140 	.globl _P1_7
                                    141 	.globl _P1_6
                                    142 	.globl _P1_5
                                    143 	.globl _P1_4
                                    144 	.globl _P1_3
                                    145 	.globl _P1_2
                                    146 	.globl _P1_1
                                    147 	.globl _P1_0
                                    148 	.globl _TF1
                                    149 	.globl _TR1
                                    150 	.globl _TF0
                                    151 	.globl _TR0
                                    152 	.globl _IE1
                                    153 	.globl _IT1
                                    154 	.globl _IE0
                                    155 	.globl _IT0
                                    156 	.globl _P0_7
                                    157 	.globl _P0_6
                                    158 	.globl _P0_5
                                    159 	.globl _P0_4
                                    160 	.globl _P0_3
                                    161 	.globl _P0_2
                                    162 	.globl _P0_1
                                    163 	.globl _P0_0
                                    164 	.globl _PCA0CP4
                                    165 	.globl _PCA0CP3
                                    166 	.globl _PCA0CP2
                                    167 	.globl _PCA0CP1
                                    168 	.globl _PCA0CP0
                                    169 	.globl _PCA0
                                    170 	.globl _DAC1
                                    171 	.globl _DAC0
                                    172 	.globl _ADC0LT
                                    173 	.globl _ADC0GT
                                    174 	.globl _ADC0
                                    175 	.globl _RCAP4
                                    176 	.globl _TMR4
                                    177 	.globl _TMR3RL
                                    178 	.globl _TMR3
                                    179 	.globl _RCAP2
                                    180 	.globl _TMR2
                                    181 	.globl _TMR1
                                    182 	.globl _TMR0
                                    183 	.globl _WDTCN
                                    184 	.globl _PCA0CPH4
                                    185 	.globl _PCA0CPH3
                                    186 	.globl _PCA0CPH2
                                    187 	.globl _PCA0CPH1
                                    188 	.globl _PCA0CPH0
                                    189 	.globl _PCA0H
                                    190 	.globl _SPI0CN
                                    191 	.globl _EIP2
                                    192 	.globl _EIP1
                                    193 	.globl _TH4
                                    194 	.globl _TL4
                                    195 	.globl _SADDR1
                                    196 	.globl _SBUF1
                                    197 	.globl _SCON1
                                    198 	.globl _B
                                    199 	.globl _RSTSRC
                                    200 	.globl _PCA0CPL4
                                    201 	.globl _PCA0CPL3
                                    202 	.globl _PCA0CPL2
                                    203 	.globl _PCA0CPL1
                                    204 	.globl _PCA0CPL0
                                    205 	.globl _PCA0L
                                    206 	.globl _ADC0CN
                                    207 	.globl _EIE2
                                    208 	.globl _EIE1
                                    209 	.globl _RCAP4H
                                    210 	.globl _RCAP4L
                                    211 	.globl _XBR2
                                    212 	.globl _XBR1
                                    213 	.globl _XBR0
                                    214 	.globl _ACC
                                    215 	.globl _PCA0CPM4
                                    216 	.globl _PCA0CPM3
                                    217 	.globl _PCA0CPM2
                                    218 	.globl _PCA0CPM1
                                    219 	.globl _PCA0CPM0
                                    220 	.globl _PCA0MD
                                    221 	.globl _PCA0CN
                                    222 	.globl _DAC1CN
                                    223 	.globl _DAC1H
                                    224 	.globl _DAC1L
                                    225 	.globl _DAC0CN
                                    226 	.globl _DAC0H
                                    227 	.globl _DAC0L
                                    228 	.globl _REF0CN
                                    229 	.globl _PSW
                                    230 	.globl _SMB0CR
                                    231 	.globl _TH2
                                    232 	.globl _TL2
                                    233 	.globl _RCAP2H
                                    234 	.globl _RCAP2L
                                    235 	.globl _T4CON
                                    236 	.globl _T2CON
                                    237 	.globl _ADC0LTH
                                    238 	.globl _ADC0LTL
                                    239 	.globl _ADC0GTH
                                    240 	.globl _ADC0GTL
                                    241 	.globl _SMB0ADR
                                    242 	.globl _SMB0DAT
                                    243 	.globl _SMB0STA
                                    244 	.globl _SMB0CN
                                    245 	.globl _ADC0H
                                    246 	.globl _ADC0L
                                    247 	.globl _P1MDIN
                                    248 	.globl _ADC0CF
                                    249 	.globl _AMX0SL
                                    250 	.globl _AMX0CF
                                    251 	.globl _SADEN0
                                    252 	.globl _IP
                                    253 	.globl _FLACL
                                    254 	.globl _FLSCL
                                    255 	.globl _P74OUT
                                    256 	.globl _OSCICN
                                    257 	.globl _OSCXCN
                                    258 	.globl _P3
                                    259 	.globl __XPAGE
                                    260 	.globl _EMI0CN
                                    261 	.globl _SADEN1
                                    262 	.globl _P3IF
                                    263 	.globl _AMX1SL
                                    264 	.globl _ADC1CF
                                    265 	.globl _ADC1CN
                                    266 	.globl _SADDR0
                                    267 	.globl _IE
                                    268 	.globl _P3MDOUT
                                    269 	.globl _PRT3CF
                                    270 	.globl _P2MDOUT
                                    271 	.globl _PRT2CF
                                    272 	.globl _P1MDOUT
                                    273 	.globl _PRT1CF
                                    274 	.globl _P0MDOUT
                                    275 	.globl _PRT0CF
                                    276 	.globl _EMI0CF
                                    277 	.globl _EMI0TC
                                    278 	.globl _P2
                                    279 	.globl _CPT1CN
                                    280 	.globl _CPT0CN
                                    281 	.globl _SPI0CKR
                                    282 	.globl _ADC1
                                    283 	.globl _SPI0DAT
                                    284 	.globl _SPI0CFG
                                    285 	.globl _SBUF0
                                    286 	.globl _SBUF
                                    287 	.globl _SCON0
                                    288 	.globl _SCON
                                    289 	.globl _P7
                                    290 	.globl _TMR3H
                                    291 	.globl _TMR3L
                                    292 	.globl _TMR3RLH
                                    293 	.globl _TMR3RLL
                                    294 	.globl _TMR3CN
                                    295 	.globl _P1
                                    296 	.globl _PSCTL
                                    297 	.globl _CKCON
                                    298 	.globl _TH1
                                    299 	.globl _TH0
                                    300 	.globl _TL1
                                    301 	.globl _TL0
                                    302 	.globl _TMOD
                                    303 	.globl _TCON
                                    304 	.globl _PCON
                                    305 	.globl _P6
                                    306 	.globl _P5
                                    307 	.globl _P4
                                    308 	.globl _DPH
                                    309 	.globl _DPL
                                    310 	.globl _SP
                                    311 	.globl _P0
                                    312 	.globl _avg_gy
                                    313 	.globl _avg_gx
                                    314 	.globl _y0
                                    315 	.globl _x0
                                    316 	.globl _gy
                                    317 	.globl _gx
                                    318 	.globl _new_reading
                                    319 	.globl _printcounts
                                    320 	.globl _counts
                                    321 	.globl _sv_temp_servo_pw
                                    322 	.globl _sv_k
                                    323 	.globl _SV_SERVO_PW
                                    324 	.globl _SV_PW_RIGHT
                                    325 	.globl _SV_PW_LEFT
                                    326 	.globl _SV_PW_CENTER
                                    327 	.globl _ADC_value
                                    328 	.globl _dr_ky
                                    329 	.globl _dr_kx
                                    330 	.globl _dr_DrivePW
                                    331 	.globl _dr_DrivePW_Max
                                    332 	.globl _dr_DrivePW_Min
                                    333 	.globl _dr_DrivePW_Neutral
                                    334 	.globl _i2c_read_data_PARM_4
                                    335 	.globl _i2c_read_data_PARM_3
                                    336 	.globl _i2c_read_data_PARM_2
                                    337 	.globl _i2c_write_data_PARM_4
                                    338 	.globl _i2c_write_data_PARM_3
                                    339 	.globl _i2c_write_data_PARM_2
                                    340 	.globl _aligned_alloc_PARM_2
                                    341 	.globl _Data2
                                    342 	.globl _lcd_print
                                    343 	.globl _lcd_clear
                                    344 	.globl _kpd_input
                                    345 	.globl _delay_time
                                    346 	.globl _i2c_start
                                    347 	.globl _i2c_write
                                    348 	.globl _i2c_write_and_stop
                                    349 	.globl _i2c_read
                                    350 	.globl _i2c_read_and_stop
                                    351 	.globl _i2c_write_data
                                    352 	.globl _i2c_read_data
                                    353 	.globl _Accel_Init
                                    354 	.globl _Accel_Init_C
                                    355 	.globl _Set_DrivePulsewidth
                                    356 	.globl _errHeading
                                    357 	.globl _ReadAccel
                                    358 	.globl _Accel_Calibrate
                                    359 	.globl _getGain
                                    360 	.globl _printData
                                    361 	.globl _Port_Init
                                    362 	.globl _XBR0_Init
                                    363 	.globl _PCA_Init
                                    364 	.globl _Interrupt_Init
                                    365 	.globl _PCA_ISR
                                    366 	.globl _SMB_Init
                                    367 	.globl _ADC_Init
                                    368 	.globl _read_AD_input
                                    369 ;--------------------------------------------------------
                                    370 ; special function registers
                                    371 ;--------------------------------------------------------
                                    372 	.area RSEG    (ABS,DATA)
      000000                        373 	.org 0x0000
                           000080   374 G$P0$0$0 == 0x0080
                           000080   375 _P0	=	0x0080
                           000081   376 G$SP$0$0 == 0x0081
                           000081   377 _SP	=	0x0081
                           000082   378 G$DPL$0$0 == 0x0082
                           000082   379 _DPL	=	0x0082
                           000083   380 G$DPH$0$0 == 0x0083
                           000083   381 _DPH	=	0x0083
                           000084   382 G$P4$0$0 == 0x0084
                           000084   383 _P4	=	0x0084
                           000085   384 G$P5$0$0 == 0x0085
                           000085   385 _P5	=	0x0085
                           000086   386 G$P6$0$0 == 0x0086
                           000086   387 _P6	=	0x0086
                           000087   388 G$PCON$0$0 == 0x0087
                           000087   389 _PCON	=	0x0087
                           000088   390 G$TCON$0$0 == 0x0088
                           000088   391 _TCON	=	0x0088
                           000089   392 G$TMOD$0$0 == 0x0089
                           000089   393 _TMOD	=	0x0089
                           00008A   394 G$TL0$0$0 == 0x008a
                           00008A   395 _TL0	=	0x008a
                           00008B   396 G$TL1$0$0 == 0x008b
                           00008B   397 _TL1	=	0x008b
                           00008C   398 G$TH0$0$0 == 0x008c
                           00008C   399 _TH0	=	0x008c
                           00008D   400 G$TH1$0$0 == 0x008d
                           00008D   401 _TH1	=	0x008d
                           00008E   402 G$CKCON$0$0 == 0x008e
                           00008E   403 _CKCON	=	0x008e
                           00008F   404 G$PSCTL$0$0 == 0x008f
                           00008F   405 _PSCTL	=	0x008f
                           000090   406 G$P1$0$0 == 0x0090
                           000090   407 _P1	=	0x0090
                           000091   408 G$TMR3CN$0$0 == 0x0091
                           000091   409 _TMR3CN	=	0x0091
                           000092   410 G$TMR3RLL$0$0 == 0x0092
                           000092   411 _TMR3RLL	=	0x0092
                           000093   412 G$TMR3RLH$0$0 == 0x0093
                           000093   413 _TMR3RLH	=	0x0093
                           000094   414 G$TMR3L$0$0 == 0x0094
                           000094   415 _TMR3L	=	0x0094
                           000095   416 G$TMR3H$0$0 == 0x0095
                           000095   417 _TMR3H	=	0x0095
                           000096   418 G$P7$0$0 == 0x0096
                           000096   419 _P7	=	0x0096
                           000098   420 G$SCON$0$0 == 0x0098
                           000098   421 _SCON	=	0x0098
                           000098   422 G$SCON0$0$0 == 0x0098
                           000098   423 _SCON0	=	0x0098
                           000099   424 G$SBUF$0$0 == 0x0099
                           000099   425 _SBUF	=	0x0099
                           000099   426 G$SBUF0$0$0 == 0x0099
                           000099   427 _SBUF0	=	0x0099
                           00009A   428 G$SPI0CFG$0$0 == 0x009a
                           00009A   429 _SPI0CFG	=	0x009a
                           00009B   430 G$SPI0DAT$0$0 == 0x009b
                           00009B   431 _SPI0DAT	=	0x009b
                           00009C   432 G$ADC1$0$0 == 0x009c
                           00009C   433 _ADC1	=	0x009c
                           00009D   434 G$SPI0CKR$0$0 == 0x009d
                           00009D   435 _SPI0CKR	=	0x009d
                           00009E   436 G$CPT0CN$0$0 == 0x009e
                           00009E   437 _CPT0CN	=	0x009e
                           00009F   438 G$CPT1CN$0$0 == 0x009f
                           00009F   439 _CPT1CN	=	0x009f
                           0000A0   440 G$P2$0$0 == 0x00a0
                           0000A0   441 _P2	=	0x00a0
                           0000A1   442 G$EMI0TC$0$0 == 0x00a1
                           0000A1   443 _EMI0TC	=	0x00a1
                           0000A3   444 G$EMI0CF$0$0 == 0x00a3
                           0000A3   445 _EMI0CF	=	0x00a3
                           0000A4   446 G$PRT0CF$0$0 == 0x00a4
                           0000A4   447 _PRT0CF	=	0x00a4
                           0000A4   448 G$P0MDOUT$0$0 == 0x00a4
                           0000A4   449 _P0MDOUT	=	0x00a4
                           0000A5   450 G$PRT1CF$0$0 == 0x00a5
                           0000A5   451 _PRT1CF	=	0x00a5
                           0000A5   452 G$P1MDOUT$0$0 == 0x00a5
                           0000A5   453 _P1MDOUT	=	0x00a5
                           0000A6   454 G$PRT2CF$0$0 == 0x00a6
                           0000A6   455 _PRT2CF	=	0x00a6
                           0000A6   456 G$P2MDOUT$0$0 == 0x00a6
                           0000A6   457 _P2MDOUT	=	0x00a6
                           0000A7   458 G$PRT3CF$0$0 == 0x00a7
                           0000A7   459 _PRT3CF	=	0x00a7
                           0000A7   460 G$P3MDOUT$0$0 == 0x00a7
                           0000A7   461 _P3MDOUT	=	0x00a7
                           0000A8   462 G$IE$0$0 == 0x00a8
                           0000A8   463 _IE	=	0x00a8
                           0000A9   464 G$SADDR0$0$0 == 0x00a9
                           0000A9   465 _SADDR0	=	0x00a9
                           0000AA   466 G$ADC1CN$0$0 == 0x00aa
                           0000AA   467 _ADC1CN	=	0x00aa
                           0000AB   468 G$ADC1CF$0$0 == 0x00ab
                           0000AB   469 _ADC1CF	=	0x00ab
                           0000AC   470 G$AMX1SL$0$0 == 0x00ac
                           0000AC   471 _AMX1SL	=	0x00ac
                           0000AD   472 G$P3IF$0$0 == 0x00ad
                           0000AD   473 _P3IF	=	0x00ad
                           0000AE   474 G$SADEN1$0$0 == 0x00ae
                           0000AE   475 _SADEN1	=	0x00ae
                           0000AF   476 G$EMI0CN$0$0 == 0x00af
                           0000AF   477 _EMI0CN	=	0x00af
                           0000AF   478 G$_XPAGE$0$0 == 0x00af
                           0000AF   479 __XPAGE	=	0x00af
                           0000B0   480 G$P3$0$0 == 0x00b0
                           0000B0   481 _P3	=	0x00b0
                           0000B1   482 G$OSCXCN$0$0 == 0x00b1
                           0000B1   483 _OSCXCN	=	0x00b1
                           0000B2   484 G$OSCICN$0$0 == 0x00b2
                           0000B2   485 _OSCICN	=	0x00b2
                           0000B5   486 G$P74OUT$0$0 == 0x00b5
                           0000B5   487 _P74OUT	=	0x00b5
                           0000B6   488 G$FLSCL$0$0 == 0x00b6
                           0000B6   489 _FLSCL	=	0x00b6
                           0000B7   490 G$FLACL$0$0 == 0x00b7
                           0000B7   491 _FLACL	=	0x00b7
                           0000B8   492 G$IP$0$0 == 0x00b8
                           0000B8   493 _IP	=	0x00b8
                           0000B9   494 G$SADEN0$0$0 == 0x00b9
                           0000B9   495 _SADEN0	=	0x00b9
                           0000BA   496 G$AMX0CF$0$0 == 0x00ba
                           0000BA   497 _AMX0CF	=	0x00ba
                           0000BB   498 G$AMX0SL$0$0 == 0x00bb
                           0000BB   499 _AMX0SL	=	0x00bb
                           0000BC   500 G$ADC0CF$0$0 == 0x00bc
                           0000BC   501 _ADC0CF	=	0x00bc
                           0000BD   502 G$P1MDIN$0$0 == 0x00bd
                           0000BD   503 _P1MDIN	=	0x00bd
                           0000BE   504 G$ADC0L$0$0 == 0x00be
                           0000BE   505 _ADC0L	=	0x00be
                           0000BF   506 G$ADC0H$0$0 == 0x00bf
                           0000BF   507 _ADC0H	=	0x00bf
                           0000C0   508 G$SMB0CN$0$0 == 0x00c0
                           0000C0   509 _SMB0CN	=	0x00c0
                           0000C1   510 G$SMB0STA$0$0 == 0x00c1
                           0000C1   511 _SMB0STA	=	0x00c1
                           0000C2   512 G$SMB0DAT$0$0 == 0x00c2
                           0000C2   513 _SMB0DAT	=	0x00c2
                           0000C3   514 G$SMB0ADR$0$0 == 0x00c3
                           0000C3   515 _SMB0ADR	=	0x00c3
                           0000C4   516 G$ADC0GTL$0$0 == 0x00c4
                           0000C4   517 _ADC0GTL	=	0x00c4
                           0000C5   518 G$ADC0GTH$0$0 == 0x00c5
                           0000C5   519 _ADC0GTH	=	0x00c5
                           0000C6   520 G$ADC0LTL$0$0 == 0x00c6
                           0000C6   521 _ADC0LTL	=	0x00c6
                           0000C7   522 G$ADC0LTH$0$0 == 0x00c7
                           0000C7   523 _ADC0LTH	=	0x00c7
                           0000C8   524 G$T2CON$0$0 == 0x00c8
                           0000C8   525 _T2CON	=	0x00c8
                           0000C9   526 G$T4CON$0$0 == 0x00c9
                           0000C9   527 _T4CON	=	0x00c9
                           0000CA   528 G$RCAP2L$0$0 == 0x00ca
                           0000CA   529 _RCAP2L	=	0x00ca
                           0000CB   530 G$RCAP2H$0$0 == 0x00cb
                           0000CB   531 _RCAP2H	=	0x00cb
                           0000CC   532 G$TL2$0$0 == 0x00cc
                           0000CC   533 _TL2	=	0x00cc
                           0000CD   534 G$TH2$0$0 == 0x00cd
                           0000CD   535 _TH2	=	0x00cd
                           0000CF   536 G$SMB0CR$0$0 == 0x00cf
                           0000CF   537 _SMB0CR	=	0x00cf
                           0000D0   538 G$PSW$0$0 == 0x00d0
                           0000D0   539 _PSW	=	0x00d0
                           0000D1   540 G$REF0CN$0$0 == 0x00d1
                           0000D1   541 _REF0CN	=	0x00d1
                           0000D2   542 G$DAC0L$0$0 == 0x00d2
                           0000D2   543 _DAC0L	=	0x00d2
                           0000D3   544 G$DAC0H$0$0 == 0x00d3
                           0000D3   545 _DAC0H	=	0x00d3
                           0000D4   546 G$DAC0CN$0$0 == 0x00d4
                           0000D4   547 _DAC0CN	=	0x00d4
                           0000D5   548 G$DAC1L$0$0 == 0x00d5
                           0000D5   549 _DAC1L	=	0x00d5
                           0000D6   550 G$DAC1H$0$0 == 0x00d6
                           0000D6   551 _DAC1H	=	0x00d6
                           0000D7   552 G$DAC1CN$0$0 == 0x00d7
                           0000D7   553 _DAC1CN	=	0x00d7
                           0000D8   554 G$PCA0CN$0$0 == 0x00d8
                           0000D8   555 _PCA0CN	=	0x00d8
                           0000D9   556 G$PCA0MD$0$0 == 0x00d9
                           0000D9   557 _PCA0MD	=	0x00d9
                           0000DA   558 G$PCA0CPM0$0$0 == 0x00da
                           0000DA   559 _PCA0CPM0	=	0x00da
                           0000DB   560 G$PCA0CPM1$0$0 == 0x00db
                           0000DB   561 _PCA0CPM1	=	0x00db
                           0000DC   562 G$PCA0CPM2$0$0 == 0x00dc
                           0000DC   563 _PCA0CPM2	=	0x00dc
                           0000DD   564 G$PCA0CPM3$0$0 == 0x00dd
                           0000DD   565 _PCA0CPM3	=	0x00dd
                           0000DE   566 G$PCA0CPM4$0$0 == 0x00de
                           0000DE   567 _PCA0CPM4	=	0x00de
                           0000E0   568 G$ACC$0$0 == 0x00e0
                           0000E0   569 _ACC	=	0x00e0
                           0000E1   570 G$XBR0$0$0 == 0x00e1
                           0000E1   571 _XBR0	=	0x00e1
                           0000E2   572 G$XBR1$0$0 == 0x00e2
                           0000E2   573 _XBR1	=	0x00e2
                           0000E3   574 G$XBR2$0$0 == 0x00e3
                           0000E3   575 _XBR2	=	0x00e3
                           0000E4   576 G$RCAP4L$0$0 == 0x00e4
                           0000E4   577 _RCAP4L	=	0x00e4
                           0000E5   578 G$RCAP4H$0$0 == 0x00e5
                           0000E5   579 _RCAP4H	=	0x00e5
                           0000E6   580 G$EIE1$0$0 == 0x00e6
                           0000E6   581 _EIE1	=	0x00e6
                           0000E7   582 G$EIE2$0$0 == 0x00e7
                           0000E7   583 _EIE2	=	0x00e7
                           0000E8   584 G$ADC0CN$0$0 == 0x00e8
                           0000E8   585 _ADC0CN	=	0x00e8
                           0000E9   586 G$PCA0L$0$0 == 0x00e9
                           0000E9   587 _PCA0L	=	0x00e9
                           0000EA   588 G$PCA0CPL0$0$0 == 0x00ea
                           0000EA   589 _PCA0CPL0	=	0x00ea
                           0000EB   590 G$PCA0CPL1$0$0 == 0x00eb
                           0000EB   591 _PCA0CPL1	=	0x00eb
                           0000EC   592 G$PCA0CPL2$0$0 == 0x00ec
                           0000EC   593 _PCA0CPL2	=	0x00ec
                           0000ED   594 G$PCA0CPL3$0$0 == 0x00ed
                           0000ED   595 _PCA0CPL3	=	0x00ed
                           0000EE   596 G$PCA0CPL4$0$0 == 0x00ee
                           0000EE   597 _PCA0CPL4	=	0x00ee
                           0000EF   598 G$RSTSRC$0$0 == 0x00ef
                           0000EF   599 _RSTSRC	=	0x00ef
                           0000F0   600 G$B$0$0 == 0x00f0
                           0000F0   601 _B	=	0x00f0
                           0000F1   602 G$SCON1$0$0 == 0x00f1
                           0000F1   603 _SCON1	=	0x00f1
                           0000F2   604 G$SBUF1$0$0 == 0x00f2
                           0000F2   605 _SBUF1	=	0x00f2
                           0000F3   606 G$SADDR1$0$0 == 0x00f3
                           0000F3   607 _SADDR1	=	0x00f3
                           0000F4   608 G$TL4$0$0 == 0x00f4
                           0000F4   609 _TL4	=	0x00f4
                           0000F5   610 G$TH4$0$0 == 0x00f5
                           0000F5   611 _TH4	=	0x00f5
                           0000F6   612 G$EIP1$0$0 == 0x00f6
                           0000F6   613 _EIP1	=	0x00f6
                           0000F7   614 G$EIP2$0$0 == 0x00f7
                           0000F7   615 _EIP2	=	0x00f7
                           0000F8   616 G$SPI0CN$0$0 == 0x00f8
                           0000F8   617 _SPI0CN	=	0x00f8
                           0000F9   618 G$PCA0H$0$0 == 0x00f9
                           0000F9   619 _PCA0H	=	0x00f9
                           0000FA   620 G$PCA0CPH0$0$0 == 0x00fa
                           0000FA   621 _PCA0CPH0	=	0x00fa
                           0000FB   622 G$PCA0CPH1$0$0 == 0x00fb
                           0000FB   623 _PCA0CPH1	=	0x00fb
                           0000FC   624 G$PCA0CPH2$0$0 == 0x00fc
                           0000FC   625 _PCA0CPH2	=	0x00fc
                           0000FD   626 G$PCA0CPH3$0$0 == 0x00fd
                           0000FD   627 _PCA0CPH3	=	0x00fd
                           0000FE   628 G$PCA0CPH4$0$0 == 0x00fe
                           0000FE   629 _PCA0CPH4	=	0x00fe
                           0000FF   630 G$WDTCN$0$0 == 0x00ff
                           0000FF   631 _WDTCN	=	0x00ff
                           008C8A   632 G$TMR0$0$0 == 0x8c8a
                           008C8A   633 _TMR0	=	0x8c8a
                           008D8B   634 G$TMR1$0$0 == 0x8d8b
                           008D8B   635 _TMR1	=	0x8d8b
                           00CDCC   636 G$TMR2$0$0 == 0xcdcc
                           00CDCC   637 _TMR2	=	0xcdcc
                           00CBCA   638 G$RCAP2$0$0 == 0xcbca
                           00CBCA   639 _RCAP2	=	0xcbca
                           009594   640 G$TMR3$0$0 == 0x9594
                           009594   641 _TMR3	=	0x9594
                           009392   642 G$TMR3RL$0$0 == 0x9392
                           009392   643 _TMR3RL	=	0x9392
                           00F5F4   644 G$TMR4$0$0 == 0xf5f4
                           00F5F4   645 _TMR4	=	0xf5f4
                           00E5E4   646 G$RCAP4$0$0 == 0xe5e4
                           00E5E4   647 _RCAP4	=	0xe5e4
                           00BFBE   648 G$ADC0$0$0 == 0xbfbe
                           00BFBE   649 _ADC0	=	0xbfbe
                           00C5C4   650 G$ADC0GT$0$0 == 0xc5c4
                           00C5C4   651 _ADC0GT	=	0xc5c4
                           00C7C6   652 G$ADC0LT$0$0 == 0xc7c6
                           00C7C6   653 _ADC0LT	=	0xc7c6
                           00D3D2   654 G$DAC0$0$0 == 0xd3d2
                           00D3D2   655 _DAC0	=	0xd3d2
                           00D6D5   656 G$DAC1$0$0 == 0xd6d5
                           00D6D5   657 _DAC1	=	0xd6d5
                           00F9E9   658 G$PCA0$0$0 == 0xf9e9
                           00F9E9   659 _PCA0	=	0xf9e9
                           00FAEA   660 G$PCA0CP0$0$0 == 0xfaea
                           00FAEA   661 _PCA0CP0	=	0xfaea
                           00FBEB   662 G$PCA0CP1$0$0 == 0xfbeb
                           00FBEB   663 _PCA0CP1	=	0xfbeb
                           00FCEC   664 G$PCA0CP2$0$0 == 0xfcec
                           00FCEC   665 _PCA0CP2	=	0xfcec
                           00FDED   666 G$PCA0CP3$0$0 == 0xfded
                           00FDED   667 _PCA0CP3	=	0xfded
                           00FEEE   668 G$PCA0CP4$0$0 == 0xfeee
                           00FEEE   669 _PCA0CP4	=	0xfeee
                                    670 ;--------------------------------------------------------
                                    671 ; special function bits
                                    672 ;--------------------------------------------------------
                                    673 	.area RSEG    (ABS,DATA)
      000000                        674 	.org 0x0000
                           000080   675 G$P0_0$0$0 == 0x0080
                           000080   676 _P0_0	=	0x0080
                           000081   677 G$P0_1$0$0 == 0x0081
                           000081   678 _P0_1	=	0x0081
                           000082   679 G$P0_2$0$0 == 0x0082
                           000082   680 _P0_2	=	0x0082
                           000083   681 G$P0_3$0$0 == 0x0083
                           000083   682 _P0_3	=	0x0083
                           000084   683 G$P0_4$0$0 == 0x0084
                           000084   684 _P0_4	=	0x0084
                           000085   685 G$P0_5$0$0 == 0x0085
                           000085   686 _P0_5	=	0x0085
                           000086   687 G$P0_6$0$0 == 0x0086
                           000086   688 _P0_6	=	0x0086
                           000087   689 G$P0_7$0$0 == 0x0087
                           000087   690 _P0_7	=	0x0087
                           000088   691 G$IT0$0$0 == 0x0088
                           000088   692 _IT0	=	0x0088
                           000089   693 G$IE0$0$0 == 0x0089
                           000089   694 _IE0	=	0x0089
                           00008A   695 G$IT1$0$0 == 0x008a
                           00008A   696 _IT1	=	0x008a
                           00008B   697 G$IE1$0$0 == 0x008b
                           00008B   698 _IE1	=	0x008b
                           00008C   699 G$TR0$0$0 == 0x008c
                           00008C   700 _TR0	=	0x008c
                           00008D   701 G$TF0$0$0 == 0x008d
                           00008D   702 _TF0	=	0x008d
                           00008E   703 G$TR1$0$0 == 0x008e
                           00008E   704 _TR1	=	0x008e
                           00008F   705 G$TF1$0$0 == 0x008f
                           00008F   706 _TF1	=	0x008f
                           000090   707 G$P1_0$0$0 == 0x0090
                           000090   708 _P1_0	=	0x0090
                           000091   709 G$P1_1$0$0 == 0x0091
                           000091   710 _P1_1	=	0x0091
                           000092   711 G$P1_2$0$0 == 0x0092
                           000092   712 _P1_2	=	0x0092
                           000093   713 G$P1_3$0$0 == 0x0093
                           000093   714 _P1_3	=	0x0093
                           000094   715 G$P1_4$0$0 == 0x0094
                           000094   716 _P1_4	=	0x0094
                           000095   717 G$P1_5$0$0 == 0x0095
                           000095   718 _P1_5	=	0x0095
                           000096   719 G$P1_6$0$0 == 0x0096
                           000096   720 _P1_6	=	0x0096
                           000097   721 G$P1_7$0$0 == 0x0097
                           000097   722 _P1_7	=	0x0097
                           000098   723 G$RI$0$0 == 0x0098
                           000098   724 _RI	=	0x0098
                           000098   725 G$RI0$0$0 == 0x0098
                           000098   726 _RI0	=	0x0098
                           000099   727 G$TI$0$0 == 0x0099
                           000099   728 _TI	=	0x0099
                           000099   729 G$TI0$0$0 == 0x0099
                           000099   730 _TI0	=	0x0099
                           00009A   731 G$RB8$0$0 == 0x009a
                           00009A   732 _RB8	=	0x009a
                           00009A   733 G$RB80$0$0 == 0x009a
                           00009A   734 _RB80	=	0x009a
                           00009B   735 G$TB8$0$0 == 0x009b
                           00009B   736 _TB8	=	0x009b
                           00009B   737 G$TB80$0$0 == 0x009b
                           00009B   738 _TB80	=	0x009b
                           00009C   739 G$REN$0$0 == 0x009c
                           00009C   740 _REN	=	0x009c
                           00009C   741 G$REN0$0$0 == 0x009c
                           00009C   742 _REN0	=	0x009c
                           00009D   743 G$SM2$0$0 == 0x009d
                           00009D   744 _SM2	=	0x009d
                           00009D   745 G$SM20$0$0 == 0x009d
                           00009D   746 _SM20	=	0x009d
                           00009D   747 G$MCE0$0$0 == 0x009d
                           00009D   748 _MCE0	=	0x009d
                           00009E   749 G$SM1$0$0 == 0x009e
                           00009E   750 _SM1	=	0x009e
                           00009E   751 G$SM10$0$0 == 0x009e
                           00009E   752 _SM10	=	0x009e
                           00009F   753 G$SM0$0$0 == 0x009f
                           00009F   754 _SM0	=	0x009f
                           00009F   755 G$SM00$0$0 == 0x009f
                           00009F   756 _SM00	=	0x009f
                           00009F   757 G$S0MODE$0$0 == 0x009f
                           00009F   758 _S0MODE	=	0x009f
                           0000A0   759 G$P2_0$0$0 == 0x00a0
                           0000A0   760 _P2_0	=	0x00a0
                           0000A1   761 G$P2_1$0$0 == 0x00a1
                           0000A1   762 _P2_1	=	0x00a1
                           0000A2   763 G$P2_2$0$0 == 0x00a2
                           0000A2   764 _P2_2	=	0x00a2
                           0000A3   765 G$P2_3$0$0 == 0x00a3
                           0000A3   766 _P2_3	=	0x00a3
                           0000A4   767 G$P2_4$0$0 == 0x00a4
                           0000A4   768 _P2_4	=	0x00a4
                           0000A5   769 G$P2_5$0$0 == 0x00a5
                           0000A5   770 _P2_5	=	0x00a5
                           0000A6   771 G$P2_6$0$0 == 0x00a6
                           0000A6   772 _P2_6	=	0x00a6
                           0000A7   773 G$P2_7$0$0 == 0x00a7
                           0000A7   774 _P2_7	=	0x00a7
                           0000A8   775 G$EX0$0$0 == 0x00a8
                           0000A8   776 _EX0	=	0x00a8
                           0000A9   777 G$ET0$0$0 == 0x00a9
                           0000A9   778 _ET0	=	0x00a9
                           0000AA   779 G$EX1$0$0 == 0x00aa
                           0000AA   780 _EX1	=	0x00aa
                           0000AB   781 G$ET1$0$0 == 0x00ab
                           0000AB   782 _ET1	=	0x00ab
                           0000AC   783 G$ES0$0$0 == 0x00ac
                           0000AC   784 _ES0	=	0x00ac
                           0000AC   785 G$ES$0$0 == 0x00ac
                           0000AC   786 _ES	=	0x00ac
                           0000AD   787 G$ET2$0$0 == 0x00ad
                           0000AD   788 _ET2	=	0x00ad
                           0000AF   789 G$EA$0$0 == 0x00af
                           0000AF   790 _EA	=	0x00af
                           0000B0   791 G$P3_0$0$0 == 0x00b0
                           0000B0   792 _P3_0	=	0x00b0
                           0000B1   793 G$P3_1$0$0 == 0x00b1
                           0000B1   794 _P3_1	=	0x00b1
                           0000B2   795 G$P3_2$0$0 == 0x00b2
                           0000B2   796 _P3_2	=	0x00b2
                           0000B3   797 G$P3_3$0$0 == 0x00b3
                           0000B3   798 _P3_3	=	0x00b3
                           0000B4   799 G$P3_4$0$0 == 0x00b4
                           0000B4   800 _P3_4	=	0x00b4
                           0000B5   801 G$P3_5$0$0 == 0x00b5
                           0000B5   802 _P3_5	=	0x00b5
                           0000B6   803 G$P3_6$0$0 == 0x00b6
                           0000B6   804 _P3_6	=	0x00b6
                           0000B7   805 G$P3_7$0$0 == 0x00b7
                           0000B7   806 _P3_7	=	0x00b7
                           0000B8   807 G$PX0$0$0 == 0x00b8
                           0000B8   808 _PX0	=	0x00b8
                           0000B9   809 G$PT0$0$0 == 0x00b9
                           0000B9   810 _PT0	=	0x00b9
                           0000BA   811 G$PX1$0$0 == 0x00ba
                           0000BA   812 _PX1	=	0x00ba
                           0000BB   813 G$PT1$0$0 == 0x00bb
                           0000BB   814 _PT1	=	0x00bb
                           0000BC   815 G$PS0$0$0 == 0x00bc
                           0000BC   816 _PS0	=	0x00bc
                           0000BC   817 G$PS$0$0 == 0x00bc
                           0000BC   818 _PS	=	0x00bc
                           0000BD   819 G$PT2$0$0 == 0x00bd
                           0000BD   820 _PT2	=	0x00bd
                           0000C0   821 G$SMBTOE$0$0 == 0x00c0
                           0000C0   822 _SMBTOE	=	0x00c0
                           0000C1   823 G$SMBFTE$0$0 == 0x00c1
                           0000C1   824 _SMBFTE	=	0x00c1
                           0000C2   825 G$AA$0$0 == 0x00c2
                           0000C2   826 _AA	=	0x00c2
                           0000C3   827 G$SI$0$0 == 0x00c3
                           0000C3   828 _SI	=	0x00c3
                           0000C4   829 G$STO$0$0 == 0x00c4
                           0000C4   830 _STO	=	0x00c4
                           0000C5   831 G$STA$0$0 == 0x00c5
                           0000C5   832 _STA	=	0x00c5
                           0000C6   833 G$ENSMB$0$0 == 0x00c6
                           0000C6   834 _ENSMB	=	0x00c6
                           0000C7   835 G$BUSY$0$0 == 0x00c7
                           0000C7   836 _BUSY	=	0x00c7
                           0000C8   837 G$CPRL2$0$0 == 0x00c8
                           0000C8   838 _CPRL2	=	0x00c8
                           0000C9   839 G$CT2$0$0 == 0x00c9
                           0000C9   840 _CT2	=	0x00c9
                           0000CA   841 G$TR2$0$0 == 0x00ca
                           0000CA   842 _TR2	=	0x00ca
                           0000CB   843 G$EXEN2$0$0 == 0x00cb
                           0000CB   844 _EXEN2	=	0x00cb
                           0000CC   845 G$TCLK$0$0 == 0x00cc
                           0000CC   846 _TCLK	=	0x00cc
                           0000CD   847 G$RCLK$0$0 == 0x00cd
                           0000CD   848 _RCLK	=	0x00cd
                           0000CE   849 G$EXF2$0$0 == 0x00ce
                           0000CE   850 _EXF2	=	0x00ce
                           0000CF   851 G$TF2$0$0 == 0x00cf
                           0000CF   852 _TF2	=	0x00cf
                           0000D0   853 G$P$0$0 == 0x00d0
                           0000D0   854 _P	=	0x00d0
                           0000D1   855 G$F1$0$0 == 0x00d1
                           0000D1   856 _F1	=	0x00d1
                           0000D2   857 G$OV$0$0 == 0x00d2
                           0000D2   858 _OV	=	0x00d2
                           0000D3   859 G$RS0$0$0 == 0x00d3
                           0000D3   860 _RS0	=	0x00d3
                           0000D4   861 G$RS1$0$0 == 0x00d4
                           0000D4   862 _RS1	=	0x00d4
                           0000D5   863 G$F0$0$0 == 0x00d5
                           0000D5   864 _F0	=	0x00d5
                           0000D6   865 G$AC$0$0 == 0x00d6
                           0000D6   866 _AC	=	0x00d6
                           0000D7   867 G$CY$0$0 == 0x00d7
                           0000D7   868 _CY	=	0x00d7
                           0000D8   869 G$CCF0$0$0 == 0x00d8
                           0000D8   870 _CCF0	=	0x00d8
                           0000D9   871 G$CCF1$0$0 == 0x00d9
                           0000D9   872 _CCF1	=	0x00d9
                           0000DA   873 G$CCF2$0$0 == 0x00da
                           0000DA   874 _CCF2	=	0x00da
                           0000DB   875 G$CCF3$0$0 == 0x00db
                           0000DB   876 _CCF3	=	0x00db
                           0000DC   877 G$CCF4$0$0 == 0x00dc
                           0000DC   878 _CCF4	=	0x00dc
                           0000DE   879 G$CR$0$0 == 0x00de
                           0000DE   880 _CR	=	0x00de
                           0000DF   881 G$CF$0$0 == 0x00df
                           0000DF   882 _CF	=	0x00df
                           0000E8   883 G$ADLJST$0$0 == 0x00e8
                           0000E8   884 _ADLJST	=	0x00e8
                           0000E8   885 G$AD0LJST$0$0 == 0x00e8
                           0000E8   886 _AD0LJST	=	0x00e8
                           0000E9   887 G$ADWINT$0$0 == 0x00e9
                           0000E9   888 _ADWINT	=	0x00e9
                           0000E9   889 G$AD0WINT$0$0 == 0x00e9
                           0000E9   890 _AD0WINT	=	0x00e9
                           0000EA   891 G$ADSTM0$0$0 == 0x00ea
                           0000EA   892 _ADSTM0	=	0x00ea
                           0000EA   893 G$AD0CM0$0$0 == 0x00ea
                           0000EA   894 _AD0CM0	=	0x00ea
                           0000EB   895 G$ADSTM1$0$0 == 0x00eb
                           0000EB   896 _ADSTM1	=	0x00eb
                           0000EB   897 G$AD0CM1$0$0 == 0x00eb
                           0000EB   898 _AD0CM1	=	0x00eb
                           0000EC   899 G$ADBUSY$0$0 == 0x00ec
                           0000EC   900 _ADBUSY	=	0x00ec
                           0000EC   901 G$AD0BUSY$0$0 == 0x00ec
                           0000EC   902 _AD0BUSY	=	0x00ec
                           0000ED   903 G$ADCINT$0$0 == 0x00ed
                           0000ED   904 _ADCINT	=	0x00ed
                           0000ED   905 G$AD0INT$0$0 == 0x00ed
                           0000ED   906 _AD0INT	=	0x00ed
                           0000EE   907 G$ADCTM$0$0 == 0x00ee
                           0000EE   908 _ADCTM	=	0x00ee
                           0000EE   909 G$AD0TM$0$0 == 0x00ee
                           0000EE   910 _AD0TM	=	0x00ee
                           0000EF   911 G$ADCEN$0$0 == 0x00ef
                           0000EF   912 _ADCEN	=	0x00ef
                           0000EF   913 G$AD0EN$0$0 == 0x00ef
                           0000EF   914 _AD0EN	=	0x00ef
                           0000F8   915 G$SPIEN$0$0 == 0x00f8
                           0000F8   916 _SPIEN	=	0x00f8
                           0000F9   917 G$MSTEN$0$0 == 0x00f9
                           0000F9   918 _MSTEN	=	0x00f9
                           0000FA   919 G$SLVSEL$0$0 == 0x00fa
                           0000FA   920 _SLVSEL	=	0x00fa
                           0000FB   921 G$TXBSY$0$0 == 0x00fb
                           0000FB   922 _TXBSY	=	0x00fb
                           0000FC   923 G$RXOVRN$0$0 == 0x00fc
                           0000FC   924 _RXOVRN	=	0x00fc
                           0000FD   925 G$MODF$0$0 == 0x00fd
                           0000FD   926 _MODF	=	0x00fd
                           0000FE   927 G$WCOL$0$0 == 0x00fe
                           0000FE   928 _WCOL	=	0x00fe
                           0000FF   929 G$SPIF$0$0 == 0x00ff
                           0000FF   930 _SPIF	=	0x00ff
                           0000C7   931 G$BUS_BUSY$0$0 == 0x00c7
                           0000C7   932 _BUS_BUSY	=	0x00c7
                           0000C6   933 G$BUS_EN$0$0 == 0x00c6
                           0000C6   934 _BUS_EN	=	0x00c6
                           0000C5   935 G$BUS_START$0$0 == 0x00c5
                           0000C5   936 _BUS_START	=	0x00c5
                           0000C4   937 G$BUS_STOP$0$0 == 0x00c4
                           0000C4   938 _BUS_STOP	=	0x00c4
                           0000C3   939 G$BUS_INT$0$0 == 0x00c3
                           0000C3   940 _BUS_INT	=	0x00c3
                           0000C2   941 G$BUS_AA$0$0 == 0x00c2
                           0000C2   942 _BUS_AA	=	0x00c2
                           0000C1   943 G$BUS_FTE$0$0 == 0x00c1
                           0000C1   944 _BUS_FTE	=	0x00c1
                           0000C0   945 G$BUS_TOE$0$0 == 0x00c0
                           0000C0   946 _BUS_TOE	=	0x00c0
                           000083   947 G$BUS_SCL$0$0 == 0x0083
                           000083   948 _BUS_SCL	=	0x0083
                           0000B4   949 G$FBSS$0$0 == 0x00b4
                           0000B4   950 _FBSS	=	0x00b4
                           0000B7   951 G$RSSS$0$0 == 0x00b7
                           0000B7   952 _RSSS	=	0x00b7
                           0000B5   953 G$BLED1$0$0 == 0x00b5
                           0000B5   954 _BLED1	=	0x00b5
                           0000B6   955 G$BLED2$0$0 == 0x00b6
                           0000B6   956 _BLED2	=	0x00b6
                           000093   957 G$POT$0$0 == 0x0093
                           000093   958 _POT	=	0x0093
                                    959 ;--------------------------------------------------------
                                    960 ; overlayable register banks
                                    961 ;--------------------------------------------------------
                                    962 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        963 	.ds 8
                                    964 ;--------------------------------------------------------
                                    965 ; internal ram data
                                    966 ;--------------------------------------------------------
                                    967 	.area DSEG    (DATA)
                           000000   968 G$Data2$0$0==.
      000000                        969 _Data2::
      000000                        970 	.ds 3
                           000003   971 LLab_5.aligned_alloc$size$1$39==.
      000003                        972 _aligned_alloc_PARM_2:
      000003                        973 	.ds 2
                           000005   974 LLab_5.lcd_clear$NumBytes$1$85==.
      000005                        975 _lcd_clear_NumBytes_1_85:
      000005                        976 	.ds 1
                           000006   977 LLab_5.lcd_clear$Cmd$1$85==.
      000006                        978 _lcd_clear_Cmd_1_85:
      000006                        979 	.ds 2
                           000008   980 LLab_5.read_keypad$Data$1$86==.
      000008                        981 _read_keypad_Data_1_86:
      000008                        982 	.ds 2
                           00000A   983 LLab_5.i2c_write_data$start_reg$1$105==.
      00000A                        984 _i2c_write_data_PARM_2:
      00000A                        985 	.ds 1
                           00000B   986 LLab_5.i2c_write_data$buffer$1$105==.
      00000B                        987 _i2c_write_data_PARM_3:
      00000B                        988 	.ds 3
                           00000E   989 LLab_5.i2c_write_data$num_bytes$1$105==.
      00000E                        990 _i2c_write_data_PARM_4:
      00000E                        991 	.ds 1
                           00000F   992 LLab_5.i2c_read_data$start_reg$1$107==.
      00000F                        993 _i2c_read_data_PARM_2:
      00000F                        994 	.ds 1
                           000010   995 LLab_5.i2c_read_data$buffer$1$107==.
      000010                        996 _i2c_read_data_PARM_3:
      000010                        997 	.ds 3
                           000013   998 LLab_5.i2c_read_data$num_bytes$1$107==.
      000013                        999 _i2c_read_data_PARM_4:
      000013                       1000 	.ds 1
                           000014  1001 G$dr_DrivePW_Neutral$0$0==.
      000014                       1002 _dr_DrivePW_Neutral::
      000014                       1003 	.ds 2
                           000016  1004 G$dr_DrivePW_Min$0$0==.
      000016                       1005 _dr_DrivePW_Min::
      000016                       1006 	.ds 2
                           000018  1007 G$dr_DrivePW_Max$0$0==.
      000018                       1008 _dr_DrivePW_Max::
      000018                       1009 	.ds 2
                           00001A  1010 G$dr_DrivePW$0$0==.
      00001A                       1011 _dr_DrivePW::
      00001A                       1012 	.ds 2
                           00001C  1013 G$dr_kx$0$0==.
      00001C                       1014 _dr_kx::
      00001C                       1015 	.ds 1
                           00001D  1016 G$dr_ky$0$0==.
      00001D                       1017 _dr_ky::
      00001D                       1018 	.ds 1
                           00001E  1019 G$ADC_value$0$0==.
      00001E                       1020 _ADC_value::
      00001E                       1021 	.ds 1
                           00001F  1022 G$SV_PW_CENTER$0$0==.
      00001F                       1023 _SV_PW_CENTER::
      00001F                       1024 	.ds 2
                           000021  1025 G$SV_PW_LEFT$0$0==.
      000021                       1026 _SV_PW_LEFT::
      000021                       1027 	.ds 2
                           000023  1028 G$SV_PW_RIGHT$0$0==.
      000023                       1029 _SV_PW_RIGHT::
      000023                       1030 	.ds 2
                           000025  1031 G$SV_SERVO_PW$0$0==.
      000025                       1032 _SV_SERVO_PW::
      000025                       1033 	.ds 2
                           000027  1034 G$sv_k$0$0==.
      000027                       1035 _sv_k::
      000027                       1036 	.ds 2
                           000029  1037 G$sv_temp_servo_pw$0$0==.
      000029                       1038 _sv_temp_servo_pw::
      000029                       1039 	.ds 2
                           00002B  1040 G$counts$0$0==.
      00002B                       1041 _counts::
      00002B                       1042 	.ds 2
                           00002D  1043 G$printcounts$0$0==.
      00002D                       1044 _printcounts::
      00002D                       1045 	.ds 1
                           00002E  1046 G$new_reading$0$0==.
      00002E                       1047 _new_reading::
      00002E                       1048 	.ds 1
                           00002F  1049 G$gx$0$0==.
      00002F                       1050 _gx::
      00002F                       1051 	.ds 2
                           000031  1052 G$gy$0$0==.
      000031                       1053 _gy::
      000031                       1054 	.ds 2
                           000033  1055 G$x0$0$0==.
      000033                       1056 _x0::
      000033                       1057 	.ds 2
                           000035  1058 G$y0$0$0==.
      000035                       1059 _y0::
      000035                       1060 	.ds 2
                           000037  1061 G$avg_gx$0$0==.
      000037                       1062 _avg_gx::
      000037                       1063 	.ds 2
                           000039  1064 G$avg_gy$0$0==.
      000039                       1065 _avg_gy::
      000039                       1066 	.ds 2
                           00003B  1067 LLab_5.Set_DrivePulsewidth$sloc0$1$0==.
      00003B                       1068 _Set_DrivePulsewidth_sloc0_1_0:
      00003B                       1069 	.ds 2
                           00003D  1070 LLab_5.ReadAccel$accelData$1$171==.
      00003D                       1071 _ReadAccel_accelData_1_171:
      00003D                       1072 	.ds 4
                                   1073 ;--------------------------------------------------------
                                   1074 ; overlayable items in internal ram 
                                   1075 ;--------------------------------------------------------
                                   1076 	.area	OSEG    (OVR,DATA)
                                   1077 	.area	OSEG    (OVR,DATA)
                                   1078 	.area	OSEG    (OVR,DATA)
                                   1079 	.area	OSEG    (OVR,DATA)
                                   1080 	.area	OSEG    (OVR,DATA)
                                   1081 	.area	OSEG    (OVR,DATA)
                                   1082 	.area	OSEG    (OVR,DATA)
                                   1083 	.area	OSEG    (OVR,DATA)
                                   1084 ;--------------------------------------------------------
                                   1085 ; Stack segment in internal ram 
                                   1086 ;--------------------------------------------------------
                                   1087 	.area	SSEG
      000000                       1088 __start__stack:
      000000                       1089 	.ds	1
                                   1090 
                                   1091 ;--------------------------------------------------------
                                   1092 ; indirectly addressable internal ram data
                                   1093 ;--------------------------------------------------------
                                   1094 	.area ISEG    (DATA)
                                   1095 ;--------------------------------------------------------
                                   1096 ; absolute internal ram data
                                   1097 ;--------------------------------------------------------
                                   1098 	.area IABS    (ABS,DATA)
                                   1099 	.area IABS    (ABS,DATA)
                                   1100 ;--------------------------------------------------------
                                   1101 ; bit data
                                   1102 ;--------------------------------------------------------
                                   1103 	.area BSEG    (BIT)
                                   1104 ;--------------------------------------------------------
                                   1105 ; paged external ram data
                                   1106 ;--------------------------------------------------------
                                   1107 	.area PSEG    (PAG,XDATA)
                                   1108 ;--------------------------------------------------------
                                   1109 ; external ram data
                                   1110 ;--------------------------------------------------------
                                   1111 	.area XSEG    (XDATA)
                           000000  1112 LLab_5.lcd_print$text$1$81==.
      000000                       1113 _lcd_print_text_1_81:
      000000                       1114 	.ds 80
                                   1115 ;--------------------------------------------------------
                                   1116 ; absolute external ram data
                                   1117 ;--------------------------------------------------------
                                   1118 	.area XABS    (ABS,XDATA)
                                   1119 ;--------------------------------------------------------
                                   1120 ; external initialized ram data
                                   1121 ;--------------------------------------------------------
                                   1122 	.area XISEG   (XDATA)
                                   1123 	.area HOME    (CODE)
                                   1124 	.area GSINIT0 (CODE)
                                   1125 	.area GSINIT1 (CODE)
                                   1126 	.area GSINIT2 (CODE)
                                   1127 	.area GSINIT3 (CODE)
                                   1128 	.area GSINIT4 (CODE)
                                   1129 	.area GSINIT5 (CODE)
                                   1130 	.area GSINIT  (CODE)
                                   1131 	.area GSFINAL (CODE)
                                   1132 	.area CSEG    (CODE)
                                   1133 ;--------------------------------------------------------
                                   1134 ; interrupt vector 
                                   1135 ;--------------------------------------------------------
                                   1136 	.area HOME    (CODE)
      000000                       1137 __interrupt_vect:
      000000 02r00r00         [24] 1138 	ljmp	__sdcc_gsinit_startup
      000003 32               [24] 1139 	reti
      000004                       1140 	.ds	7
      00000B 32               [24] 1141 	reti
      00000C                       1142 	.ds	7
      000013 32               [24] 1143 	reti
      000014                       1144 	.ds	7
      00001B 32               [24] 1145 	reti
      00001C                       1146 	.ds	7
      000023 32               [24] 1147 	reti
      000024                       1148 	.ds	7
      00002B 32               [24] 1149 	reti
      00002C                       1150 	.ds	7
      000033 32               [24] 1151 	reti
      000034                       1152 	.ds	7
      00003B 32               [24] 1153 	reti
      00003C                       1154 	.ds	7
      000043 32               [24] 1155 	reti
      000044                       1156 	.ds	7
      00004B 02r0ErA0         [24] 1157 	ljmp	_PCA_ISR
                                   1158 ;--------------------------------------------------------
                                   1159 ; global & static initialisations
                                   1160 ;--------------------------------------------------------
                                   1161 	.area HOME    (CODE)
                                   1162 	.area GSINIT  (CODE)
                                   1163 	.area GSFINAL (CODE)
                                   1164 	.area GSINIT  (CODE)
                                   1165 	.globl __sdcc_gsinit_startup
                                   1166 	.globl __sdcc_program_startup
                                   1167 	.globl __start__stack
                                   1168 	.globl __mcs51_genXINIT
                                   1169 	.globl __mcs51_genXRAMCLEAR
                                   1170 	.globl __mcs51_genRAMCLEAR
                           000000  1171 	C$Lab_5.c$36$1$194 ==.
                                   1172 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:36: unsigned int dr_DrivePW_Neutral = 2750;	//Drive Motor Initialization
      000000 75*14 BE         [24] 1173 	mov	_dr_DrivePW_Neutral,#0xbe
      000003 75*15 0A         [24] 1174 	mov	(_dr_DrivePW_Neutral + 1),#0x0a
                           000006  1175 	C$Lab_5.c$37$1$194 ==.
                                   1176 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:37: unsigned int dr_DrivePW_Min = 2013; 	//
      000006 75*16 DD         [24] 1177 	mov	_dr_DrivePW_Min,#0xdd
      000009 75*17 07         [24] 1178 	mov	(_dr_DrivePW_Min + 1),#0x07
                           00000C  1179 	C$Lab_5.c$38$1$194 ==.
                                   1180 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:38: unsigned int dr_DrivePW_Max = 3487;		//
      00000C 75*18 9F         [24] 1181 	mov	_dr_DrivePW_Max,#0x9f
      00000F 75*19 0D         [24] 1182 	mov	(_dr_DrivePW_Max + 1),#0x0d
                           000012  1183 	C$Lab_5.c$40$1$194 ==.
                                   1184 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:40: signed char dr_kx = 0;					//speed modifier in the pulsewidth equation
      000012 75*1C 00         [24] 1185 	mov	_dr_kx,#0x00
                           000015  1186 	C$Lab_5.c$41$1$194 ==.
                                   1187 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:41: signed char dr_ky = 0;
      000015 75*1D 00         [24] 1188 	mov	_dr_ky,#0x00
                           000018  1189 	C$Lab_5.c$45$1$194 ==.
                                   1190 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:45: unsigned int SV_PW_CENTER = 2770; 		//Steering Initialization
      000018 75*1F D2         [24] 1191 	mov	_SV_PW_CENTER,#0xd2
      00001B 75*20 0A         [24] 1192 	mov	(_SV_PW_CENTER + 1),#0x0a
                           00001E  1193 	C$Lab_5.c$46$1$194 ==.
                                   1194 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:46: unsigned int SV_PW_LEFT = 2260;			//
      00001E 75*21 D4         [24] 1195 	mov	_SV_PW_LEFT,#0xd4
      000021 75*22 08         [24] 1196 	mov	(_SV_PW_LEFT + 1),#0x08
                           000024  1197 	C$Lab_5.c$47$1$194 ==.
                                   1198 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:47: unsigned int SV_PW_RIGHT = 3280;		//
      000024 75*23 D0         [24] 1199 	mov	_SV_PW_RIGHT,#0xd0
      000027 75*24 0C         [24] 1200 	mov	(_SV_PW_RIGHT + 1),#0x0c
                           00002A  1201 	C$Lab_5.c$49$1$194 ==.
                                   1202 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:49: signed int sv_k = 0;					//steering multiplier
      00002A E4               [12] 1203 	clr	a
      00002B F5*27            [12] 1204 	mov	_sv_k,a
      00002D F5*28            [12] 1205 	mov	(_sv_k + 1),a
                                   1206 	.area GSFINAL (CODE)
      000000 02r00r4E         [24] 1207 	ljmp	__sdcc_program_startup
                                   1208 ;--------------------------------------------------------
                                   1209 ; Home
                                   1210 ;--------------------------------------------------------
                                   1211 	.area HOME    (CODE)
                                   1212 	.area HOME    (CODE)
      00004E                       1213 __sdcc_program_startup:
      00004E 02r05r06         [24] 1214 	ljmp	_main
                                   1215 ;	return from main will return to caller
                                   1216 ;--------------------------------------------------------
                                   1217 ; code
                                   1218 ;--------------------------------------------------------
                                   1219 	.area CSEG    (CODE)
                                   1220 ;------------------------------------------------------------
                                   1221 ;Allocation info for local variables in function 'SYSCLK_Init'
                                   1222 ;------------------------------------------------------------
                                   1223 ;i                         Allocated to registers r6 r7 
                                   1224 ;------------------------------------------------------------
                           000000  1225 	G$SYSCLK_Init$0$0 ==.
                           000000  1226 	C$c8051_SDCC.h$62$0$0 ==.
                                   1227 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:62: void SYSCLK_Init(void)
                                   1228 ;	-----------------------------------------
                                   1229 ;	 function SYSCLK_Init
                                   1230 ;	-----------------------------------------
      000000                       1231 _SYSCLK_Init:
                           000007  1232 	ar7 = 0x07
                           000006  1233 	ar6 = 0x06
                           000005  1234 	ar5 = 0x05
                           000004  1235 	ar4 = 0x04
                           000003  1236 	ar3 = 0x03
                           000002  1237 	ar2 = 0x02
                           000001  1238 	ar1 = 0x01
                           000000  1239 	ar0 = 0x00
                           000000  1240 	C$c8051_SDCC.h$66$1$2 ==.
                                   1241 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:66: OSCXCN = 0x67;                      // start external oscillator with
      000000 75 B1 67         [24] 1242 	mov	_OSCXCN,#0x67
                           000003  1243 	C$c8051_SDCC.h$69$1$2 ==.
                                   1244 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:69: for (i=0; i < 256; i++);            // wait for oscillator to start
      000003 7E 00            [12] 1245 	mov	r6,#0x00
      000005 7F 01            [12] 1246 	mov	r7,#0x01
      000007                       1247 00107$:
      000007 EE               [12] 1248 	mov	a,r6
      000008 24 FF            [12] 1249 	add	a,#0xff
      00000A FC               [12] 1250 	mov	r4,a
      00000B EF               [12] 1251 	mov	a,r7
      00000C 34 FF            [12] 1252 	addc	a,#0xff
      00000E FD               [12] 1253 	mov	r5,a
      00000F 8C 06            [24] 1254 	mov	ar6,r4
      000011 8D 07            [24] 1255 	mov	ar7,r5
      000013 EC               [12] 1256 	mov	a,r4
      000014 4D               [12] 1257 	orl	a,r5
      000015 70 F0            [24] 1258 	jnz	00107$
                           000017  1259 	C$c8051_SDCC.h$71$1$2 ==.
                                   1260 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:71: while (!(OSCXCN & 0x80));           // Wait for crystal osc. to settle
      000017                       1261 00102$:
      000017 E5 B1            [12] 1262 	mov	a,_OSCXCN
      000019 30 E7 FB         [24] 1263 	jnb	acc.7,00102$
                           00001C  1264 	C$c8051_SDCC.h$73$1$2 ==.
                                   1265 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:73: OSCICN = 0x88;                      // select external oscillator as SYSCLK
      00001C 75 B2 88         [24] 1266 	mov	_OSCICN,#0x88
                           00001F  1267 	C$c8051_SDCC.h$76$1$2 ==.
                           00001F  1268 	XG$SYSCLK_Init$0$0 ==.
      00001F 22               [24] 1269 	ret
                                   1270 ;------------------------------------------------------------
                                   1271 ;Allocation info for local variables in function 'UART0_Init'
                                   1272 ;------------------------------------------------------------
                           000020  1273 	G$UART0_Init$0$0 ==.
                           000020  1274 	C$c8051_SDCC.h$84$1$2 ==.
                                   1275 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:84: void UART0_Init(void)
                                   1276 ;	-----------------------------------------
                                   1277 ;	 function UART0_Init
                                   1278 ;	-----------------------------------------
      000020                       1279 _UART0_Init:
                           000020  1280 	C$c8051_SDCC.h$86$1$4 ==.
                                   1281 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:86: SCON0  = 0x50;                      // SCON0: mode 1, 8-bit UART, enable RX
      000020 75 98 50         [24] 1282 	mov	_SCON0,#0x50
                           000023  1283 	C$c8051_SDCC.h$87$1$4 ==.
                                   1284 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:87: TMOD   = 0x20;                      // TMOD: timer 1, mode 2, 8-bit reload
      000023 75 89 20         [24] 1285 	mov	_TMOD,#0x20
                           000026  1286 	C$c8051_SDCC.h$88$1$4 ==.
                                   1287 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:88: TH1    = 0xFF&-(SYSCLK/BAUDRATE/16);     // set Timer1 reload value for baudrate
      000026 75 8D DC         [24] 1288 	mov	_TH1,#0xdc
                           000029  1289 	C$c8051_SDCC.h$89$1$4 ==.
                                   1290 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:89: TR1    = 1;                         // start Timer1
      000029 D2 8E            [12] 1291 	setb	_TR1
                           00002B  1292 	C$c8051_SDCC.h$90$1$4 ==.
                                   1293 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:90: CKCON |= 0x10;                      // Timer1 uses SYSCLK as time base
      00002B 43 8E 10         [24] 1294 	orl	_CKCON,#0x10
                           00002E  1295 	C$c8051_SDCC.h$91$1$4 ==.
                                   1296 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:91: PCON  |= 0x80;                      // SMOD00 = 1 (disable baud rate 
      00002E 43 87 80         [24] 1297 	orl	_PCON,#0x80
                           000031  1298 	C$c8051_SDCC.h$93$1$4 ==.
                                   1299 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:93: TI0    = 1;                         // Indicate TX0 ready
      000031 D2 99            [12] 1300 	setb	_TI0
                           000033  1301 	C$c8051_SDCC.h$94$1$4 ==.
                                   1302 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:94: P0MDOUT |= 0x01;                    // Set TX0 to push/pull
      000033 43 A4 01         [24] 1303 	orl	_P0MDOUT,#0x01
                           000036  1304 	C$c8051_SDCC.h$95$1$4 ==.
                           000036  1305 	XG$UART0_Init$0$0 ==.
      000036 22               [24] 1306 	ret
                                   1307 ;------------------------------------------------------------
                                   1308 ;Allocation info for local variables in function 'Sys_Init'
                                   1309 ;------------------------------------------------------------
                           000037  1310 	G$Sys_Init$0$0 ==.
                           000037  1311 	C$c8051_SDCC.h$103$1$4 ==.
                                   1312 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:103: void Sys_Init(void)
                                   1313 ;	-----------------------------------------
                                   1314 ;	 function Sys_Init
                                   1315 ;	-----------------------------------------
      000037                       1316 _Sys_Init:
                           000037  1317 	C$c8051_SDCC.h$105$1$6 ==.
                                   1318 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:105: WDTCN = 0xde;			// disable watchdog timer
      000037 75 FF DE         [24] 1319 	mov	_WDTCN,#0xde
                           00003A  1320 	C$c8051_SDCC.h$106$1$6 ==.
                                   1321 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:106: WDTCN = 0xad;
      00003A 75 FF AD         [24] 1322 	mov	_WDTCN,#0xad
                           00003D  1323 	C$c8051_SDCC.h$108$1$6 ==.
                                   1324 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:108: SYSCLK_Init();			// initialize oscillator
      00003D 12r00r00         [24] 1325 	lcall	_SYSCLK_Init
                           000040  1326 	C$c8051_SDCC.h$109$1$6 ==.
                                   1327 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:109: UART0_Init();			// initialize UART0
      000040 12r00r20         [24] 1328 	lcall	_UART0_Init
                           000043  1329 	C$c8051_SDCC.h$111$1$6 ==.
                                   1330 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:111: XBR0 |= 0x04;
      000043 43 E1 04         [24] 1331 	orl	_XBR0,#0x04
                           000046  1332 	C$c8051_SDCC.h$112$1$6 ==.
                                   1333 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:112: XBR2 |= 0x40;                    	// Enable crossbar and weak pull-ups
      000046 43 E3 40         [24] 1334 	orl	_XBR2,#0x40
                           000049  1335 	C$c8051_SDCC.h$113$1$6 ==.
                           000049  1336 	XG$Sys_Init$0$0 ==.
      000049 22               [24] 1337 	ret
                                   1338 ;------------------------------------------------------------
                                   1339 ;Allocation info for local variables in function 'putchar'
                                   1340 ;------------------------------------------------------------
                                   1341 ;c                         Allocated to registers r7 
                                   1342 ;------------------------------------------------------------
                           00004A  1343 	G$putchar$0$0 ==.
                           00004A  1344 	C$c8051_SDCC.h$129$1$6 ==.
                                   1345 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:129: void putchar(char c)
                                   1346 ;	-----------------------------------------
                                   1347 ;	 function putchar
                                   1348 ;	-----------------------------------------
      00004A                       1349 _putchar:
      00004A AF 82            [24] 1350 	mov	r7,dpl
                           00004C  1351 	C$c8051_SDCC.h$132$1$8 ==.
                                   1352 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:132: while (!TI0); 
      00004C                       1353 00101$:
                           00004C  1354 	C$c8051_SDCC.h$133$1$8 ==.
                                   1355 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:133: TI0 = 0;
      00004C 10 99 02         [24] 1356 	jbc	_TI0,00112$
      00004F 80 FB            [24] 1357 	sjmp	00101$
      000051                       1358 00112$:
                           000051  1359 	C$c8051_SDCC.h$134$1$8 ==.
                                   1360 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:134: SBUF0 = c;
      000051 8F 99            [24] 1361 	mov	_SBUF0,r7
                           000053  1362 	C$c8051_SDCC.h$135$1$8 ==.
                           000053  1363 	XG$putchar$0$0 ==.
      000053 22               [24] 1364 	ret
                                   1365 ;------------------------------------------------------------
                                   1366 ;Allocation info for local variables in function 'getchar'
                                   1367 ;------------------------------------------------------------
                                   1368 ;c                         Allocated to registers r7 
                                   1369 ;------------------------------------------------------------
                           000054  1370 	G$getchar$0$0 ==.
                           000054  1371 	C$c8051_SDCC.h$154$1$8 ==.
                                   1372 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:154: char getchar(void)
                                   1373 ;	-----------------------------------------
                                   1374 ;	 function getchar
                                   1375 ;	-----------------------------------------
      000054                       1376 _getchar:
                           000054  1377 	C$c8051_SDCC.h$157$1$10 ==.
                                   1378 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:157: while (!RI0);
      000054                       1379 00101$:
                           000054  1380 	C$c8051_SDCC.h$158$1$10 ==.
                                   1381 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:158: RI0 = 0;
      000054 10 98 02         [24] 1382 	jbc	_RI0,00112$
      000057 80 FB            [24] 1383 	sjmp	00101$
      000059                       1384 00112$:
                           000059  1385 	C$c8051_SDCC.h$159$1$10 ==.
                                   1386 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:159: c = SBUF0;
      000059 AF 99            [24] 1387 	mov	r7,_SBUF0
                           00005B  1388 	C$c8051_SDCC.h$160$1$10 ==.
                                   1389 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:160: putchar(c);                          // echo to terminal
      00005B 8F 82            [24] 1390 	mov	dpl,r7
      00005D C0 07            [24] 1391 	push	ar7
      00005F 12r00r4A         [24] 1392 	lcall	_putchar
      000062 D0 07            [24] 1393 	pop	ar7
                           000064  1394 	C$c8051_SDCC.h$161$1$10 ==.
                                   1395 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:161: return c;
      000064 8F 82            [24] 1396 	mov	dpl,r7
                           000066  1397 	C$c8051_SDCC.h$162$1$10 ==.
                           000066  1398 	XG$getchar$0$0 ==.
      000066 22               [24] 1399 	ret
                                   1400 ;------------------------------------------------------------
                                   1401 ;Allocation info for local variables in function 'getchar_nw'
                                   1402 ;------------------------------------------------------------
                                   1403 ;c                         Allocated to registers 
                                   1404 ;------------------------------------------------------------
                           000067  1405 	G$getchar_nw$0$0 ==.
                           000067  1406 	C$c8051_SDCC.h$168$1$10 ==.
                                   1407 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:168: char getchar_nw(void)
                                   1408 ;	-----------------------------------------
                                   1409 ;	 function getchar_nw
                                   1410 ;	-----------------------------------------
      000067                       1411 _getchar_nw:
                           000067  1412 	C$c8051_SDCC.h$171$1$12 ==.
                                   1413 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:171: if (!RI0) return 0xFF;
      000067 20 98 05         [24] 1414 	jb	_RI0,00102$
      00006A 75 82 FF         [24] 1415 	mov	dpl,#0xff
      00006D 80 0B            [24] 1416 	sjmp	00104$
      00006F                       1417 00102$:
                           00006F  1418 	C$c8051_SDCC.h$174$2$13 ==.
                                   1419 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:174: RI0 = 0;
      00006F C2 98            [12] 1420 	clr	_RI0
                           000071  1421 	C$c8051_SDCC.h$175$2$13 ==.
                                   1422 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:175: c = SBUF0;
      000071 85 99 82         [24] 1423 	mov	dpl,_SBUF0
                           000074  1424 	C$c8051_SDCC.h$176$2$13 ==.
                                   1425 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:176: putchar(c);                          // echo to terminal
      000074 12r00r4A         [24] 1426 	lcall	_putchar
                           000077  1427 	C$c8051_SDCC.h$177$2$13 ==.
                                   1428 ;	C:/Program Files/SDCC/bin/../include/mcs51/c8051_SDCC.h:177: return SBUF0;
      000077 85 99 82         [24] 1429 	mov	dpl,_SBUF0
      00007A                       1430 00104$:
                           00007A  1431 	C$c8051_SDCC.h$179$1$12 ==.
                           00007A  1432 	XG$getchar_nw$0$0 ==.
      00007A 22               [24] 1433 	ret
                                   1434 ;------------------------------------------------------------
                                   1435 ;Allocation info for local variables in function 'lcd_print'
                                   1436 ;------------------------------------------------------------
                                   1437 ;fmt                       Allocated to stack - _bp -5
                                   1438 ;len                       Allocated to registers r6 
                                   1439 ;i                         Allocated to registers 
                                   1440 ;ap                        Allocated to registers 
                                   1441 ;text                      Allocated with name '_lcd_print_text_1_81'
                                   1442 ;------------------------------------------------------------
                           00007B  1443 	G$lcd_print$0$0 ==.
                           00007B  1444 	C$i2c.h$84$1$12 ==.
                                   1445 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:84: void lcd_print(const char *fmt, ...)
                                   1446 ;	-----------------------------------------
                                   1447 ;	 function lcd_print
                                   1448 ;	-----------------------------------------
      00007B                       1449 _lcd_print:
      00007B C0*00            [24] 1450 	push	_bp
      00007D 85 81*00         [24] 1451 	mov	_bp,sp
                           000080  1452 	C$i2c.h$90$1$81 ==.
                                   1453 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:90: if ( strlen(fmt) <= 0 ) return;         //If there is no data to print, return
      000080 E5*00            [12] 1454 	mov	a,_bp
      000082 24 FB            [12] 1455 	add	a,#0xfb
      000084 F8               [12] 1456 	mov	r0,a
      000085 86 82            [24] 1457 	mov	dpl,@r0
      000087 08               [12] 1458 	inc	r0
      000088 86 83            [24] 1459 	mov	dph,@r0
      00008A 08               [12] 1460 	inc	r0
      00008B 86 F0            [24] 1461 	mov	b,@r0
      00008D 12r00r00         [24] 1462 	lcall	_strlen
      000090 E5 82            [12] 1463 	mov	a,dpl
      000092 85 83 F0         [24] 1464 	mov	b,dph
      000095 45 F0            [12] 1465 	orl	a,b
      000097 70 02            [24] 1466 	jnz	00102$
      000099 80 62            [24] 1467 	sjmp	00109$
      00009B                       1468 00102$:
                           00009B  1469 	C$i2c.h$92$2$82 ==.
                                   1470 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:92: va_start(ap, fmt);
      00009B E5*00            [12] 1471 	mov	a,_bp
      00009D 24 FB            [12] 1472 	add	a,#0xfb
      00009F FF               [12] 1473 	mov	r7,a
      0000A0 8F*00            [24] 1474 	mov	_vsprintf_PARM_3,r7
                           0000A2  1475 	C$i2c.h$93$1$81 ==.
                                   1476 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:93: vsprintf(text, fmt, ap);
      0000A2 E5*00            [12] 1477 	mov	a,_bp
      0000A4 24 FB            [12] 1478 	add	a,#0xfb
      0000A6 F8               [12] 1479 	mov	r0,a
      0000A7 86*00            [24] 1480 	mov	_vsprintf_PARM_2,@r0
      0000A9 08               [12] 1481 	inc	r0
      0000AA 86*01            [24] 1482 	mov	(_vsprintf_PARM_2 + 1),@r0
      0000AC 08               [12] 1483 	inc	r0
      0000AD 86*02            [24] 1484 	mov	(_vsprintf_PARM_2 + 2),@r0
      0000AF 90r00r00         [24] 1485 	mov	dptr,#_lcd_print_text_1_81
      0000B2 75 F0 00         [24] 1486 	mov	b,#0x00
      0000B5 12r00r00         [24] 1487 	lcall	_vsprintf
                           0000B8  1488 	C$i2c.h$96$1$81 ==.
                                   1489 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:96: len = strlen(text);
      0000B8 90r00r00         [24] 1490 	mov	dptr,#_lcd_print_text_1_81
      0000BB 75 F0 00         [24] 1491 	mov	b,#0x00
      0000BE 12r00r00         [24] 1492 	lcall	_strlen
      0000C1 AE 82            [24] 1493 	mov	r6,dpl
                           0000C3  1494 	C$i2c.h$97$1$81 ==.
                                   1495 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:97: for(i=0; i<len; i++)
      0000C3 7F 00            [12] 1496 	mov	r7,#0x00
      0000C5                       1497 00107$:
      0000C5 C3               [12] 1498 	clr	c
      0000C6 EF               [12] 1499 	mov	a,r7
      0000C7 9E               [12] 1500 	subb	a,r6
      0000C8 50 1F            [24] 1501 	jnc	00105$
                           0000CA  1502 	C$i2c.h$99$2$84 ==.
                                   1503 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:99: if(text[i] == (unsigned char)'\n') text[i] = 13;
      0000CA EF               [12] 1504 	mov	a,r7
      0000CB 24r00            [12] 1505 	add	a,#_lcd_print_text_1_81
      0000CD F5 82            [12] 1506 	mov	dpl,a
      0000CF E4               [12] 1507 	clr	a
      0000D0 34s00            [12] 1508 	addc	a,#(_lcd_print_text_1_81 >> 8)
      0000D2 F5 83            [12] 1509 	mov	dph,a
      0000D4 E0               [24] 1510 	movx	a,@dptr
      0000D5 FD               [12] 1511 	mov	r5,a
      0000D6 BD 0A 0D         [24] 1512 	cjne	r5,#0x0a,00108$
      0000D9 EF               [12] 1513 	mov	a,r7
      0000DA 24r00            [12] 1514 	add	a,#_lcd_print_text_1_81
      0000DC F5 82            [12] 1515 	mov	dpl,a
      0000DE E4               [12] 1516 	clr	a
      0000DF 34s00            [12] 1517 	addc	a,#(_lcd_print_text_1_81 >> 8)
      0000E1 F5 83            [12] 1518 	mov	dph,a
      0000E3 74 0D            [12] 1519 	mov	a,#0x0d
      0000E5 F0               [24] 1520 	movx	@dptr,a
      0000E6                       1521 00108$:
                           0000E6  1522 	C$i2c.h$97$1$81 ==.
                                   1523 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:97: for(i=0; i<len; i++)
      0000E6 0F               [12] 1524 	inc	r7
      0000E7 80 DC            [24] 1525 	sjmp	00107$
      0000E9                       1526 00105$:
                           0000E9  1527 	C$i2c.h$102$1$81 ==.
                                   1528 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:102: i2c_write_data(0xC6, 0x00, text, len);
      0000E9 75*0Br00         [24] 1529 	mov	_i2c_write_data_PARM_3,#_lcd_print_text_1_81
      0000EC 75*0Cs00         [24] 1530 	mov	(_i2c_write_data_PARM_3 + 1),#(_lcd_print_text_1_81 >> 8)
      0000EF 75*0D 00         [24] 1531 	mov	(_i2c_write_data_PARM_3 + 2),#0x00
      0000F2 75*0A 00         [24] 1532 	mov	_i2c_write_data_PARM_2,#0x00
      0000F5 8E*0E            [24] 1533 	mov	_i2c_write_data_PARM_4,r6
      0000F7 75 82 C6         [24] 1534 	mov	dpl,#0xc6
      0000FA 12r03r8C         [24] 1535 	lcall	_i2c_write_data
      0000FD                       1536 00109$:
      0000FD D0*00            [24] 1537 	pop	_bp
                           0000FF  1538 	C$i2c.h$103$1$81 ==.
                           0000FF  1539 	XG$lcd_print$0$0 ==.
      0000FF 22               [24] 1540 	ret
                                   1541 ;------------------------------------------------------------
                                   1542 ;Allocation info for local variables in function 'lcd_clear'
                                   1543 ;------------------------------------------------------------
                                   1544 ;NumBytes                  Allocated with name '_lcd_clear_NumBytes_1_85'
                                   1545 ;Cmd                       Allocated with name '_lcd_clear_Cmd_1_85'
                                   1546 ;------------------------------------------------------------
                           000100  1547 	G$lcd_clear$0$0 ==.
                           000100  1548 	C$i2c.h$106$1$81 ==.
                                   1549 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:106: void lcd_clear()
                                   1550 ;	-----------------------------------------
                                   1551 ;	 function lcd_clear
                                   1552 ;	-----------------------------------------
      000100                       1553 _lcd_clear:
                           000100  1554 	C$i2c.h$108$1$81 ==.
                                   1555 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:108: unsigned char NumBytes=0, Cmd[2];
      000100 75*05 00         [24] 1556 	mov	_lcd_clear_NumBytes_1_85,#0x00
                           000103  1557 	C$i2c.h$110$1$85 ==.
                                   1558 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:110: while(NumBytes < 64) i2c_read_data(0xC6, 0x00, &NumBytes, 1);
      000103                       1559 00101$:
      000103 74 C0            [12] 1560 	mov	a,#0x100 - 0x40
      000105 25*05            [12] 1561 	add	a,_lcd_clear_NumBytes_1_85
      000107 40 17            [24] 1562 	jc	00103$
      000109 75*10r05         [24] 1563 	mov	_i2c_read_data_PARM_3,#_lcd_clear_NumBytes_1_85
      00010C 75*11 00         [24] 1564 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      00010F 75*12 40         [24] 1565 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      000112 75*0F 00         [24] 1566 	mov	_i2c_read_data_PARM_2,#0x00
      000115 75*13 01         [24] 1567 	mov	_i2c_read_data_PARM_4,#0x01
      000118 75 82 C6         [24] 1568 	mov	dpl,#0xc6
      00011B 12r04r06         [24] 1569 	lcall	_i2c_read_data
      00011E 80 E3            [24] 1570 	sjmp	00101$
      000120                       1571 00103$:
                           000120  1572 	C$i2c.h$112$1$85 ==.
                                   1573 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:112: Cmd[0] = 12;
      000120 75*06 0C         [24] 1574 	mov	_lcd_clear_Cmd_1_85,#0x0c
                           000123  1575 	C$i2c.h$113$1$85 ==.
                                   1576 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:113: i2c_write_data(0xC6, 0x00, Cmd, 1);
      000123 75*0Br06         [24] 1577 	mov	_i2c_write_data_PARM_3,#_lcd_clear_Cmd_1_85
      000126 75*0C 00         [24] 1578 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      000129 75*0D 40         [24] 1579 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      00012C 75*0A 00         [24] 1580 	mov	_i2c_write_data_PARM_2,#0x00
      00012F 75*0E 01         [24] 1581 	mov	_i2c_write_data_PARM_4,#0x01
      000132 75 82 C6         [24] 1582 	mov	dpl,#0xc6
      000135 12r03r8C         [24] 1583 	lcall	_i2c_write_data
                           000138  1584 	C$i2c.h$114$1$85 ==.
                           000138  1585 	XG$lcd_clear$0$0 ==.
      000138 22               [24] 1586 	ret
                                   1587 ;------------------------------------------------------------
                                   1588 ;Allocation info for local variables in function 'read_keypad'
                                   1589 ;------------------------------------------------------------
                                   1590 ;i                         Allocated to registers r7 
                                   1591 ;Data                      Allocated with name '_read_keypad_Data_1_86'
                                   1592 ;------------------------------------------------------------
                           000139  1593 	G$read_keypad$0$0 ==.
                           000139  1594 	C$i2c.h$117$1$85 ==.
                                   1595 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:117: char read_keypad()
                                   1596 ;	-----------------------------------------
                                   1597 ;	 function read_keypad
                                   1598 ;	-----------------------------------------
      000139                       1599 _read_keypad:
                           000139  1600 	C$i2c.h$121$1$86 ==.
                                   1601 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:121: i2c_read_data(0xC6, 0x01, Data, 2); //Read I2C data on address 192, register 1, 2 bytes of data.
      000139 75*10r08         [24] 1602 	mov	_i2c_read_data_PARM_3,#_read_keypad_Data_1_86
      00013C 75*11 00         [24] 1603 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      00013F 75*12 40         [24] 1604 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      000142 75*0F 01         [24] 1605 	mov	_i2c_read_data_PARM_2,#0x01
      000145 75*13 02         [24] 1606 	mov	_i2c_read_data_PARM_4,#0x02
      000148 75 82 C6         [24] 1607 	mov	dpl,#0xc6
      00014B 12r04r06         [24] 1608 	lcall	_i2c_read_data
                           00014E  1609 	C$i2c.h$122$1$86 ==.
                                   1610 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:122: if(Data[0] == 0xFF) return 0;   //No response on bus, no display
      00014E 74 FF            [12] 1611 	mov	a,#0xff
      000150 B5*08 05         [24] 1612 	cjne	a,_read_keypad_Data_1_86,00102$
      000153 75 82 00         [24] 1613 	mov	dpl,#0x00
      000156 80 5F            [24] 1614 	sjmp	00116$
      000158                       1615 00102$:
                           000158  1616 	C$i2c.h$124$1$86 ==.
                                   1617 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:124: for(i=0; i<8; i++)              //loop 8 times
      000158 7F 00            [12] 1618 	mov	r7,#0x00
      00015A 8F 06            [24] 1619 	mov	ar6,r7
      00015C                       1620 00114$:
                           00015C  1621 	C$i2c.h$126$2$87 ==.
                                   1622 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:126: if(Data[0] & (0x01 << i))   //find the ASCII value of the keypad read, if it is the current loop value
      00015C 8E F0            [24] 1623 	mov	b,r6
      00015E 05 F0            [12] 1624 	inc	b
      000160 7C 01            [12] 1625 	mov	r4,#0x01
      000162 7D 00            [12] 1626 	mov	r5,#0x00
      000164 80 06            [24] 1627 	sjmp	00145$
      000166                       1628 00144$:
      000166 EC               [12] 1629 	mov	a,r4
      000167 2C               [12] 1630 	add	a,r4
      000168 FC               [12] 1631 	mov	r4,a
      000169 ED               [12] 1632 	mov	a,r5
      00016A 33               [12] 1633 	rlc	a
      00016B FD               [12] 1634 	mov	r5,a
      00016C                       1635 00145$:
      00016C D5 F0 F7         [24] 1636 	djnz	b,00144$
      00016F AA*08            [24] 1637 	mov	r2,_read_keypad_Data_1_86
      000171 7B 00            [12] 1638 	mov	r3,#0x00
      000173 EA               [12] 1639 	mov	a,r2
      000174 52 04            [12] 1640 	anl	ar4,a
      000176 EB               [12] 1641 	mov	a,r3
      000177 52 05            [12] 1642 	anl	ar5,a
      000179 EC               [12] 1643 	mov	a,r4
      00017A 4D               [12] 1644 	orl	a,r5
      00017B 60 07            [24] 1645 	jz	00115$
                           00017D  1646 	C$i2c.h$127$2$87 ==.
                                   1647 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:127: return i+49;
      00017D 74 31            [12] 1648 	mov	a,#0x31
      00017F 2F               [12] 1649 	add	a,r7
      000180 F5 82            [12] 1650 	mov	dpl,a
      000182 80 33            [24] 1651 	sjmp	00116$
      000184                       1652 00115$:
                           000184  1653 	C$i2c.h$124$1$86 ==.
                                   1654 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:124: for(i=0; i<8; i++)              //loop 8 times
      000184 0E               [12] 1655 	inc	r6
      000185 8E 07            [24] 1656 	mov	ar7,r6
      000187 BE 08 00         [24] 1657 	cjne	r6,#0x08,00147$
      00018A                       1658 00147$:
      00018A 40 D0            [24] 1659 	jc	00114$
                           00018C  1660 	C$i2c.h$130$1$86 ==.
                                   1661 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:130: if(Data[1] & 0x01) return '9';  //if the value is equal to 9 return 9.
      00018C E5*09            [12] 1662 	mov	a,(_read_keypad_Data_1_86 + 0x0001)
      00018E 30 E0 05         [24] 1663 	jnb	acc.0,00107$
      000191 75 82 39         [24] 1664 	mov	dpl,#0x39
      000194 80 21            [24] 1665 	sjmp	00116$
      000196                       1666 00107$:
                           000196  1667 	C$i2c.h$132$1$86 ==.
                                   1668 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:132: if(Data[1] & 0x02) return '*';  //if the value is equal to the star.
      000196 E5*09            [12] 1669 	mov	a,(_read_keypad_Data_1_86 + 0x0001)
      000198 30 E1 05         [24] 1670 	jnb	acc.1,00109$
      00019B 75 82 2A         [24] 1671 	mov	dpl,#0x2a
      00019E 80 17            [24] 1672 	sjmp	00116$
      0001A0                       1673 00109$:
                           0001A0  1674 	C$i2c.h$134$1$86 ==.
                                   1675 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:134: if(Data[1] & 0x04) return '0';  //if the value is equal to the 0 key
      0001A0 E5*09            [12] 1676 	mov	a,(_read_keypad_Data_1_86 + 0x0001)
      0001A2 30 E2 05         [24] 1677 	jnb	acc.2,00111$
      0001A5 75 82 30         [24] 1678 	mov	dpl,#0x30
      0001A8 80 0D            [24] 1679 	sjmp	00116$
      0001AA                       1680 00111$:
                           0001AA  1681 	C$i2c.h$136$1$86 ==.
                                   1682 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:136: if(Data[1] & 0x08) return '#';  //if the value is equal to the pound key
      0001AA E5*09            [12] 1683 	mov	a,(_read_keypad_Data_1_86 + 0x0001)
      0001AC 30 E3 05         [24] 1684 	jnb	acc.3,00113$
      0001AF 75 82 23         [24] 1685 	mov	dpl,#0x23
      0001B2 80 03            [24] 1686 	sjmp	00116$
      0001B4                       1687 00113$:
                           0001B4  1688 	C$i2c.h$138$1$86 ==.
                                   1689 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:138: return 0xFF;                    //else return a numerical -1 (0xFF)
      0001B4 75 82 FF         [24] 1690 	mov	dpl,#0xff
      0001B7                       1691 00116$:
                           0001B7  1692 	C$i2c.h$139$1$86 ==.
                           0001B7  1693 	XG$read_keypad$0$0 ==.
      0001B7 22               [24] 1694 	ret
                                   1695 ;------------------------------------------------------------
                                   1696 ;Allocation info for local variables in function 'kpd_input'
                                   1697 ;------------------------------------------------------------
                                   1698 ;mode                      Allocated to registers r7 
                                   1699 ;sum                       Allocated to registers r5 r6 
                                   1700 ;key                       Allocated to registers r3 
                                   1701 ;i                         Allocated to registers 
                                   1702 ;------------------------------------------------------------
                           0001B8  1703 	G$kpd_input$0$0 ==.
                           0001B8  1704 	C$i2c.h$151$1$86 ==.
                                   1705 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:151: unsigned int kpd_input(char mode)
                                   1706 ;	-----------------------------------------
                                   1707 ;	 function kpd_input
                                   1708 ;	-----------------------------------------
      0001B8                       1709 _kpd_input:
      0001B8 AF 82            [24] 1710 	mov	r7,dpl
                           0001BA  1711 	C$i2c.h$156$1$89 ==.
                                   1712 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:156: sum = 0;
                           0001BA  1713 	C$i2c.h$159$1$89 ==.
                                   1714 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:159: if(mode==0)lcd_print("\nType digits; end w/#");
      0001BA E4               [12] 1715 	clr	a
      0001BB FD               [12] 1716 	mov	r5,a
      0001BC FE               [12] 1717 	mov	r6,a
      0001BD EF               [12] 1718 	mov	a,r7
      0001BE 70 1D            [24] 1719 	jnz	00102$
      0001C0 C0 06            [24] 1720 	push	ar6
      0001C2 C0 05            [24] 1721 	push	ar5
      0001C4 74r00            [12] 1722 	mov	a,#___str_0
      0001C6 C0 E0            [24] 1723 	push	acc
      0001C8 74s00            [12] 1724 	mov	a,#(___str_0 >> 8)
      0001CA C0 E0            [24] 1725 	push	acc
      0001CC 74 80            [12] 1726 	mov	a,#0x80
      0001CE C0 E0            [24] 1727 	push	acc
      0001D0 12r00r7B         [24] 1728 	lcall	_lcd_print
      0001D3 15 81            [12] 1729 	dec	sp
      0001D5 15 81            [12] 1730 	dec	sp
      0001D7 15 81            [12] 1731 	dec	sp
      0001D9 D0 05            [24] 1732 	pop	ar5
      0001DB D0 06            [24] 1733 	pop	ar6
      0001DD                       1734 00102$:
                           0001DD  1735 	C$i2c.h$161$1$89 ==.
                                   1736 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:161: lcd_print("     %c%c%c%c%c",0x08,0x08,0x08,0x08,0x08);
      0001DD C0 06            [24] 1737 	push	ar6
      0001DF C0 05            [24] 1738 	push	ar5
      0001E1 74 08            [12] 1739 	mov	a,#0x08
      0001E3 C0 E0            [24] 1740 	push	acc
      0001E5 E4               [12] 1741 	clr	a
      0001E6 C0 E0            [24] 1742 	push	acc
      0001E8 74 08            [12] 1743 	mov	a,#0x08
      0001EA C0 E0            [24] 1744 	push	acc
      0001EC E4               [12] 1745 	clr	a
      0001ED C0 E0            [24] 1746 	push	acc
      0001EF 74 08            [12] 1747 	mov	a,#0x08
      0001F1 C0 E0            [24] 1748 	push	acc
      0001F3 E4               [12] 1749 	clr	a
      0001F4 C0 E0            [24] 1750 	push	acc
      0001F6 74 08            [12] 1751 	mov	a,#0x08
      0001F8 C0 E0            [24] 1752 	push	acc
      0001FA E4               [12] 1753 	clr	a
      0001FB C0 E0            [24] 1754 	push	acc
      0001FD 74 08            [12] 1755 	mov	a,#0x08
      0001FF C0 E0            [24] 1756 	push	acc
      000201 E4               [12] 1757 	clr	a
      000202 C0 E0            [24] 1758 	push	acc
      000204 74r16            [12] 1759 	mov	a,#___str_1
      000206 C0 E0            [24] 1760 	push	acc
      000208 74s00            [12] 1761 	mov	a,#(___str_1 >> 8)
      00020A C0 E0            [24] 1762 	push	acc
      00020C 74 80            [12] 1763 	mov	a,#0x80
      00020E C0 E0            [24] 1764 	push	acc
      000210 12r00r7B         [24] 1765 	lcall	_lcd_print
      000213 E5 81            [12] 1766 	mov	a,sp
      000215 24 F3            [12] 1767 	add	a,#0xf3
      000217 F5 81            [12] 1768 	mov	sp,a
                           000219  1769 	C$i2c.h$163$1$89 ==.
                                   1770 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:163: delay_time(500000);             //Add 20ms delay before reading i2c in loop
      000219 90 A1 20         [24] 1771 	mov	dptr,#0xa120
      00021C 75 F0 07         [24] 1772 	mov	b,#0x07
      00021F E4               [12] 1773 	clr	a
      000220 12r03r27         [24] 1774 	lcall	_delay_time
      000223 D0 05            [24] 1775 	pop	ar5
      000225 D0 06            [24] 1776 	pop	ar6
                           000227  1777 	C$i2c.h$167$1$89 ==.
                                   1778 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:167: for(i=0; i<5; i++)
      000227 7F 00            [12] 1779 	mov	r7,#0x00
                           000229  1780 	C$i2c.h$169$3$92 ==.
                                   1781 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:169: while(((key=read_keypad()) == 0xFF) || (key == '*'))delay_time(10000);
      000229                       1782 00104$:
      000229 C0 07            [24] 1783 	push	ar7
      00022B C0 06            [24] 1784 	push	ar6
      00022D C0 05            [24] 1785 	push	ar5
      00022F 12r01r39         [24] 1786 	lcall	_read_keypad
      000232 AC 82            [24] 1787 	mov	r4,dpl
      000234 D0 05            [24] 1788 	pop	ar5
      000236 D0 06            [24] 1789 	pop	ar6
      000238 D0 07            [24] 1790 	pop	ar7
      00023A 8C 03            [24] 1791 	mov	ar3,r4
      00023C BC FF 02         [24] 1792 	cjne	r4,#0xff,00146$
      00023F 80 03            [24] 1793 	sjmp	00105$
      000241                       1794 00146$:
      000241 BB 2A 17         [24] 1795 	cjne	r3,#0x2a,00106$
      000244                       1796 00105$:
      000244 90 27 10         [24] 1797 	mov	dptr,#0x2710
      000247 E4               [12] 1798 	clr	a
      000248 F5 F0            [12] 1799 	mov	b,a
      00024A C0 07            [24] 1800 	push	ar7
      00024C C0 06            [24] 1801 	push	ar6
      00024E C0 05            [24] 1802 	push	ar5
      000250 12r03r27         [24] 1803 	lcall	_delay_time
      000253 D0 05            [24] 1804 	pop	ar5
      000255 D0 06            [24] 1805 	pop	ar6
      000257 D0 07            [24] 1806 	pop	ar7
      000259 80 CE            [24] 1807 	sjmp	00104$
      00025B                       1808 00106$:
                           00025B  1809 	C$i2c.h$170$2$90 ==.
                                   1810 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:170: if(key == '#')
      00025B BB 23 2A         [24] 1811 	cjne	r3,#0x23,00114$
                           00025E  1812 	C$i2c.h$172$3$91 ==.
                                   1813 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:172: while(read_keypad() == '#')delay_time(10000);
      00025E                       1814 00107$:
      00025E C0 06            [24] 1815 	push	ar6
      000260 C0 05            [24] 1816 	push	ar5
      000262 12r01r39         [24] 1817 	lcall	_read_keypad
      000265 AC 82            [24] 1818 	mov	r4,dpl
      000267 D0 05            [24] 1819 	pop	ar5
      000269 D0 06            [24] 1820 	pop	ar6
      00026B BC 23 13         [24] 1821 	cjne	r4,#0x23,00109$
      00026E 90 27 10         [24] 1822 	mov	dptr,#0x2710
      000271 E4               [12] 1823 	clr	a
      000272 F5 F0            [12] 1824 	mov	b,a
      000274 C0 06            [24] 1825 	push	ar6
      000276 C0 05            [24] 1826 	push	ar5
      000278 12r03r27         [24] 1827 	lcall	_delay_time
      00027B D0 05            [24] 1828 	pop	ar5
      00027D D0 06            [24] 1829 	pop	ar6
      00027F 80 DD            [24] 1830 	sjmp	00107$
      000281                       1831 00109$:
                           000281  1832 	C$i2c.h$173$3$91 ==.
                                   1833 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:173: return sum;
      000281 8D 82            [24] 1834 	mov	dpl,r5
      000283 8E 83            [24] 1835 	mov	dph,r6
      000285 02r03r26         [24] 1836 	ljmp	00119$
      000288                       1837 00114$:
                           000288  1838 	C$i2c.h$177$3$92 ==.
                                   1839 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:177: lcd_print("%c", key);
      000288 8B 02            [24] 1840 	mov	ar2,r3
      00028A 7C 00            [12] 1841 	mov	r4,#0x00
      00028C C0 07            [24] 1842 	push	ar7
      00028E C0 06            [24] 1843 	push	ar6
      000290 C0 05            [24] 1844 	push	ar5
      000292 C0 04            [24] 1845 	push	ar4
      000294 C0 03            [24] 1846 	push	ar3
      000296 C0 02            [24] 1847 	push	ar2
      000298 C0 02            [24] 1848 	push	ar2
      00029A C0 04            [24] 1849 	push	ar4
      00029C 74r26            [12] 1850 	mov	a,#___str_2
      00029E C0 E0            [24] 1851 	push	acc
      0002A0 74s00            [12] 1852 	mov	a,#(___str_2 >> 8)
      0002A2 C0 E0            [24] 1853 	push	acc
      0002A4 74 80            [12] 1854 	mov	a,#0x80
      0002A6 C0 E0            [24] 1855 	push	acc
      0002A8 12r00r7B         [24] 1856 	lcall	_lcd_print
      0002AB E5 81            [12] 1857 	mov	a,sp
      0002AD 24 FB            [12] 1858 	add	a,#0xfb
      0002AF F5 81            [12] 1859 	mov	sp,a
      0002B1 D0 02            [24] 1860 	pop	ar2
      0002B3 D0 03            [24] 1861 	pop	ar3
      0002B5 D0 04            [24] 1862 	pop	ar4
      0002B7 D0 05            [24] 1863 	pop	ar5
      0002B9 D0 06            [24] 1864 	pop	ar6
                           0002BB  1865 	C$i2c.h$178$1$89 ==.
                                   1866 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:178: sum = sum*10 + key - '0';
      0002BB 8D*00            [24] 1867 	mov	__mulint_PARM_2,r5
      0002BD 8E*01            [24] 1868 	mov	(__mulint_PARM_2 + 1),r6
      0002BF 90 00 0A         [24] 1869 	mov	dptr,#0x000a
      0002C2 C0 04            [24] 1870 	push	ar4
      0002C4 C0 03            [24] 1871 	push	ar3
      0002C6 C0 02            [24] 1872 	push	ar2
      0002C8 12r00r00         [24] 1873 	lcall	__mulint
      0002CB A8 82            [24] 1874 	mov	r0,dpl
      0002CD A9 83            [24] 1875 	mov	r1,dph
      0002CF D0 02            [24] 1876 	pop	ar2
      0002D1 D0 03            [24] 1877 	pop	ar3
      0002D3 D0 04            [24] 1878 	pop	ar4
      0002D5 D0 07            [24] 1879 	pop	ar7
      0002D7 EA               [12] 1880 	mov	a,r2
      0002D8 28               [12] 1881 	add	a,r0
      0002D9 F8               [12] 1882 	mov	r0,a
      0002DA EC               [12] 1883 	mov	a,r4
      0002DB 39               [12] 1884 	addc	a,r1
      0002DC F9               [12] 1885 	mov	r1,a
      0002DD E8               [12] 1886 	mov	a,r0
      0002DE 24 D0            [12] 1887 	add	a,#0xd0
      0002E0 FD               [12] 1888 	mov	r5,a
      0002E1 E9               [12] 1889 	mov	a,r1
      0002E2 34 FF            [12] 1890 	addc	a,#0xff
      0002E4 FE               [12] 1891 	mov	r6,a
                           0002E5  1892 	C$i2c.h$179$3$92 ==.
                                   1893 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:179: while(read_keypad() == key)delay_time(10000); //wait for key to be released
      0002E5                       1894 00110$:
      0002E5 C0 07            [24] 1895 	push	ar7
      0002E7 C0 06            [24] 1896 	push	ar6
      0002E9 C0 05            [24] 1897 	push	ar5
      0002EB C0 03            [24] 1898 	push	ar3
      0002ED 12r01r39         [24] 1899 	lcall	_read_keypad
      0002F0 AC 82            [24] 1900 	mov	r4,dpl
      0002F2 D0 03            [24] 1901 	pop	ar3
      0002F4 D0 05            [24] 1902 	pop	ar5
      0002F6 D0 06            [24] 1903 	pop	ar6
      0002F8 D0 07            [24] 1904 	pop	ar7
      0002FA EC               [12] 1905 	mov	a,r4
      0002FB B5 03 1B         [24] 1906 	cjne	a,ar3,00118$
      0002FE 90 27 10         [24] 1907 	mov	dptr,#0x2710
      000301 E4               [12] 1908 	clr	a
      000302 F5 F0            [12] 1909 	mov	b,a
      000304 C0 07            [24] 1910 	push	ar7
      000306 C0 06            [24] 1911 	push	ar6
      000308 C0 05            [24] 1912 	push	ar5
      00030A C0 03            [24] 1913 	push	ar3
      00030C 12r03r27         [24] 1914 	lcall	_delay_time
      00030F D0 03            [24] 1915 	pop	ar3
      000311 D0 05            [24] 1916 	pop	ar5
      000313 D0 06            [24] 1917 	pop	ar6
      000315 D0 07            [24] 1918 	pop	ar7
      000317 80 CC            [24] 1919 	sjmp	00110$
      000319                       1920 00118$:
                           000319  1921 	C$i2c.h$167$1$89 ==.
                                   1922 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:167: for(i=0; i<5; i++)
      000319 0F               [12] 1923 	inc	r7
      00031A BF 05 00         [24] 1924 	cjne	r7,#0x05,00155$
      00031D                       1925 00155$:
      00031D 50 03            [24] 1926 	jnc	00156$
      00031F 02r02r29         [24] 1927 	ljmp	00104$
      000322                       1928 00156$:
                           000322  1929 	C$i2c.h$182$1$89 ==.
                                   1930 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:182: return sum;
      000322 8D 82            [24] 1931 	mov	dpl,r5
      000324 8E 83            [24] 1932 	mov	dph,r6
      000326                       1933 00119$:
                           000326  1934 	C$i2c.h$183$1$89 ==.
                           000326  1935 	XG$kpd_input$0$0 ==.
      000326 22               [24] 1936 	ret
                                   1937 ;------------------------------------------------------------
                                   1938 ;Allocation info for local variables in function 'delay_time'
                                   1939 ;------------------------------------------------------------
                                   1940 ;time_end                  Allocated to registers r4 r5 r6 r7 
                                   1941 ;index                     Allocated to registers 
                                   1942 ;------------------------------------------------------------
                           000327  1943 	G$delay_time$0$0 ==.
                           000327  1944 	C$i2c.h$192$1$89 ==.
                                   1945 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:192: void delay_time (unsigned long time_end)
                                   1946 ;	-----------------------------------------
                                   1947 ;	 function delay_time
                                   1948 ;	-----------------------------------------
      000327                       1949 _delay_time:
      000327 AC 82            [24] 1950 	mov	r4,dpl
      000329 AD 83            [24] 1951 	mov	r5,dph
      00032B AE F0            [24] 1952 	mov	r6,b
      00032D FF               [12] 1953 	mov	r7,a
                           00032E  1954 	C$i2c.h$196$1$94 ==.
                                   1955 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:196: for (index = 0; index < time_end; index++); //for loop delay
      00032E 78 00            [12] 1956 	mov	r0,#0x00
      000330 79 00            [12] 1957 	mov	r1,#0x00
      000332 7A 00            [12] 1958 	mov	r2,#0x00
      000334 7B 00            [12] 1959 	mov	r3,#0x00
      000336                       1960 00103$:
      000336 C3               [12] 1961 	clr	c
      000337 E8               [12] 1962 	mov	a,r0
      000338 9C               [12] 1963 	subb	a,r4
      000339 E9               [12] 1964 	mov	a,r1
      00033A 9D               [12] 1965 	subb	a,r5
      00033B EA               [12] 1966 	mov	a,r2
      00033C 9E               [12] 1967 	subb	a,r6
      00033D EB               [12] 1968 	mov	a,r3
      00033E 9F               [12] 1969 	subb	a,r7
      00033F 50 0F            [24] 1970 	jnc	00105$
      000341 08               [12] 1971 	inc	r0
      000342 B8 00 09         [24] 1972 	cjne	r0,#0x00,00115$
      000345 09               [12] 1973 	inc	r1
      000346 B9 00 05         [24] 1974 	cjne	r1,#0x00,00115$
      000349 0A               [12] 1975 	inc	r2
      00034A BA 00 E9         [24] 1976 	cjne	r2,#0x00,00103$
      00034D 0B               [12] 1977 	inc	r3
      00034E                       1978 00115$:
      00034E 80 E6            [24] 1979 	sjmp	00103$
      000350                       1980 00105$:
                           000350  1981 	C$i2c.h$197$1$94 ==.
                           000350  1982 	XG$delay_time$0$0 ==.
      000350 22               [24] 1983 	ret
                                   1984 ;------------------------------------------------------------
                                   1985 ;Allocation info for local variables in function 'i2c_start'
                                   1986 ;------------------------------------------------------------
                           000351  1987 	G$i2c_start$0$0 ==.
                           000351  1988 	C$i2c.h$200$1$94 ==.
                                   1989 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:200: void i2c_start(void)
                                   1990 ;	-----------------------------------------
                                   1991 ;	 function i2c_start
                                   1992 ;	-----------------------------------------
      000351                       1993 _i2c_start:
                           000351  1994 	C$i2c.h$202$1$96 ==.
                                   1995 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:202: while(BUSY);                //Wait until SMBus0 is free
      000351                       1996 00101$:
      000351 20 C7 FD         [24] 1997 	jb	_BUSY,00101$
                           000354  1998 	C$i2c.h$203$1$96 ==.
                                   1999 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:203: STA = 1;                    //Set Start Bit
      000354 D2 C5            [12] 2000 	setb	_STA
                           000356  2001 	C$i2c.h$204$1$96 ==.
                                   2002 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:204: while(!SI);                 //Wait until start sent
      000356                       2003 00104$:
      000356 30 C3 FD         [24] 2004 	jnb	_SI,00104$
                           000359  2005 	C$i2c.h$205$1$96 ==.
                                   2006 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:205: STA = 0;                    //Clear start bit
      000359 C2 C5            [12] 2007 	clr	_STA
                           00035B  2008 	C$i2c.h$206$1$96 ==.
                                   2009 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:206: SI = 0;                     //Clear SI
      00035B C2 C3            [12] 2010 	clr	_SI
                           00035D  2011 	C$i2c.h$207$1$96 ==.
                           00035D  2012 	XG$i2c_start$0$0 ==.
      00035D 22               [24] 2013 	ret
                                   2014 ;------------------------------------------------------------
                                   2015 ;Allocation info for local variables in function 'i2c_write'
                                   2016 ;------------------------------------------------------------
                                   2017 ;output_data               Allocated to registers 
                                   2018 ;------------------------------------------------------------
                           00035E  2019 	G$i2c_write$0$0 ==.
                           00035E  2020 	C$i2c.h$210$1$96 ==.
                                   2021 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:210: void i2c_write(unsigned char output_data)
                                   2022 ;	-----------------------------------------
                                   2023 ;	 function i2c_write
                                   2024 ;	-----------------------------------------
      00035E                       2025 _i2c_write:
      00035E 85 82 C2         [24] 2026 	mov	_SMB0DAT,dpl
                           000361  2027 	C$i2c.h$213$1$98 ==.
                                   2028 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:213: while(!SI);                 //Wait until send is complete
      000361                       2029 00101$:
                           000361  2030 	C$i2c.h$214$1$98 ==.
                                   2031 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:214: SI = 0;                     //Clear SI
      000361 10 C3 02         [24] 2032 	jbc	_SI,00112$
      000364 80 FB            [24] 2033 	sjmp	00101$
      000366                       2034 00112$:
                           000366  2035 	C$i2c.h$215$1$98 ==.
                           000366  2036 	XG$i2c_write$0$0 ==.
      000366 22               [24] 2037 	ret
                                   2038 ;------------------------------------------------------------
                                   2039 ;Allocation info for local variables in function 'i2c_write_and_stop'
                                   2040 ;------------------------------------------------------------
                                   2041 ;output_data               Allocated to registers 
                                   2042 ;------------------------------------------------------------
                           000367  2043 	G$i2c_write_and_stop$0$0 ==.
                           000367  2044 	C$i2c.h$218$1$98 ==.
                                   2045 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:218: void i2c_write_and_stop(unsigned char output_data)
                                   2046 ;	-----------------------------------------
                                   2047 ;	 function i2c_write_and_stop
                                   2048 ;	-----------------------------------------
      000367                       2049 _i2c_write_and_stop:
      000367 85 82 C2         [24] 2050 	mov	_SMB0DAT,dpl
                           00036A  2051 	C$i2c.h$221$1$100 ==.
                                   2052 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:221: STO = 1;                    //Set stop bit
      00036A D2 C4            [12] 2053 	setb	_STO
                           00036C  2054 	C$i2c.h$222$1$100 ==.
                                   2055 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:222: while(!SI);                 //Wait until send is complete
      00036C                       2056 00101$:
                           00036C  2057 	C$i2c.h$223$1$100 ==.
                                   2058 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:223: SI = 0;                     //Clear SI
      00036C 10 C3 02         [24] 2059 	jbc	_SI,00112$
      00036F 80 FB            [24] 2060 	sjmp	00101$
      000371                       2061 00112$:
                           000371  2062 	C$i2c.h$224$1$100 ==.
                           000371  2063 	XG$i2c_write_and_stop$0$0 ==.
      000371 22               [24] 2064 	ret
                                   2065 ;------------------------------------------------------------
                                   2066 ;Allocation info for local variables in function 'i2c_read'
                                   2067 ;------------------------------------------------------------
                                   2068 ;input_data                Allocated to registers 
                                   2069 ;------------------------------------------------------------
                           000372  2070 	G$i2c_read$0$0 ==.
                           000372  2071 	C$i2c.h$227$1$100 ==.
                                   2072 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:227: unsigned char i2c_read(void)
                                   2073 ;	-----------------------------------------
                                   2074 ;	 function i2c_read
                                   2075 ;	-----------------------------------------
      000372                       2076 _i2c_read:
                           000372  2077 	C$i2c.h$231$1$102 ==.
                                   2078 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:231: while(!SI);                 //Wait until we have data to read
      000372                       2079 00101$:
      000372 30 C3 FD         [24] 2080 	jnb	_SI,00101$
                           000375  2081 	C$i2c.h$232$1$102 ==.
                                   2082 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:232: input_data = SMB0DAT;       //Read the data
      000375 85 C2 82         [24] 2083 	mov	dpl,_SMB0DAT
                           000378  2084 	C$i2c.h$233$1$102 ==.
                                   2085 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:233: SI = 0;                     //Clear SI
      000378 C2 C3            [12] 2086 	clr	_SI
                           00037A  2087 	C$i2c.h$234$1$102 ==.
                                   2088 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:234: return input_data;          //Return the read data
                           00037A  2089 	C$i2c.h$235$1$102 ==.
                           00037A  2090 	XG$i2c_read$0$0 ==.
      00037A 22               [24] 2091 	ret
                                   2092 ;------------------------------------------------------------
                                   2093 ;Allocation info for local variables in function 'i2c_read_and_stop'
                                   2094 ;------------------------------------------------------------
                                   2095 ;input_data                Allocated to registers r7 
                                   2096 ;------------------------------------------------------------
                           00037B  2097 	G$i2c_read_and_stop$0$0 ==.
                           00037B  2098 	C$i2c.h$238$1$102 ==.
                                   2099 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:238: unsigned char i2c_read_and_stop(void)
                                   2100 ;	-----------------------------------------
                                   2101 ;	 function i2c_read_and_stop
                                   2102 ;	-----------------------------------------
      00037B                       2103 _i2c_read_and_stop:
                           00037B  2104 	C$i2c.h$242$1$104 ==.
                                   2105 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:242: while(!SI);                 //Wait until we have data to read
      00037B                       2106 00101$:
      00037B 30 C3 FD         [24] 2107 	jnb	_SI,00101$
                           00037E  2108 	C$i2c.h$243$1$104 ==.
                                   2109 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:243: input_data = SMB0DAT;       //Read the data
      00037E AF C2            [24] 2110 	mov	r7,_SMB0DAT
                           000380  2111 	C$i2c.h$244$1$104 ==.
                                   2112 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:244: SI = 0;                     //Clear SI
      000380 C2 C3            [12] 2113 	clr	_SI
                           000382  2114 	C$i2c.h$245$1$104 ==.
                                   2115 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:245: STO = 1;                    //Set stop bit
      000382 D2 C4            [12] 2116 	setb	_STO
                           000384  2117 	C$i2c.h$246$1$104 ==.
                                   2118 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:246: while(!SI);                 //Wait for stop
      000384                       2119 00104$:
                           000384  2120 	C$i2c.h$247$1$104 ==.
                                   2121 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:247: SI = 0;
      000384 10 C3 02         [24] 2122 	jbc	_SI,00122$
      000387 80 FB            [24] 2123 	sjmp	00104$
      000389                       2124 00122$:
                           000389  2125 	C$i2c.h$248$1$104 ==.
                                   2126 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:248: return input_data;          //Return the read data
      000389 8F 82            [24] 2127 	mov	dpl,r7
                           00038B  2128 	C$i2c.h$249$1$104 ==.
                           00038B  2129 	XG$i2c_read_and_stop$0$0 ==.
      00038B 22               [24] 2130 	ret
                                   2131 ;------------------------------------------------------------
                                   2132 ;Allocation info for local variables in function 'i2c_write_data'
                                   2133 ;------------------------------------------------------------
                                   2134 ;start_reg                 Allocated with name '_i2c_write_data_PARM_2'
                                   2135 ;buffer                    Allocated with name '_i2c_write_data_PARM_3'
                                   2136 ;num_bytes                 Allocated with name '_i2c_write_data_PARM_4'
                                   2137 ;addr                      Allocated to registers r7 
                                   2138 ;i                         Allocated to registers 
                                   2139 ;------------------------------------------------------------
                           00038C  2140 	G$i2c_write_data$0$0 ==.
                           00038C  2141 	C$i2c.h$252$1$104 ==.
                                   2142 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:252: void i2c_write_data(unsigned char addr, unsigned char start_reg, unsigned char *buffer, unsigned char num_bytes)
                                   2143 ;	-----------------------------------------
                                   2144 ;	 function i2c_write_data
                                   2145 ;	-----------------------------------------
      00038C                       2146 _i2c_write_data:
      00038C AF 82            [24] 2147 	mov	r7,dpl
                           00038E  2148 	C$i2c.h$256$1$106 ==.
                                   2149 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:256: EA = 0;                     //Don't allow interrupts during I2C work
      00038E C2 AF            [12] 2150 	clr	_EA
                           000390  2151 	C$i2c.h$257$1$106 ==.
                                   2152 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:257: i2c_start();                //Initiate I2C transfer
      000390 C0 07            [24] 2153 	push	ar7
      000392 12r03r51         [24] 2154 	lcall	_i2c_start
      000395 D0 07            [24] 2155 	pop	ar7
                           000397  2156 	C$i2c.h$258$1$106 ==.
                                   2157 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:258: i2c_write(addr & ~0x01);    //Write the desired address to the bus
      000397 74 FE            [12] 2158 	mov	a,#0xfe
      000399 5F               [12] 2159 	anl	a,r7
      00039A F5 82            [12] 2160 	mov	dpl,a
      00039C 12r03r5E         [24] 2161 	lcall	_i2c_write
                           00039F  2162 	C$i2c.h$259$1$106 ==.
                                   2163 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:259: i2c_write(start_reg);       //Write the start register to the bus
      00039F 85*0A 82         [24] 2164 	mov	dpl,_i2c_write_data_PARM_2
      0003A2 12r03r5E         [24] 2165 	lcall	_i2c_write
                           0003A5  2166 	C$i2c.h$260$1$106 ==.
                                   2167 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:260: for(i=0; i<num_bytes-1; i++) //Write the data to the register(s)
      0003A5 7F 00            [12] 2168 	mov	r7,#0x00
      0003A7                       2169 00103$:
      0003A7 AD*0E            [24] 2170 	mov	r5,_i2c_write_data_PARM_4
      0003A9 7E 00            [12] 2171 	mov	r6,#0x00
      0003AB 1D               [12] 2172 	dec	r5
      0003AC BD FF 01         [24] 2173 	cjne	r5,#0xff,00114$
      0003AF 1E               [12] 2174 	dec	r6
      0003B0                       2175 00114$:
      0003B0 8F 03            [24] 2176 	mov	ar3,r7
      0003B2 7C 00            [12] 2177 	mov	r4,#0x00
      0003B4 C3               [12] 2178 	clr	c
      0003B5 EB               [12] 2179 	mov	a,r3
      0003B6 9D               [12] 2180 	subb	a,r5
      0003B7 EC               [12] 2181 	mov	a,r4
      0003B8 64 80            [12] 2182 	xrl	a,#0x80
      0003BA 8E F0            [24] 2183 	mov	b,r6
      0003BC 63 F0 80         [24] 2184 	xrl	b,#0x80
      0003BF 95 F0            [12] 2185 	subb	a,b
      0003C1 50 1F            [24] 2186 	jnc	00101$
                           0003C3  2187 	C$i2c.h$261$1$106 ==.
                                   2188 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:261: i2c_write(buffer[i]);
      0003C3 EF               [12] 2189 	mov	a,r7
      0003C4 25*0B            [12] 2190 	add	a,_i2c_write_data_PARM_3
      0003C6 FC               [12] 2191 	mov	r4,a
      0003C7 E4               [12] 2192 	clr	a
      0003C8 35*0C            [12] 2193 	addc	a,(_i2c_write_data_PARM_3 + 1)
      0003CA FD               [12] 2194 	mov	r5,a
      0003CB AE*0D            [24] 2195 	mov	r6,(_i2c_write_data_PARM_3 + 2)
      0003CD 8C 82            [24] 2196 	mov	dpl,r4
      0003CF 8D 83            [24] 2197 	mov	dph,r5
      0003D1 8E F0            [24] 2198 	mov	b,r6
      0003D3 12r00r00         [24] 2199 	lcall	__gptrget
      0003D6 F5 82            [12] 2200 	mov	dpl,a
      0003D8 C0 07            [24] 2201 	push	ar7
      0003DA 12r03r5E         [24] 2202 	lcall	_i2c_write
      0003DD D0 07            [24] 2203 	pop	ar7
                           0003DF  2204 	C$i2c.h$260$1$106 ==.
                                   2205 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:260: for(i=0; i<num_bytes-1; i++) //Write the data to the register(s)
      0003DF 0F               [12] 2206 	inc	r7
      0003E0 80 C5            [24] 2207 	sjmp	00103$
      0003E2                       2208 00101$:
                           0003E2  2209 	C$i2c.h$262$1$106 ==.
                                   2210 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:262: i2c_write_and_stop(buffer[num_bytes-1]); //Stop transfer
      0003E2 AE*0E            [24] 2211 	mov	r6,_i2c_write_data_PARM_4
      0003E4 7F 00            [12] 2212 	mov	r7,#0x00
      0003E6 1E               [12] 2213 	dec	r6
      0003E7 BE FF 01         [24] 2214 	cjne	r6,#0xff,00116$
      0003EA 1F               [12] 2215 	dec	r7
      0003EB                       2216 00116$:
      0003EB EE               [12] 2217 	mov	a,r6
      0003EC 25*0B            [12] 2218 	add	a,_i2c_write_data_PARM_3
      0003EE FE               [12] 2219 	mov	r6,a
      0003EF EF               [12] 2220 	mov	a,r7
      0003F0 35*0C            [12] 2221 	addc	a,(_i2c_write_data_PARM_3 + 1)
      0003F2 FF               [12] 2222 	mov	r7,a
      0003F3 AD*0D            [24] 2223 	mov	r5,(_i2c_write_data_PARM_3 + 2)
      0003F5 8E 82            [24] 2224 	mov	dpl,r6
      0003F7 8F 83            [24] 2225 	mov	dph,r7
      0003F9 8D F0            [24] 2226 	mov	b,r5
      0003FB 12r00r00         [24] 2227 	lcall	__gptrget
      0003FE F5 82            [12] 2228 	mov	dpl,a
      000400 12r03r67         [24] 2229 	lcall	_i2c_write_and_stop
                           000403  2230 	C$i2c.h$263$1$106 ==.
                                   2231 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:263: EA = 1;                     //Re-Enable interrupts
      000403 D2 AF            [12] 2232 	setb	_EA
                           000405  2233 	C$i2c.h$264$1$106 ==.
                           000405  2234 	XG$i2c_write_data$0$0 ==.
      000405 22               [24] 2235 	ret
                                   2236 ;------------------------------------------------------------
                                   2237 ;Allocation info for local variables in function 'i2c_read_data'
                                   2238 ;------------------------------------------------------------
                                   2239 ;start_reg                 Allocated with name '_i2c_read_data_PARM_2'
                                   2240 ;buffer                    Allocated with name '_i2c_read_data_PARM_3'
                                   2241 ;num_bytes                 Allocated with name '_i2c_read_data_PARM_4'
                                   2242 ;addr                      Allocated to registers r7 
                                   2243 ;j                         Allocated to registers 
                                   2244 ;------------------------------------------------------------
                           000406  2245 	G$i2c_read_data$0$0 ==.
                           000406  2246 	C$i2c.h$267$1$106 ==.
                                   2247 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:267: void i2c_read_data(unsigned char addr, unsigned char start_reg, unsigned char *buffer, unsigned char num_bytes)
                                   2248 ;	-----------------------------------------
                                   2249 ;	 function i2c_read_data
                                   2250 ;	-----------------------------------------
      000406                       2251 _i2c_read_data:
      000406 AF 82            [24] 2252 	mov	r7,dpl
                           000408  2253 	C$i2c.h$271$1$108 ==.
                                   2254 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:271: EA = 0;                     //Don't allow interrupts during I2C work
      000408 C2 AF            [12] 2255 	clr	_EA
                           00040A  2256 	C$i2c.h$272$1$108 ==.
                                   2257 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:272: i2c_start();                //Start I2C transfer
      00040A C0 07            [24] 2258 	push	ar7
      00040C 12r03r51         [24] 2259 	lcall	_i2c_start
      00040F D0 07            [24] 2260 	pop	ar7
                           000411  2261 	C$i2c.h$273$1$108 ==.
                                   2262 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:273: i2c_write(addr & ~0x01);    //Write address of device that will be written to, send 0
      000411 74 FE            [12] 2263 	mov	a,#0xfe
      000413 5F               [12] 2264 	anl	a,r7
      000414 F5 82            [12] 2265 	mov	dpl,a
      000416 C0 07            [24] 2266 	push	ar7
      000418 12r03r5E         [24] 2267 	lcall	_i2c_write
                           00041B  2268 	C$i2c.h$274$1$108 ==.
                                   2269 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:274: i2c_write_and_stop(start_reg); //Write & stop the 1st register to be read
      00041B 85*0F 82         [24] 2270 	mov	dpl,_i2c_read_data_PARM_2
      00041E 12r03r67         [24] 2271 	lcall	_i2c_write_and_stop
                           000421  2272 	C$i2c.h$275$1$108 ==.
                                   2273 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:275: i2c_start();                //Start I2C transfer
      000421 12r03r51         [24] 2274 	lcall	_i2c_start
      000424 D0 07            [24] 2275 	pop	ar7
                           000426  2276 	C$i2c.h$276$1$108 ==.
                                   2277 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:276: i2c_write(addr | 0x01);     //Write address again, this time indicating a read operation
      000426 74 01            [12] 2278 	mov	a,#0x01
      000428 4F               [12] 2279 	orl	a,r7
      000429 F5 82            [12] 2280 	mov	dpl,a
      00042B 12r03r5E         [24] 2281 	lcall	_i2c_write
                           00042E  2282 	C$i2c.h$277$1$108 ==.
                                   2283 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:277: for(j = 0; j < num_bytes - 1; j++)
      00042E 7F 00            [12] 2284 	mov	r7,#0x00
      000430                       2285 00103$:
      000430 AD*13            [24] 2286 	mov	r5,_i2c_read_data_PARM_4
      000432 7E 00            [12] 2287 	mov	r6,#0x00
      000434 1D               [12] 2288 	dec	r5
      000435 BD FF 01         [24] 2289 	cjne	r5,#0xff,00114$
      000438 1E               [12] 2290 	dec	r6
      000439                       2291 00114$:
      000439 8F 03            [24] 2292 	mov	ar3,r7
      00043B 7C 00            [12] 2293 	mov	r4,#0x00
      00043D C3               [12] 2294 	clr	c
      00043E EB               [12] 2295 	mov	a,r3
      00043F 9D               [12] 2296 	subb	a,r5
      000440 EC               [12] 2297 	mov	a,r4
      000441 64 80            [12] 2298 	xrl	a,#0x80
      000443 8E F0            [24] 2299 	mov	b,r6
      000445 63 F0 80         [24] 2300 	xrl	b,#0x80
      000448 95 F0            [12] 2301 	subb	a,b
      00044A 50 2E            [24] 2302 	jnc	00101$
                           00044C  2303 	C$i2c.h$279$2$109 ==.
                                   2304 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:279: AA = 1;                 //Set acknowledge bit
      00044C D2 C2            [12] 2305 	setb	_AA
                           00044E  2306 	C$i2c.h$280$2$109 ==.
                                   2307 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:280: buffer[j] = i2c_read(); //Read data, save it in buffer
      00044E EF               [12] 2308 	mov	a,r7
      00044F 25*10            [12] 2309 	add	a,_i2c_read_data_PARM_3
      000451 FC               [12] 2310 	mov	r4,a
      000452 E4               [12] 2311 	clr	a
      000453 35*11            [12] 2312 	addc	a,(_i2c_read_data_PARM_3 + 1)
      000455 FD               [12] 2313 	mov	r5,a
      000456 AE*12            [24] 2314 	mov	r6,(_i2c_read_data_PARM_3 + 2)
      000458 C0 07            [24] 2315 	push	ar7
      00045A C0 06            [24] 2316 	push	ar6
      00045C C0 05            [24] 2317 	push	ar5
      00045E C0 04            [24] 2318 	push	ar4
      000460 12r03r72         [24] 2319 	lcall	_i2c_read
      000463 AB 82            [24] 2320 	mov	r3,dpl
      000465 D0 04            [24] 2321 	pop	ar4
      000467 D0 05            [24] 2322 	pop	ar5
      000469 D0 06            [24] 2323 	pop	ar6
      00046B D0 07            [24] 2324 	pop	ar7
      00046D 8C 82            [24] 2325 	mov	dpl,r4
      00046F 8D 83            [24] 2326 	mov	dph,r5
      000471 8E F0            [24] 2327 	mov	b,r6
      000473 EB               [12] 2328 	mov	a,r3
      000474 12r00r00         [24] 2329 	lcall	__gptrput
                           000477  2330 	C$i2c.h$277$1$108 ==.
                                   2331 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:277: for(j = 0; j < num_bytes - 1; j++)
      000477 0F               [12] 2332 	inc	r7
      000478 80 B6            [24] 2333 	sjmp	00103$
      00047A                       2334 00101$:
                           00047A  2335 	C$i2c.h$282$1$108 ==.
                                   2336 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:282: AA = 0;
      00047A C2 C2            [12] 2337 	clr	_AA
                           00047C  2338 	C$i2c.h$283$1$108 ==.
                                   2339 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:283: buffer[num_bytes - 1] = i2c_read_and_stop(); //Read the last byte and stop, save it in the buffer
      00047C AE*13            [24] 2340 	mov	r6,_i2c_read_data_PARM_4
      00047E 7F 00            [12] 2341 	mov	r7,#0x00
      000480 1E               [12] 2342 	dec	r6
      000481 BE FF 01         [24] 2343 	cjne	r6,#0xff,00116$
      000484 1F               [12] 2344 	dec	r7
      000485                       2345 00116$:
      000485 EE               [12] 2346 	mov	a,r6
      000486 25*10            [12] 2347 	add	a,_i2c_read_data_PARM_3
      000488 FE               [12] 2348 	mov	r6,a
      000489 EF               [12] 2349 	mov	a,r7
      00048A 35*11            [12] 2350 	addc	a,(_i2c_read_data_PARM_3 + 1)
      00048C FF               [12] 2351 	mov	r7,a
      00048D AD*12            [24] 2352 	mov	r5,(_i2c_read_data_PARM_3 + 2)
      00048F C0 07            [24] 2353 	push	ar7
      000491 C0 06            [24] 2354 	push	ar6
      000493 C0 05            [24] 2355 	push	ar5
      000495 12r03r7B         [24] 2356 	lcall	_i2c_read_and_stop
      000498 AC 82            [24] 2357 	mov	r4,dpl
      00049A D0 05            [24] 2358 	pop	ar5
      00049C D0 06            [24] 2359 	pop	ar6
      00049E D0 07            [24] 2360 	pop	ar7
      0004A0 8E 82            [24] 2361 	mov	dpl,r6
      0004A2 8F 83            [24] 2362 	mov	dph,r7
      0004A4 8D F0            [24] 2363 	mov	b,r5
      0004A6 EC               [12] 2364 	mov	a,r4
      0004A7 12r00r00         [24] 2365 	lcall	__gptrput
                           0004AA  2366 	C$i2c.h$284$1$108 ==.
                                   2367 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:284: EA = 1;                     //Re-Enable interrupts
      0004AA D2 AF            [12] 2368 	setb	_EA
                           0004AC  2369 	C$i2c.h$285$1$108 ==.
                           0004AC  2370 	XG$i2c_read_data$0$0 ==.
      0004AC 22               [24] 2371 	ret
                                   2372 ;------------------------------------------------------------
                                   2373 ;Allocation info for local variables in function 'Accel_Init'
                                   2374 ;------------------------------------------------------------
                           0004AD  2375 	G$Accel_Init$0$0 ==.
                           0004AD  2376 	C$i2c.h$294$1$108 ==.
                                   2377 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:294: void Accel_Init(void)
                                   2378 ;	-----------------------------------------
                                   2379 ;	 function Accel_Init
                                   2380 ;	-----------------------------------------
      0004AD                       2381 _Accel_Init:
                           0004AD  2382 	C$i2c.h$298$1$111 ==.
                                   2383 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:298: Data2[0]=0x23;  //normal power mode, 50Hz ODR, y & x axes enabled
      0004AD 75*00 23         [24] 2384 	mov	_Data2,#0x23
                           0004B0  2385 	C$i2c.h$300$1$111 ==.
                                   2386 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:300: Data2[1]=0x00;  //default - no filtering
      0004B0 75*01 00         [24] 2387 	mov	(_Data2 + 0x0001),#0x00
                           0004B3  2388 	C$i2c.h$301$1$111 ==.
                                   2389 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:301: Data2[1]=0x10;  //filtered data selected, HPF = 1.0->0.125Hz
      0004B3 75*01 10         [24] 2390 	mov	(_Data2 + 0x0001),#0x10
                           0004B6  2391 	C$i2c.h$302$1$111 ==.
                                   2392 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:302: Data2[2]=0x00;  //default - no interrupts enabled
      0004B6 75*02 00         [24] 2393 	mov	(_Data2 + 0x0002),#0x00
                           0004B9  2394 	C$i2c.h$304$1$111 ==.
                                   2395 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:304: i2c_write_data(addr_accel, 0x20, Data2, 1);
      0004B9 75*0Br00         [24] 2396 	mov	_i2c_write_data_PARM_3,#_Data2
      0004BC 75*0C 00         [24] 2397 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      0004BF 75*0D 40         [24] 2398 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      0004C2 75*0A 20         [24] 2399 	mov	_i2c_write_data_PARM_2,#0x20
      0004C5 75*0E 01         [24] 2400 	mov	_i2c_write_data_PARM_4,#0x01
      0004C8 75 82 30         [24] 2401 	mov	dpl,#0x30
      0004CB 12r03r8C         [24] 2402 	lcall	_i2c_write_data
                           0004CE  2403 	C$i2c.h$310$1$111 ==.
                           0004CE  2404 	XG$Accel_Init$0$0 ==.
      0004CE 22               [24] 2405 	ret
                                   2406 ;------------------------------------------------------------
                                   2407 ;Allocation info for local variables in function 'Accel_Init_C'
                                   2408 ;------------------------------------------------------------
                           0004CF  2409 	G$Accel_Init_C$0$0 ==.
                           0004CF  2410 	C$i2c.h$313$1$111 ==.
                                   2411 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:313: void Accel_Init_C(void)
                                   2412 ;	-----------------------------------------
                                   2413 ;	 function Accel_Init_C
                                   2414 ;	-----------------------------------------
      0004CF                       2415 _Accel_Init_C:
                           0004CF  2416 	C$i2c.h$318$1$113 ==.
                                   2417 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:318: Data2[0]=0x04;  //set register address auto increment bit
      0004CF 75*00 04         [24] 2418 	mov	_Data2,#0x04
                           0004D2  2419 	C$i2c.h$319$1$113 ==.
                                   2420 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:319: i2c_write_data(addr_accelC, 0x23, Data2, 1);
      0004D2 75*0Br00         [24] 2421 	mov	_i2c_write_data_PARM_3,#_Data2
      0004D5 75*0C 00         [24] 2422 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      0004D8 75*0D 40         [24] 2423 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      0004DB 75*0A 23         [24] 2424 	mov	_i2c_write_data_PARM_2,#0x23
      0004DE 75*0E 01         [24] 2425 	mov	_i2c_write_data_PARM_4,#0x01
      0004E1 75 82 3A         [24] 2426 	mov	dpl,#0x3a
      0004E4 12r03r8C         [24] 2427 	lcall	_i2c_write_data
                           0004E7  2428 	C$i2c.h$321$1$113 ==.
                                   2429 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:321: Data2[0]=0x6B;  //R20 normal power mode, 800Hz ODR, y & x axes enabled
      0004E7 75*00 6B         [24] 2430 	mov	_Data2,#0x6b
                           0004EA  2431 	C$i2c.h$323$1$113 ==.
                                   2432 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:323: Data2[1]=0x00;  //R21 Default - no HP filtering
      0004EA 75*01 00         [24] 2433 	mov	(_Data2 + 0x0001),#0x00
                           0004ED  2434 	C$i2c.h$325$1$113 ==.
                                   2435 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:325: Data2[2]=0x00;  //R22 Default - no interrupts enabled
      0004ED 75*02 00         [24] 2436 	mov	(_Data2 + 0x0002),#0x00
                           0004F0  2437 	C$i2c.h$326$1$113 ==.
                                   2438 ;	C:/Program Files/SDCC/bin/../include/mcs51/i2c.h:326: i2c_write_data(addr_accelC, 0x20, Data2, 1);
      0004F0 75*0Br00         [24] 2439 	mov	_i2c_write_data_PARM_3,#_Data2
      0004F3 75*0C 00         [24] 2440 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      0004F6 75*0D 40         [24] 2441 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      0004F9 75*0A 20         [24] 2442 	mov	_i2c_write_data_PARM_2,#0x20
      0004FC 75*0E 01         [24] 2443 	mov	_i2c_write_data_PARM_4,#0x01
      0004FF 75 82 3A         [24] 2444 	mov	dpl,#0x3a
      000502 12r03r8C         [24] 2445 	lcall	_i2c_write_data
                           000505  2446 	C$i2c.h$328$1$113 ==.
                           000505  2447 	XG$Accel_Init_C$0$0 ==.
      000505 22               [24] 2448 	ret
                                   2449 ;------------------------------------------------------------
                                   2450 ;Allocation info for local variables in function 'main'
                                   2451 ;------------------------------------------------------------
                           000506  2452 	G$main$0$0 ==.
                           000506  2453 	C$Lab_5.c$74$1$113 ==.
                                   2454 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:74: void main(void)
                                   2455 ;	-----------------------------------------
                                   2456 ;	 function main
                                   2457 ;	-----------------------------------------
      000506                       2458 _main:
                           000506  2459 	C$Lab_5.c$77$1$150 ==.
                                   2460 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:77: Sys_Init();
      000506 12r00r37         [24] 2461 	lcall	_Sys_Init
                           000509  2462 	C$Lab_5.c$78$1$150 ==.
                                   2463 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:78: putchar(' ');
      000509 75 82 20         [24] 2464 	mov	dpl,#0x20
      00050C 12r00r4A         [24] 2465 	lcall	_putchar
                           00050F  2466 	C$Lab_5.c$79$1$150 ==.
                                   2467 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:79: Port_Init();
      00050F 12r0Er6B         [24] 2468 	lcall	_Port_Init
                           000512  2469 	C$Lab_5.c$80$1$150 ==.
                                   2470 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:80: XBR0_Init();
      000512 12r0Er84         [24] 2471 	lcall	_XBR0_Init
                           000515  2472 	C$Lab_5.c$81$1$150 ==.
                                   2473 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:81: PCA_Init();
      000515 12r0Er88         [24] 2474 	lcall	_PCA_Init
                           000518  2475 	C$Lab_5.c$82$1$150 ==.
                                   2476 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:82: Interrupt_Init();
      000518 12r0Er98         [24] 2477 	lcall	_Interrupt_Init
                           00051B  2478 	C$Lab_5.c$83$1$150 ==.
                                   2479 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:83: SMB_Init();
      00051B 12r0ErC1         [24] 2480 	lcall	_SMB_Init
                           00051E  2481 	C$Lab_5.c$84$1$150 ==.
                                   2482 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:84: ADC_Init();
      00051E 12r0ErC7         [24] 2483 	lcall	_ADC_Init
                           000521  2484 	C$Lab_5.c$85$1$150 ==.
                                   2485 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:85: Accel_Init_C();
      000521 12r04rCF         [24] 2486 	lcall	_Accel_Init_C
                           000524  2487 	C$Lab_5.c$86$1$150 ==.
                                   2488 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:86: CR = 1;
      000524 D2 DE            [12] 2489 	setb	_CR
                           000526  2490 	C$Lab_5.c$89$1$150 ==.
                                   2491 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:89: dr_DrivePW = dr_DrivePW_Neutral;
      000526 85*14*1A         [24] 2492 	mov	_dr_DrivePW,_dr_DrivePW_Neutral
      000529 85*15*1B         [24] 2493 	mov	(_dr_DrivePW + 1),(_dr_DrivePW_Neutral + 1)
                           00052C  2494 	C$Lab_5.c$90$1$150 ==.
                                   2495 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:90: PCA0CP2 = 0xFFFF - dr_DrivePW;
      00052C 74 FF            [12] 2496 	mov	a,#0xff
      00052E C3               [12] 2497 	clr	c
      00052F 95*1A            [12] 2498 	subb	a,_dr_DrivePW
      000531 F5 EC            [12] 2499 	mov	((_PCA0CP2 >> 0) & 0xFF),a
      000533 74 FF            [12] 2500 	mov	a,#0xff
      000535 95*1B            [12] 2501 	subb	a,(_dr_DrivePW + 1)
      000537 F5 FC            [12] 2502 	mov	((_PCA0CP2 >> 8) & 0xFF),a
                           000539  2503 	C$Lab_5.c$91$1$150 ==.
                                   2504 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:91: counts = 0;
      000539 E4               [12] 2505 	clr	a
      00053A F5*2B            [12] 2506 	mov	_counts,a
      00053C F5*2C            [12] 2507 	mov	(_counts + 1),a
                           00053E  2508 	C$Lab_5.c$92$1$150 ==.
                                   2509 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:92: while (counts <= 50);
      00053E                       2510 00101$:
      00053E C3               [12] 2511 	clr	c
      00053F 74 32            [12] 2512 	mov	a,#0x32
      000541 95*2B            [12] 2513 	subb	a,_counts
      000543 E4               [12] 2514 	clr	a
      000544 95*2C            [12] 2515 	subb	a,(_counts + 1)
      000546 50 F6            [24] 2516 	jnc	00101$
                           000548  2517 	C$Lab_5.c$93$1$150 ==.
                                   2518 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:93: lcd_clear();
      000548 12r01r00         [24] 2519 	lcall	_lcd_clear
                           00054B  2520 	C$Lab_5.c$95$1$150 ==.
                                   2521 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:95: while(1)
      00054B                       2522 00115$:
                           00054B  2523 	C$Lab_5.c$97$2$151 ==.
                                   2524 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:97: if (RSSS)		//switch off
      00054B 30 B7 3C         [24] 2525 	jnb	_RSSS,00105$
                           00054E  2526 	C$Lab_5.c$100$3$152 ==.
                                   2527 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:100: dr_DrivePW = dr_DrivePW_Neutral;
      00054E 85*14*1A         [24] 2528 	mov	_dr_DrivePW,_dr_DrivePW_Neutral
      000551 85*15*1B         [24] 2529 	mov	(_dr_DrivePW + 1),(_dr_DrivePW_Neutral + 1)
                           000554  2530 	C$Lab_5.c$101$3$152 ==.
                                   2531 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:101: PCA0CP2 = 0xFFFF - dr_DrivePW;
      000554 74 FF            [12] 2532 	mov	a,#0xff
      000556 C3               [12] 2533 	clr	c
      000557 95*1A            [12] 2534 	subb	a,_dr_DrivePW
      000559 F5 EC            [12] 2535 	mov	((_PCA0CP2 >> 0) & 0xFF),a
      00055B 74 FF            [12] 2536 	mov	a,#0xff
      00055D 95*1B            [12] 2537 	subb	a,(_dr_DrivePW + 1)
      00055F F5 FC            [12] 2538 	mov	((_PCA0CP2 >> 8) & 0xFF),a
                           000561  2539 	C$Lab_5.c$104$3$152 ==.
                                   2540 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:104: SV_SERVO_PW = SV_PW_CENTER;
      000561 85*1F*25         [24] 2541 	mov	_SV_SERVO_PW,_SV_PW_CENTER
      000564 85*20*26         [24] 2542 	mov	(_SV_SERVO_PW + 1),(_SV_PW_CENTER + 1)
                           000567  2543 	C$Lab_5.c$105$3$152 ==.
                                   2544 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:105: PCA0CPL0 = 0xFFFF - SV_SERVO_PW;
      000567 AF*25            [24] 2545 	mov	r7,_SV_SERVO_PW
      000569 74 FF            [12] 2546 	mov	a,#0xff
      00056B C3               [12] 2547 	clr	c
      00056C 9F               [12] 2548 	subb	a,r7
      00056D F5 EA            [12] 2549 	mov	_PCA0CPL0,a
                           00056F  2550 	C$Lab_5.c$106$3$152 ==.
                                   2551 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:106: PCA0CPH0 = (0xFFFF - SV_SERVO_PW) >> 8;
      00056F 74 FF            [12] 2552 	mov	a,#0xff
      000571 C3               [12] 2553 	clr	c
      000572 95*25            [12] 2554 	subb	a,_SV_SERVO_PW
      000574 74 FF            [12] 2555 	mov	a,#0xff
      000576 95*26            [12] 2556 	subb	a,(_SV_SERVO_PW + 1)
      000578 FF               [12] 2557 	mov	r7,a
      000579 8F FA            [24] 2558 	mov	_PCA0CPH0,r7
                           00057B  2559 	C$Lab_5.c$109$3$152 ==.
                                   2560 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:109: getGain();
      00057B 12r0CrCF         [24] 2561 	lcall	_getGain
                           00057E  2562 	C$Lab_5.c$111$3$152 ==.
                                   2563 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:111: ADC_value = read_AD_input(3);
      00057E 75 82 03         [24] 2564 	mov	dpl,#0x03
      000581 12r0ErD1         [24] 2565 	lcall	_read_AD_input
      000584 85 82*1E         [24] 2566 	mov	_ADC_value,dpl
                           000587  2567 	C$Lab_5.c$112$3$152 ==.
                                   2568 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:112: Accel_Calibrate();
      000587 12r0Cr05         [24] 2569 	lcall	_Accel_Calibrate
      00058A                       2570 00105$:
                           00058A  2571 	C$Lab_5.c$116$2$151 ==.
                                   2572 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:116: if (!RSSS)		//switch on
      00058A 20 B7 BE         [24] 2573 	jb	_RSSS,00115$
                           00058D  2574 	C$Lab_5.c$118$3$153 ==.
                                   2575 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:118: if (dr_DrivePW != dr_DrivePW_Neutral)		//if not level, BiLED green
      00058D E5*14            [12] 2576 	mov	a,_dr_DrivePW_Neutral
      00058F B5*1A 07         [24] 2577 	cjne	a,_dr_DrivePW,00146$
      000592 E5*15            [12] 2578 	mov	a,(_dr_DrivePW_Neutral + 1)
      000594 B5*1B 02         [24] 2579 	cjne	a,(_dr_DrivePW + 1),00146$
      000597 80 06            [24] 2580 	sjmp	00107$
      000599                       2581 00146$:
                           000599  2582 	C$Lab_5.c$120$4$154 ==.
                                   2583 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:120: BLED1 = 1;
      000599 D2 B5            [12] 2584 	setb	_BLED1
                           00059B  2585 	C$Lab_5.c$121$4$154 ==.
                                   2586 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:121: BLED2 = 0;
      00059B C2 B6            [12] 2587 	clr	_BLED2
      00059D 80 04            [24] 2588 	sjmp	00108$
      00059F                       2589 00107$:
                           00059F  2590 	C$Lab_5.c$125$4$155 ==.
                                   2591 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:125: BLED1 = 0;
      00059F C2 B5            [12] 2592 	clr	_BLED1
                           0005A1  2593 	C$Lab_5.c$126$4$155 ==.
                                   2594 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:126: BLED2 = 1;
      0005A1 D2 B6            [12] 2595 	setb	_BLED2
      0005A3                       2596 00108$:
                           0005A3  2597 	C$Lab_5.c$129$3$153 ==.
                                   2598 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:129: ReadAccel();
      0005A3 12r0ArBE         [24] 2599 	lcall	_ReadAccel
                           0005A6  2600 	C$Lab_5.c$130$3$153 ==.
                                   2601 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:130: errHeading();
      0005A6 12r08rAE         [24] 2602 	lcall	_errHeading
                           0005A9  2603 	C$Lab_5.c$131$3$153 ==.
                                   2604 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:131: Set_DrivePulsewidth();
      0005A9 12r05rC2         [24] 2605 	lcall	_Set_DrivePulsewidth
                           0005AC  2606 	C$Lab_5.c$133$3$153 ==.
                                   2607 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:133: counts = 0;
      0005AC E4               [12] 2608 	clr	a
      0005AD F5*2B            [12] 2609 	mov	_counts,a
      0005AF F5*2C            [12] 2610 	mov	(_counts + 1),a
                           0005B1  2611 	C$Lab_5.c$134$3$153 ==.
                                   2612 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:134: while (counts < 20);		//400ms wait
      0005B1                       2613 00109$:
      0005B1 C3               [12] 2614 	clr	c
      0005B2 E5*2B            [12] 2615 	mov	a,_counts
      0005B4 94 14            [12] 2616 	subb	a,#0x14
      0005B6 E5*2C            [12] 2617 	mov	a,(_counts + 1)
      0005B8 94 00            [12] 2618 	subb	a,#0x00
      0005BA 40 F5            [24] 2619 	jc	00109$
                           0005BC  2620 	C$Lab_5.c$135$3$153 ==.
                                   2621 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:135: printData();			
      0005BC 12r0DrAB         [24] 2622 	lcall	_printData
      0005BF 80 8A            [24] 2623 	sjmp	00115$
                           0005C1  2624 	C$Lab_5.c$138$1$150 ==.
                           0005C1  2625 	XG$main$0$0 ==.
      0005C1 22               [24] 2626 	ret
                                   2627 ;------------------------------------------------------------
                                   2628 ;Allocation info for local variables in function 'Set_DrivePulsewidth'
                                   2629 ;------------------------------------------------------------
                                   2630 ;sloc0                     Allocated with name '_Set_DrivePulsewidth_sloc0_1_0'
                                   2631 ;------------------------------------------------------------
                           0005C2  2632 	G$Set_DrivePulsewidth$0$0 ==.
                           0005C2  2633 	C$Lab_5.c$144$1$150 ==.
                                   2634 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:144: void Set_DrivePulsewidth(void)					//pulsewidth depends on both A/D and inputted gain
                                   2635 ;	-----------------------------------------
                                   2636 ;	 function Set_DrivePulsewidth
                                   2637 ;	-----------------------------------------
      0005C2                       2638 _Set_DrivePulsewidth:
                           0005C2  2639 	C$Lab_5.c$146$1$157 ==.
                                   2640 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:146: if (abs(gx) > 35 || abs(gy) > 15)			//if there is more than a 25 in either x accel or y accel
      0005C2 85*2F 82         [24] 2641 	mov	dpl,_gx
      0005C5 85*30 83         [24] 2642 	mov	dph,(_gx + 1)
      0005C8 12r00r00         [24] 2643 	lcall	_abs
      0005CB AE 82            [24] 2644 	mov	r6,dpl
      0005CD AF 83            [24] 2645 	mov	r7,dph
      0005CF C3               [12] 2646 	clr	c
      0005D0 74 23            [12] 2647 	mov	a,#0x23
      0005D2 9E               [12] 2648 	subb	a,r6
      0005D3 74 80            [12] 2649 	mov	a,#(0x00 ^ 0x80)
      0005D5 8F F0            [24] 2650 	mov	b,r7
      0005D7 63 F0 80         [24] 2651 	xrl	b,#0x80
      0005DA 95 F0            [12] 2652 	subb	a,b
      0005DC 40 1F            [24] 2653 	jc	00106$
      0005DE 85*31 82         [24] 2654 	mov	dpl,_gy
      0005E1 85*32 83         [24] 2655 	mov	dph,(_gy + 1)
      0005E4 12r00r00         [24] 2656 	lcall	_abs
      0005E7 AE 82            [24] 2657 	mov	r6,dpl
      0005E9 AF 83            [24] 2658 	mov	r7,dph
      0005EB C3               [12] 2659 	clr	c
      0005EC 74 0F            [12] 2660 	mov	a,#0x0f
      0005EE 9E               [12] 2661 	subb	a,r6
      0005EF 74 80            [12] 2662 	mov	a,#(0x00 ^ 0x80)
      0005F1 8F F0            [24] 2663 	mov	b,r7
      0005F3 63 F0 80         [24] 2664 	xrl	b,#0x80
      0005F6 95 F0            [12] 2665 	subb	a,b
      0005F8 40 03            [24] 2666 	jc	00132$
      0005FA 02r08r78         [24] 2667 	ljmp	00107$
      0005FD                       2668 00132$:
      0005FD                       2669 00106$:
                           0005FD  2670 	C$Lab_5.c$148$2$158 ==.
                                   2671 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:148: if (FBSS == 1)					//driving forward
      0005FD 20 B4 03         [24] 2672 	jb	_FBSS,00133$
      000600 02r07r3A         [24] 2673 	ljmp	00104$
      000603                       2674 00133$:
                           000603  2675 	C$Lab_5.c$150$3$159 ==.
                                   2676 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:150: dr_DrivePW = dr_DrivePW_Neutral + 50 + ((ADC_value/255.0) * dr_ky * abs(gy));
      000603 74 32            [12] 2677 	mov	a,#0x32
      000605 25*14            [12] 2678 	add	a,_dr_DrivePW_Neutral
      000607 F5*3B            [12] 2679 	mov	_Set_DrivePulsewidth_sloc0_1_0,a
      000609 E4               [12] 2680 	clr	a
      00060A 35*15            [12] 2681 	addc	a,(_dr_DrivePW_Neutral + 1)
      00060C F5*3C            [12] 2682 	mov	(_Set_DrivePulsewidth_sloc0_1_0 + 1),a
      00060E 85*1E 82         [24] 2683 	mov	dpl,_ADC_value
      000611 12r00r00         [24] 2684 	lcall	___uchar2fs
      000614 AA 82            [24] 2685 	mov	r2,dpl
      000616 AB 83            [24] 2686 	mov	r3,dph
      000618 AC F0            [24] 2687 	mov	r4,b
      00061A FD               [12] 2688 	mov	r5,a
      00061B E4               [12] 2689 	clr	a
      00061C C0 E0            [24] 2690 	push	acc
      00061E C0 E0            [24] 2691 	push	acc
      000620 74 7F            [12] 2692 	mov	a,#0x7f
      000622 C0 E0            [24] 2693 	push	acc
      000624 74 43            [12] 2694 	mov	a,#0x43
      000626 C0 E0            [24] 2695 	push	acc
      000628 8A 82            [24] 2696 	mov	dpl,r2
      00062A 8B 83            [24] 2697 	mov	dph,r3
      00062C 8C F0            [24] 2698 	mov	b,r4
      00062E ED               [12] 2699 	mov	a,r5
      00062F 12r00r00         [24] 2700 	lcall	___fsdiv
      000632 AA 82            [24] 2701 	mov	r2,dpl
      000634 AB 83            [24] 2702 	mov	r3,dph
      000636 AC F0            [24] 2703 	mov	r4,b
      000638 FD               [12] 2704 	mov	r5,a
      000639 E5 81            [12] 2705 	mov	a,sp
      00063B 24 FC            [12] 2706 	add	a,#0xfc
      00063D F5 81            [12] 2707 	mov	sp,a
      00063F 85*1D 82         [24] 2708 	mov	dpl,_dr_ky
      000642 C0 05            [24] 2709 	push	ar5
      000644 C0 04            [24] 2710 	push	ar4
      000646 C0 03            [24] 2711 	push	ar3
      000648 C0 02            [24] 2712 	push	ar2
      00064A 12r00r00         [24] 2713 	lcall	___schar2fs
      00064D A8 82            [24] 2714 	mov	r0,dpl
      00064F A9 83            [24] 2715 	mov	r1,dph
      000651 AE F0            [24] 2716 	mov	r6,b
      000653 FF               [12] 2717 	mov	r7,a
      000654 D0 02            [24] 2718 	pop	ar2
      000656 D0 03            [24] 2719 	pop	ar3
      000658 D0 04            [24] 2720 	pop	ar4
      00065A D0 05            [24] 2721 	pop	ar5
      00065C C0 00            [24] 2722 	push	ar0
      00065E C0 01            [24] 2723 	push	ar1
      000660 C0 06            [24] 2724 	push	ar6
      000662 C0 07            [24] 2725 	push	ar7
      000664 8A 82            [24] 2726 	mov	dpl,r2
      000666 8B 83            [24] 2727 	mov	dph,r3
      000668 8C F0            [24] 2728 	mov	b,r4
      00066A ED               [12] 2729 	mov	a,r5
      00066B 12r00r00         [24] 2730 	lcall	___fsmul
      00066E AC 82            [24] 2731 	mov	r4,dpl
      000670 AD 83            [24] 2732 	mov	r5,dph
      000672 AE F0            [24] 2733 	mov	r6,b
      000674 FF               [12] 2734 	mov	r7,a
      000675 E5 81            [12] 2735 	mov	a,sp
      000677 24 FC            [12] 2736 	add	a,#0xfc
      000679 F5 81            [12] 2737 	mov	sp,a
      00067B 85*31 82         [24] 2738 	mov	dpl,_gy
      00067E 85*32 83         [24] 2739 	mov	dph,(_gy + 1)
      000681 C0 07            [24] 2740 	push	ar7
      000683 C0 06            [24] 2741 	push	ar6
      000685 C0 05            [24] 2742 	push	ar5
      000687 C0 04            [24] 2743 	push	ar4
      000689 12r00r00         [24] 2744 	lcall	_abs
      00068C 12r00r00         [24] 2745 	lcall	___sint2fs
      00068F A8 82            [24] 2746 	mov	r0,dpl
      000691 A9 83            [24] 2747 	mov	r1,dph
      000693 AA F0            [24] 2748 	mov	r2,b
      000695 FB               [12] 2749 	mov	r3,a
      000696 D0 04            [24] 2750 	pop	ar4
      000698 D0 05            [24] 2751 	pop	ar5
      00069A D0 06            [24] 2752 	pop	ar6
      00069C D0 07            [24] 2753 	pop	ar7
      00069E C0 00            [24] 2754 	push	ar0
      0006A0 C0 01            [24] 2755 	push	ar1
      0006A2 C0 02            [24] 2756 	push	ar2
      0006A4 C0 03            [24] 2757 	push	ar3
      0006A6 8C 82            [24] 2758 	mov	dpl,r4
      0006A8 8D 83            [24] 2759 	mov	dph,r5
      0006AA 8E F0            [24] 2760 	mov	b,r6
      0006AC EF               [12] 2761 	mov	a,r7
      0006AD 12r00r00         [24] 2762 	lcall	___fsmul
      0006B0 AC 82            [24] 2763 	mov	r4,dpl
      0006B2 AD 83            [24] 2764 	mov	r5,dph
      0006B4 AE F0            [24] 2765 	mov	r6,b
      0006B6 FF               [12] 2766 	mov	r7,a
      0006B7 E5 81            [12] 2767 	mov	a,sp
      0006B9 24 FC            [12] 2768 	add	a,#0xfc
      0006BB F5 81            [12] 2769 	mov	sp,a
      0006BD 85*3B 82         [24] 2770 	mov	dpl,_Set_DrivePulsewidth_sloc0_1_0
      0006C0 85*3C 83         [24] 2771 	mov	dph,(_Set_DrivePulsewidth_sloc0_1_0 + 1)
      0006C3 C0 07            [24] 2772 	push	ar7
      0006C5 C0 06            [24] 2773 	push	ar6
      0006C7 C0 05            [24] 2774 	push	ar5
      0006C9 C0 04            [24] 2775 	push	ar4
      0006CB 12r00r00         [24] 2776 	lcall	___uint2fs
      0006CE A8 82            [24] 2777 	mov	r0,dpl
      0006D0 A9 83            [24] 2778 	mov	r1,dph
      0006D2 AA F0            [24] 2779 	mov	r2,b
      0006D4 FB               [12] 2780 	mov	r3,a
      0006D5 D0 04            [24] 2781 	pop	ar4
      0006D7 D0 05            [24] 2782 	pop	ar5
      0006D9 D0 06            [24] 2783 	pop	ar6
      0006DB D0 07            [24] 2784 	pop	ar7
      0006DD C0 04            [24] 2785 	push	ar4
      0006DF C0 05            [24] 2786 	push	ar5
      0006E1 C0 06            [24] 2787 	push	ar6
      0006E3 C0 07            [24] 2788 	push	ar7
      0006E5 88 82            [24] 2789 	mov	dpl,r0
      0006E7 89 83            [24] 2790 	mov	dph,r1
      0006E9 8A F0            [24] 2791 	mov	b,r2
      0006EB EB               [12] 2792 	mov	a,r3
      0006EC 12r00r00         [24] 2793 	lcall	___fsadd
      0006EF AC 82            [24] 2794 	mov	r4,dpl
      0006F1 AD 83            [24] 2795 	mov	r5,dph
      0006F3 AE F0            [24] 2796 	mov	r6,b
      0006F5 FF               [12] 2797 	mov	r7,a
      0006F6 E5 81            [12] 2798 	mov	a,sp
      0006F8 24 FC            [12] 2799 	add	a,#0xfc
      0006FA F5 81            [12] 2800 	mov	sp,a
      0006FC 8C 82            [24] 2801 	mov	dpl,r4
      0006FE 8D 83            [24] 2802 	mov	dph,r5
      000700 8E F0            [24] 2803 	mov	b,r6
      000702 EF               [12] 2804 	mov	a,r7
      000703 12r00r00         [24] 2805 	lcall	___fs2uint
      000706 85 82*1A         [24] 2806 	mov	_dr_DrivePW,dpl
      000709 85 83*1B         [24] 2807 	mov	(_dr_DrivePW + 1),dph
                           00070C  2808 	C$Lab_5.c$151$3$159 ==.
                                   2809 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:151: dr_DrivePW += dr_kx * abs(gx);
      00070C 85*2F 82         [24] 2810 	mov	dpl,_gx
      00070F 85*30 83         [24] 2811 	mov	dph,(_gx + 1)
      000712 12r00r00         [24] 2812 	lcall	_abs
      000715 85 82*00         [24] 2813 	mov	__mulint_PARM_2,dpl
      000718 85 83*01         [24] 2814 	mov	(__mulint_PARM_2 + 1),dph
      00071B E5*1C            [12] 2815 	mov	a,_dr_kx
      00071D FE               [12] 2816 	mov	r6,a
      00071E 33               [12] 2817 	rlc	a
      00071F 95 E0            [12] 2818 	subb	a,acc
      000721 FF               [12] 2819 	mov	r7,a
      000722 8E 82            [24] 2820 	mov	dpl,r6
      000724 8F 83            [24] 2821 	mov	dph,r7
      000726 12r00r00         [24] 2822 	lcall	__mulint
      000729 AE 82            [24] 2823 	mov	r6,dpl
      00072B AF 83            [24] 2824 	mov	r7,dph
      00072D EE               [12] 2825 	mov	a,r6
      00072E 25*1A            [12] 2826 	add	a,_dr_DrivePW
      000730 F5*1A            [12] 2827 	mov	_dr_DrivePW,a
      000732 EF               [12] 2828 	mov	a,r7
      000733 35*1B            [12] 2829 	addc	a,(_dr_DrivePW + 1)
      000735 F5*1B            [12] 2830 	mov	(_dr_DrivePW + 1),a
      000737 02r08r7E         [24] 2831 	ljmp	00108$
      00073A                       2832 00104$:
                           00073A  2833 	C$Lab_5.c$153$2$158 ==.
                                   2834 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:153: else if (FBSS == 0)				//driving backward
      00073A 30 B4 03         [24] 2835 	jnb	_FBSS,00134$
      00073D 02r08r7E         [24] 2836 	ljmp	00108$
      000740                       2837 00134$:
                           000740  2838 	C$Lab_5.c$155$3$160 ==.
                                   2839 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:155: dr_DrivePW = dr_DrivePW_Neutral - 50 - ((ADC_value/255.0) * dr_ky * abs(gy));
      000740 E5*14            [12] 2840 	mov	a,_dr_DrivePW_Neutral
      000742 24 CE            [12] 2841 	add	a,#0xce
      000744 F5*3B            [12] 2842 	mov	_Set_DrivePulsewidth_sloc0_1_0,a
      000746 E5*15            [12] 2843 	mov	a,(_dr_DrivePW_Neutral + 1)
      000748 34 FF            [12] 2844 	addc	a,#0xff
      00074A F5*3C            [12] 2845 	mov	(_Set_DrivePulsewidth_sloc0_1_0 + 1),a
      00074C 85*1E 82         [24] 2846 	mov	dpl,_ADC_value
      00074F 12r00r00         [24] 2847 	lcall	___uchar2fs
      000752 AA 82            [24] 2848 	mov	r2,dpl
      000754 AB 83            [24] 2849 	mov	r3,dph
      000756 AC F0            [24] 2850 	mov	r4,b
      000758 FD               [12] 2851 	mov	r5,a
      000759 E4               [12] 2852 	clr	a
      00075A C0 E0            [24] 2853 	push	acc
      00075C C0 E0            [24] 2854 	push	acc
      00075E 74 7F            [12] 2855 	mov	a,#0x7f
      000760 C0 E0            [24] 2856 	push	acc
      000762 74 43            [12] 2857 	mov	a,#0x43
      000764 C0 E0            [24] 2858 	push	acc
      000766 8A 82            [24] 2859 	mov	dpl,r2
      000768 8B 83            [24] 2860 	mov	dph,r3
      00076A 8C F0            [24] 2861 	mov	b,r4
      00076C ED               [12] 2862 	mov	a,r5
      00076D 12r00r00         [24] 2863 	lcall	___fsdiv
      000770 AA 82            [24] 2864 	mov	r2,dpl
      000772 AB 83            [24] 2865 	mov	r3,dph
      000774 AC F0            [24] 2866 	mov	r4,b
      000776 FD               [12] 2867 	mov	r5,a
      000777 E5 81            [12] 2868 	mov	a,sp
      000779 24 FC            [12] 2869 	add	a,#0xfc
      00077B F5 81            [12] 2870 	mov	sp,a
      00077D 85*1D 82         [24] 2871 	mov	dpl,_dr_ky
      000780 C0 05            [24] 2872 	push	ar5
      000782 C0 04            [24] 2873 	push	ar4
      000784 C0 03            [24] 2874 	push	ar3
      000786 C0 02            [24] 2875 	push	ar2
      000788 12r00r00         [24] 2876 	lcall	___schar2fs
      00078B A8 82            [24] 2877 	mov	r0,dpl
      00078D A9 83            [24] 2878 	mov	r1,dph
      00078F AE F0            [24] 2879 	mov	r6,b
      000791 FF               [12] 2880 	mov	r7,a
      000792 D0 02            [24] 2881 	pop	ar2
      000794 D0 03            [24] 2882 	pop	ar3
      000796 D0 04            [24] 2883 	pop	ar4
      000798 D0 05            [24] 2884 	pop	ar5
      00079A C0 00            [24] 2885 	push	ar0
      00079C C0 01            [24] 2886 	push	ar1
      00079E C0 06            [24] 2887 	push	ar6
      0007A0 C0 07            [24] 2888 	push	ar7
      0007A2 8A 82            [24] 2889 	mov	dpl,r2
      0007A4 8B 83            [24] 2890 	mov	dph,r3
      0007A6 8C F0            [24] 2891 	mov	b,r4
      0007A8 ED               [12] 2892 	mov	a,r5
      0007A9 12r00r00         [24] 2893 	lcall	___fsmul
      0007AC AC 82            [24] 2894 	mov	r4,dpl
      0007AE AD 83            [24] 2895 	mov	r5,dph
      0007B0 AE F0            [24] 2896 	mov	r6,b
      0007B2 FF               [12] 2897 	mov	r7,a
      0007B3 E5 81            [12] 2898 	mov	a,sp
      0007B5 24 FC            [12] 2899 	add	a,#0xfc
      0007B7 F5 81            [12] 2900 	mov	sp,a
      0007B9 85*31 82         [24] 2901 	mov	dpl,_gy
      0007BC 85*32 83         [24] 2902 	mov	dph,(_gy + 1)
      0007BF C0 07            [24] 2903 	push	ar7
      0007C1 C0 06            [24] 2904 	push	ar6
      0007C3 C0 05            [24] 2905 	push	ar5
      0007C5 C0 04            [24] 2906 	push	ar4
      0007C7 12r00r00         [24] 2907 	lcall	_abs
      0007CA 12r00r00         [24] 2908 	lcall	___sint2fs
      0007CD A8 82            [24] 2909 	mov	r0,dpl
      0007CF A9 83            [24] 2910 	mov	r1,dph
      0007D1 AA F0            [24] 2911 	mov	r2,b
      0007D3 FB               [12] 2912 	mov	r3,a
      0007D4 D0 04            [24] 2913 	pop	ar4
      0007D6 D0 05            [24] 2914 	pop	ar5
      0007D8 D0 06            [24] 2915 	pop	ar6
      0007DA D0 07            [24] 2916 	pop	ar7
      0007DC C0 00            [24] 2917 	push	ar0
      0007DE C0 01            [24] 2918 	push	ar1
      0007E0 C0 02            [24] 2919 	push	ar2
      0007E2 C0 03            [24] 2920 	push	ar3
      0007E4 8C 82            [24] 2921 	mov	dpl,r4
      0007E6 8D 83            [24] 2922 	mov	dph,r5
      0007E8 8E F0            [24] 2923 	mov	b,r6
      0007EA EF               [12] 2924 	mov	a,r7
      0007EB 12r00r00         [24] 2925 	lcall	___fsmul
      0007EE AC 82            [24] 2926 	mov	r4,dpl
      0007F0 AD 83            [24] 2927 	mov	r5,dph
      0007F2 AE F0            [24] 2928 	mov	r6,b
      0007F4 FF               [12] 2929 	mov	r7,a
      0007F5 E5 81            [12] 2930 	mov	a,sp
      0007F7 24 FC            [12] 2931 	add	a,#0xfc
      0007F9 F5 81            [12] 2932 	mov	sp,a
      0007FB 85*3B 82         [24] 2933 	mov	dpl,_Set_DrivePulsewidth_sloc0_1_0
      0007FE 85*3C 83         [24] 2934 	mov	dph,(_Set_DrivePulsewidth_sloc0_1_0 + 1)
      000801 C0 07            [24] 2935 	push	ar7
      000803 C0 06            [24] 2936 	push	ar6
      000805 C0 05            [24] 2937 	push	ar5
      000807 C0 04            [24] 2938 	push	ar4
      000809 12r00r00         [24] 2939 	lcall	___uint2fs
      00080C A8 82            [24] 2940 	mov	r0,dpl
      00080E A9 83            [24] 2941 	mov	r1,dph
      000810 AA F0            [24] 2942 	mov	r2,b
      000812 FB               [12] 2943 	mov	r3,a
      000813 D0 04            [24] 2944 	pop	ar4
      000815 D0 05            [24] 2945 	pop	ar5
      000817 D0 06            [24] 2946 	pop	ar6
      000819 D0 07            [24] 2947 	pop	ar7
      00081B C0 04            [24] 2948 	push	ar4
      00081D C0 05            [24] 2949 	push	ar5
      00081F C0 06            [24] 2950 	push	ar6
      000821 C0 07            [24] 2951 	push	ar7
      000823 88 82            [24] 2952 	mov	dpl,r0
      000825 89 83            [24] 2953 	mov	dph,r1
      000827 8A F0            [24] 2954 	mov	b,r2
      000829 EB               [12] 2955 	mov	a,r3
      00082A 12r00r00         [24] 2956 	lcall	___fssub
      00082D AC 82            [24] 2957 	mov	r4,dpl
      00082F AD 83            [24] 2958 	mov	r5,dph
      000831 AE F0            [24] 2959 	mov	r6,b
      000833 FF               [12] 2960 	mov	r7,a
      000834 E5 81            [12] 2961 	mov	a,sp
      000836 24 FC            [12] 2962 	add	a,#0xfc
      000838 F5 81            [12] 2963 	mov	sp,a
      00083A 8C 82            [24] 2964 	mov	dpl,r4
      00083C 8D 83            [24] 2965 	mov	dph,r5
      00083E 8E F0            [24] 2966 	mov	b,r6
      000840 EF               [12] 2967 	mov	a,r7
      000841 12r00r00         [24] 2968 	lcall	___fs2uint
      000844 85 82*1A         [24] 2969 	mov	_dr_DrivePW,dpl
      000847 85 83*1B         [24] 2970 	mov	(_dr_DrivePW + 1),dph
                           00084A  2971 	C$Lab_5.c$156$3$160 ==.
                                   2972 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:156: dr_DrivePW -= dr_kx * abs(gx);
      00084A 85*2F 82         [24] 2973 	mov	dpl,_gx
      00084D 85*30 83         [24] 2974 	mov	dph,(_gx + 1)
      000850 12r00r00         [24] 2975 	lcall	_abs
      000853 85 82*00         [24] 2976 	mov	__mulint_PARM_2,dpl
      000856 85 83*01         [24] 2977 	mov	(__mulint_PARM_2 + 1),dph
      000859 E5*1C            [12] 2978 	mov	a,_dr_kx
      00085B FE               [12] 2979 	mov	r6,a
      00085C 33               [12] 2980 	rlc	a
      00085D 95 E0            [12] 2981 	subb	a,acc
      00085F FF               [12] 2982 	mov	r7,a
      000860 8E 82            [24] 2983 	mov	dpl,r6
      000862 8F 83            [24] 2984 	mov	dph,r7
      000864 12r00r00         [24] 2985 	lcall	__mulint
      000867 AE 82            [24] 2986 	mov	r6,dpl
      000869 AF 83            [24] 2987 	mov	r7,dph
      00086B E5*1A            [12] 2988 	mov	a,_dr_DrivePW
      00086D C3               [12] 2989 	clr	c
      00086E 9E               [12] 2990 	subb	a,r6
      00086F F5*1A            [12] 2991 	mov	_dr_DrivePW,a
      000871 E5*1B            [12] 2992 	mov	a,(_dr_DrivePW + 1)
      000873 9F               [12] 2993 	subb	a,r7
      000874 F5*1B            [12] 2994 	mov	(_dr_DrivePW + 1),a
      000876 80 06            [24] 2995 	sjmp	00108$
      000878                       2996 00107$:
                           000878  2997 	C$Lab_5.c$162$2$161 ==.
                                   2998 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:162: dr_DrivePW = dr_DrivePW_Neutral;
      000878 85*14*1A         [24] 2999 	mov	_dr_DrivePW,_dr_DrivePW_Neutral
      00087B 85*15*1B         [24] 3000 	mov	(_dr_DrivePW + 1),(_dr_DrivePW_Neutral + 1)
      00087E                       3001 00108$:
                           00087E  3002 	C$Lab_5.c$166$1$157 ==.
                                   3003 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:166: if (dr_DrivePW > dr_DrivePW_Max)	//check if greater than pulsewidth maximum
      00087E C3               [12] 3004 	clr	c
      00087F E5*18            [12] 3005 	mov	a,_dr_DrivePW_Max
      000881 95*1A            [12] 3006 	subb	a,_dr_DrivePW
      000883 E5*19            [12] 3007 	mov	a,(_dr_DrivePW_Max + 1)
      000885 95*1B            [12] 3008 	subb	a,(_dr_DrivePW + 1)
      000887 50 06            [24] 3009 	jnc	00111$
                           000889  3010 	C$Lab_5.c$168$2$162 ==.
                                   3011 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:168: dr_DrivePW = dr_DrivePW_Max;	//set PW to the maximum value
      000889 85*18*1A         [24] 3012 	mov	_dr_DrivePW,_dr_DrivePW_Max
      00088C 85*19*1B         [24] 3013 	mov	(_dr_DrivePW + 1),(_dr_DrivePW_Max + 1)
      00088F                       3014 00111$:
                           00088F  3015 	C$Lab_5.c$170$1$157 ==.
                                   3016 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:170: if (dr_DrivePW < dr_DrivePW_Min)	//check if greater than pulsewidth maximum
      00088F C3               [12] 3017 	clr	c
      000890 E5*1A            [12] 3018 	mov	a,_dr_DrivePW
      000892 95*16            [12] 3019 	subb	a,_dr_DrivePW_Min
      000894 E5*1B            [12] 3020 	mov	a,(_dr_DrivePW + 1)
      000896 95*17            [12] 3021 	subb	a,(_dr_DrivePW_Min + 1)
      000898 50 06            [24] 3022 	jnc	00113$
                           00089A  3023 	C$Lab_5.c$172$2$163 ==.
                                   3024 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:172: dr_DrivePW = dr_DrivePW_Min;	//set PW to the maximum value
      00089A 85*16*1A         [24] 3025 	mov	_dr_DrivePW,_dr_DrivePW_Min
      00089D 85*17*1B         [24] 3026 	mov	(_dr_DrivePW + 1),(_dr_DrivePW_Min + 1)
      0008A0                       3027 00113$:
                           0008A0  3028 	C$Lab_5.c$175$1$157 ==.
                                   3029 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:175: PCA0CP2 = 0xFFFF - dr_DrivePW;
      0008A0 74 FF            [12] 3030 	mov	a,#0xff
      0008A2 C3               [12] 3031 	clr	c
      0008A3 95*1A            [12] 3032 	subb	a,_dr_DrivePW
      0008A5 F5 EC            [12] 3033 	mov	((_PCA0CP2 >> 0) & 0xFF),a
      0008A7 74 FF            [12] 3034 	mov	a,#0xff
      0008A9 95*1B            [12] 3035 	subb	a,(_dr_DrivePW + 1)
      0008AB F5 FC            [12] 3036 	mov	((_PCA0CP2 >> 8) & 0xFF),a
                           0008AD  3037 	C$Lab_5.c$176$1$157 ==.
                           0008AD  3038 	XG$Set_DrivePulsewidth$0$0 ==.
      0008AD 22               [24] 3039 	ret
                                   3040 ;------------------------------------------------------------
                                   3041 ;Allocation info for local variables in function 'errHeading'
                                   3042 ;------------------------------------------------------------
                           0008AE  3043 	G$errHeading$0$0 ==.
                           0008AE  3044 	C$Lab_5.c$182$1$157 ==.
                                   3045 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:182: void errHeading(void)
                                   3046 ;	-----------------------------------------
                                   3047 ;	 function errHeading
                                   3048 ;	-----------------------------------------
      0008AE                       3049 _errHeading:
                           0008AE  3050 	C$Lab_5.c$184$1$165 ==.
                                   3051 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:184: if (FBSS == 1)								//switches direction but maintains magnitude of wheel turn if moving reverse
      0008AE 20 B4 03         [24] 3052 	jb	_FBSS,00120$
      0008B1 02r09r99         [24] 3053 	ljmp	00102$
      0008B4                       3054 00120$:
                           0008B4  3055 	C$Lab_5.c$186$1$165 ==.
                                   3056 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:186: sv_temp_servo_pw = SV_PW_CENTER + ((500.0 * gx * sv_k)/1800.0);
      0008B4 85*2F 82         [24] 3057 	mov	dpl,_gx
      0008B7 85*30 83         [24] 3058 	mov	dph,(_gx + 1)
      0008BA 12r00r00         [24] 3059 	lcall	___sint2fs
      0008BD AC 82            [24] 3060 	mov	r4,dpl
      0008BF AD 83            [24] 3061 	mov	r5,dph
      0008C1 AE F0            [24] 3062 	mov	r6,b
      0008C3 FF               [12] 3063 	mov	r7,a
      0008C4 C0 04            [24] 3064 	push	ar4
      0008C6 C0 05            [24] 3065 	push	ar5
      0008C8 C0 06            [24] 3066 	push	ar6
      0008CA C0 07            [24] 3067 	push	ar7
      0008CC 90 00 00         [24] 3068 	mov	dptr,#0x0000
      0008CF 75 F0 FA         [24] 3069 	mov	b,#0xfa
      0008D2 74 43            [12] 3070 	mov	a,#0x43
      0008D4 12r00r00         [24] 3071 	lcall	___fsmul
      0008D7 AC 82            [24] 3072 	mov	r4,dpl
      0008D9 AD 83            [24] 3073 	mov	r5,dph
      0008DB AE F0            [24] 3074 	mov	r6,b
      0008DD FF               [12] 3075 	mov	r7,a
      0008DE E5 81            [12] 3076 	mov	a,sp
      0008E0 24 FC            [12] 3077 	add	a,#0xfc
      0008E2 F5 81            [12] 3078 	mov	sp,a
      0008E4 85*27 82         [24] 3079 	mov	dpl,_sv_k
      0008E7 85*28 83         [24] 3080 	mov	dph,(_sv_k + 1)
      0008EA C0 07            [24] 3081 	push	ar7
      0008EC C0 06            [24] 3082 	push	ar6
      0008EE C0 05            [24] 3083 	push	ar5
      0008F0 C0 04            [24] 3084 	push	ar4
      0008F2 12r00r00         [24] 3085 	lcall	___sint2fs
      0008F5 A8 82            [24] 3086 	mov	r0,dpl
      0008F7 A9 83            [24] 3087 	mov	r1,dph
      0008F9 AA F0            [24] 3088 	mov	r2,b
      0008FB FB               [12] 3089 	mov	r3,a
      0008FC D0 04            [24] 3090 	pop	ar4
      0008FE D0 05            [24] 3091 	pop	ar5
      000900 D0 06            [24] 3092 	pop	ar6
      000902 D0 07            [24] 3093 	pop	ar7
      000904 C0 00            [24] 3094 	push	ar0
      000906 C0 01            [24] 3095 	push	ar1
      000908 C0 02            [24] 3096 	push	ar2
      00090A C0 03            [24] 3097 	push	ar3
      00090C 8C 82            [24] 3098 	mov	dpl,r4
      00090E 8D 83            [24] 3099 	mov	dph,r5
      000910 8E F0            [24] 3100 	mov	b,r6
      000912 EF               [12] 3101 	mov	a,r7
      000913 12r00r00         [24] 3102 	lcall	___fsmul
      000916 AC 82            [24] 3103 	mov	r4,dpl
      000918 AD 83            [24] 3104 	mov	r5,dph
      00091A AE F0            [24] 3105 	mov	r6,b
      00091C FF               [12] 3106 	mov	r7,a
      00091D E5 81            [12] 3107 	mov	a,sp
      00091F 24 FC            [12] 3108 	add	a,#0xfc
      000921 F5 81            [12] 3109 	mov	sp,a
      000923 E4               [12] 3110 	clr	a
      000924 C0 E0            [24] 3111 	push	acc
      000926 C0 E0            [24] 3112 	push	acc
      000928 74 E1            [12] 3113 	mov	a,#0xe1
      00092A C0 E0            [24] 3114 	push	acc
      00092C 74 44            [12] 3115 	mov	a,#0x44
      00092E C0 E0            [24] 3116 	push	acc
      000930 8C 82            [24] 3117 	mov	dpl,r4
      000932 8D 83            [24] 3118 	mov	dph,r5
      000934 8E F0            [24] 3119 	mov	b,r6
      000936 EF               [12] 3120 	mov	a,r7
      000937 12r00r00         [24] 3121 	lcall	___fsdiv
      00093A AC 82            [24] 3122 	mov	r4,dpl
      00093C AD 83            [24] 3123 	mov	r5,dph
      00093E AE F0            [24] 3124 	mov	r6,b
      000940 FF               [12] 3125 	mov	r7,a
      000941 E5 81            [12] 3126 	mov	a,sp
      000943 24 FC            [12] 3127 	add	a,#0xfc
      000945 F5 81            [12] 3128 	mov	sp,a
      000947 85*1F 82         [24] 3129 	mov	dpl,_SV_PW_CENTER
      00094A 85*20 83         [24] 3130 	mov	dph,(_SV_PW_CENTER + 1)
      00094D C0 07            [24] 3131 	push	ar7
      00094F C0 06            [24] 3132 	push	ar6
      000951 C0 05            [24] 3133 	push	ar5
      000953 C0 04            [24] 3134 	push	ar4
      000955 12r00r00         [24] 3135 	lcall	___uint2fs
      000958 A8 82            [24] 3136 	mov	r0,dpl
      00095A A9 83            [24] 3137 	mov	r1,dph
      00095C AA F0            [24] 3138 	mov	r2,b
      00095E FB               [12] 3139 	mov	r3,a
      00095F D0 04            [24] 3140 	pop	ar4
      000961 D0 05            [24] 3141 	pop	ar5
      000963 D0 06            [24] 3142 	pop	ar6
      000965 D0 07            [24] 3143 	pop	ar7
      000967 C0 04            [24] 3144 	push	ar4
      000969 C0 05            [24] 3145 	push	ar5
      00096B C0 06            [24] 3146 	push	ar6
      00096D C0 07            [24] 3147 	push	ar7
      00096F 88 82            [24] 3148 	mov	dpl,r0
      000971 89 83            [24] 3149 	mov	dph,r1
      000973 8A F0            [24] 3150 	mov	b,r2
      000975 EB               [12] 3151 	mov	a,r3
      000976 12r00r00         [24] 3152 	lcall	___fsadd
      000979 AC 82            [24] 3153 	mov	r4,dpl
      00097B AD 83            [24] 3154 	mov	r5,dph
      00097D AE F0            [24] 3155 	mov	r6,b
      00097F FF               [12] 3156 	mov	r7,a
      000980 E5 81            [12] 3157 	mov	a,sp
      000982 24 FC            [12] 3158 	add	a,#0xfc
      000984 F5 81            [12] 3159 	mov	sp,a
      000986 8C 82            [24] 3160 	mov	dpl,r4
      000988 8D 83            [24] 3161 	mov	dph,r5
      00098A 8E F0            [24] 3162 	mov	b,r6
      00098C EF               [12] 3163 	mov	a,r7
      00098D 12r00r00         [24] 3164 	lcall	___fs2sint
      000990 85 82*29         [24] 3165 	mov	_sv_temp_servo_pw,dpl
      000993 85 83*2A         [24] 3166 	mov	(_sv_temp_servo_pw + 1),dph
      000996 02r0Ar7B         [24] 3167 	ljmp	00103$
      000999                       3168 00102$:
                           000999  3169 	C$Lab_5.c$190$1$165 ==.
                                   3170 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:190: sv_temp_servo_pw = SV_PW_CENTER - ((500.0 * gx * sv_k)/1800.0);
      000999 85*2F 82         [24] 3171 	mov	dpl,_gx
      00099C 85*30 83         [24] 3172 	mov	dph,(_gx + 1)
      00099F 12r00r00         [24] 3173 	lcall	___sint2fs
      0009A2 AC 82            [24] 3174 	mov	r4,dpl
      0009A4 AD 83            [24] 3175 	mov	r5,dph
      0009A6 AE F0            [24] 3176 	mov	r6,b
      0009A8 FF               [12] 3177 	mov	r7,a
      0009A9 C0 04            [24] 3178 	push	ar4
      0009AB C0 05            [24] 3179 	push	ar5
      0009AD C0 06            [24] 3180 	push	ar6
      0009AF C0 07            [24] 3181 	push	ar7
      0009B1 90 00 00         [24] 3182 	mov	dptr,#0x0000
      0009B4 75 F0 FA         [24] 3183 	mov	b,#0xfa
      0009B7 74 43            [12] 3184 	mov	a,#0x43
      0009B9 12r00r00         [24] 3185 	lcall	___fsmul
      0009BC AC 82            [24] 3186 	mov	r4,dpl
      0009BE AD 83            [24] 3187 	mov	r5,dph
      0009C0 AE F0            [24] 3188 	mov	r6,b
      0009C2 FF               [12] 3189 	mov	r7,a
      0009C3 E5 81            [12] 3190 	mov	a,sp
      0009C5 24 FC            [12] 3191 	add	a,#0xfc
      0009C7 F5 81            [12] 3192 	mov	sp,a
      0009C9 85*27 82         [24] 3193 	mov	dpl,_sv_k
      0009CC 85*28 83         [24] 3194 	mov	dph,(_sv_k + 1)
      0009CF C0 07            [24] 3195 	push	ar7
      0009D1 C0 06            [24] 3196 	push	ar6
      0009D3 C0 05            [24] 3197 	push	ar5
      0009D5 C0 04            [24] 3198 	push	ar4
      0009D7 12r00r00         [24] 3199 	lcall	___sint2fs
      0009DA A8 82            [24] 3200 	mov	r0,dpl
      0009DC A9 83            [24] 3201 	mov	r1,dph
      0009DE AA F0            [24] 3202 	mov	r2,b
      0009E0 FB               [12] 3203 	mov	r3,a
      0009E1 D0 04            [24] 3204 	pop	ar4
      0009E3 D0 05            [24] 3205 	pop	ar5
      0009E5 D0 06            [24] 3206 	pop	ar6
      0009E7 D0 07            [24] 3207 	pop	ar7
      0009E9 C0 00            [24] 3208 	push	ar0
      0009EB C0 01            [24] 3209 	push	ar1
      0009ED C0 02            [24] 3210 	push	ar2
      0009EF C0 03            [24] 3211 	push	ar3
      0009F1 8C 82            [24] 3212 	mov	dpl,r4
      0009F3 8D 83            [24] 3213 	mov	dph,r5
      0009F5 8E F0            [24] 3214 	mov	b,r6
      0009F7 EF               [12] 3215 	mov	a,r7
      0009F8 12r00r00         [24] 3216 	lcall	___fsmul
      0009FB AC 82            [24] 3217 	mov	r4,dpl
      0009FD AD 83            [24] 3218 	mov	r5,dph
      0009FF AE F0            [24] 3219 	mov	r6,b
      000A01 FF               [12] 3220 	mov	r7,a
      000A02 E5 81            [12] 3221 	mov	a,sp
      000A04 24 FC            [12] 3222 	add	a,#0xfc
      000A06 F5 81            [12] 3223 	mov	sp,a
      000A08 E4               [12] 3224 	clr	a
      000A09 C0 E0            [24] 3225 	push	acc
      000A0B C0 E0            [24] 3226 	push	acc
      000A0D 74 E1            [12] 3227 	mov	a,#0xe1
      000A0F C0 E0            [24] 3228 	push	acc
      000A11 74 44            [12] 3229 	mov	a,#0x44
      000A13 C0 E0            [24] 3230 	push	acc
      000A15 8C 82            [24] 3231 	mov	dpl,r4
      000A17 8D 83            [24] 3232 	mov	dph,r5
      000A19 8E F0            [24] 3233 	mov	b,r6
      000A1B EF               [12] 3234 	mov	a,r7
      000A1C 12r00r00         [24] 3235 	lcall	___fsdiv
      000A1F AC 82            [24] 3236 	mov	r4,dpl
      000A21 AD 83            [24] 3237 	mov	r5,dph
      000A23 AE F0            [24] 3238 	mov	r6,b
      000A25 FF               [12] 3239 	mov	r7,a
      000A26 E5 81            [12] 3240 	mov	a,sp
      000A28 24 FC            [12] 3241 	add	a,#0xfc
      000A2A F5 81            [12] 3242 	mov	sp,a
      000A2C 85*1F 82         [24] 3243 	mov	dpl,_SV_PW_CENTER
      000A2F 85*20 83         [24] 3244 	mov	dph,(_SV_PW_CENTER + 1)
      000A32 C0 07            [24] 3245 	push	ar7
      000A34 C0 06            [24] 3246 	push	ar6
      000A36 C0 05            [24] 3247 	push	ar5
      000A38 C0 04            [24] 3248 	push	ar4
      000A3A 12r00r00         [24] 3249 	lcall	___uint2fs
      000A3D A8 82            [24] 3250 	mov	r0,dpl
      000A3F A9 83            [24] 3251 	mov	r1,dph
      000A41 AA F0            [24] 3252 	mov	r2,b
      000A43 FB               [12] 3253 	mov	r3,a
      000A44 D0 04            [24] 3254 	pop	ar4
      000A46 D0 05            [24] 3255 	pop	ar5
      000A48 D0 06            [24] 3256 	pop	ar6
      000A4A D0 07            [24] 3257 	pop	ar7
      000A4C C0 04            [24] 3258 	push	ar4
      000A4E C0 05            [24] 3259 	push	ar5
      000A50 C0 06            [24] 3260 	push	ar6
      000A52 C0 07            [24] 3261 	push	ar7
      000A54 88 82            [24] 3262 	mov	dpl,r0
      000A56 89 83            [24] 3263 	mov	dph,r1
      000A58 8A F0            [24] 3264 	mov	b,r2
      000A5A EB               [12] 3265 	mov	a,r3
      000A5B 12r00r00         [24] 3266 	lcall	___fssub
      000A5E AC 82            [24] 3267 	mov	r4,dpl
      000A60 AD 83            [24] 3268 	mov	r5,dph
      000A62 AE F0            [24] 3269 	mov	r6,b
      000A64 FF               [12] 3270 	mov	r7,a
      000A65 E5 81            [12] 3271 	mov	a,sp
      000A67 24 FC            [12] 3272 	add	a,#0xfc
      000A69 F5 81            [12] 3273 	mov	sp,a
      000A6B 8C 82            [24] 3274 	mov	dpl,r4
      000A6D 8D 83            [24] 3275 	mov	dph,r5
      000A6F 8E F0            [24] 3276 	mov	b,r6
      000A71 EF               [12] 3277 	mov	a,r7
      000A72 12r00r00         [24] 3278 	lcall	___fs2sint
      000A75 85 82*29         [24] 3279 	mov	_sv_temp_servo_pw,dpl
      000A78 85 83*2A         [24] 3280 	mov	(_sv_temp_servo_pw + 1),dph
      000A7B                       3281 00103$:
                           000A7B  3282 	C$Lab_5.c$193$1$165 ==.
                                   3283 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:193: if (sv_temp_servo_pw > SV_PW_RIGHT)
      000A7B AE*29            [24] 3284 	mov	r6,_sv_temp_servo_pw
      000A7D AF*2A            [24] 3285 	mov	r7,(_sv_temp_servo_pw + 1)
      000A7F C3               [12] 3286 	clr	c
      000A80 E5*23            [12] 3287 	mov	a,_SV_PW_RIGHT
      000A82 9E               [12] 3288 	subb	a,r6
      000A83 E5*24            [12] 3289 	mov	a,(_SV_PW_RIGHT + 1)
      000A85 9F               [12] 3290 	subb	a,r7
      000A86 50 08            [24] 3291 	jnc	00107$
                           000A88  3292 	C$Lab_5.c$195$2$168 ==.
                                   3293 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:195: sv_temp_servo_pw = SV_PW_RIGHT;
      000A88 85*23*29         [24] 3294 	mov	_sv_temp_servo_pw,_SV_PW_RIGHT
      000A8B 85*24*2A         [24] 3295 	mov	(_sv_temp_servo_pw + 1),(_SV_PW_RIGHT + 1)
      000A8E 80 13            [24] 3296 	sjmp	00108$
      000A90                       3297 00107$:
                           000A90  3298 	C$Lab_5.c$197$1$165 ==.
                                   3299 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:197: else if (sv_temp_servo_pw < SV_PW_LEFT)
      000A90 AE*29            [24] 3300 	mov	r6,_sv_temp_servo_pw
      000A92 AF*2A            [24] 3301 	mov	r7,(_sv_temp_servo_pw + 1)
      000A94 C3               [12] 3302 	clr	c
      000A95 EE               [12] 3303 	mov	a,r6
      000A96 95*21            [12] 3304 	subb	a,_SV_PW_LEFT
      000A98 EF               [12] 3305 	mov	a,r7
      000A99 95*22            [12] 3306 	subb	a,(_SV_PW_LEFT + 1)
      000A9B 50 06            [24] 3307 	jnc	00108$
                           000A9D  3308 	C$Lab_5.c$199$2$169 ==.
                                   3309 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:199: sv_temp_servo_pw = SV_PW_LEFT;
      000A9D 85*21*29         [24] 3310 	mov	_sv_temp_servo_pw,_SV_PW_LEFT
      000AA0 85*22*2A         [24] 3311 	mov	(_sv_temp_servo_pw + 1),(_SV_PW_LEFT + 1)
      000AA3                       3312 00108$:
                           000AA3  3313 	C$Lab_5.c$202$1$165 ==.
                                   3314 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:202: SV_SERVO_PW = sv_temp_servo_pw;						//saves the equation value as the current pulsewidth
      000AA3 85*29*25         [24] 3315 	mov	_SV_SERVO_PW,_sv_temp_servo_pw
      000AA6 85*2A*26         [24] 3316 	mov	(_SV_SERVO_PW + 1),(_sv_temp_servo_pw + 1)
                           000AA9  3317 	C$Lab_5.c$203$1$165 ==.
                                   3318 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:203: PCA0CPL0 = 0xFFFF - SV_SERVO_PW;
      000AA9 AF*25            [24] 3319 	mov	r7,_SV_SERVO_PW
      000AAB 74 FF            [12] 3320 	mov	a,#0xff
      000AAD C3               [12] 3321 	clr	c
      000AAE 9F               [12] 3322 	subb	a,r7
      000AAF F5 EA            [12] 3323 	mov	_PCA0CPL0,a
                           000AB1  3324 	C$Lab_5.c$204$1$165 ==.
                                   3325 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:204: PCA0CPH0 = (0xFFFF - SV_SERVO_PW) >> 8;
      000AB1 74 FF            [12] 3326 	mov	a,#0xff
      000AB3 C3               [12] 3327 	clr	c
      000AB4 95*25            [12] 3328 	subb	a,_SV_SERVO_PW
      000AB6 74 FF            [12] 3329 	mov	a,#0xff
      000AB8 95*26            [12] 3330 	subb	a,(_SV_SERVO_PW + 1)
      000ABA FF               [12] 3331 	mov	r7,a
      000ABB 8F FA            [24] 3332 	mov	_PCA0CPH0,r7
                           000ABD  3333 	C$Lab_5.c$205$1$165 ==.
                           000ABD  3334 	XG$errHeading$0$0 ==.
      000ABD 22               [24] 3335 	ret
                                   3336 ;------------------------------------------------------------
                                   3337 ;Allocation info for local variables in function 'ReadAccel'
                                   3338 ;------------------------------------------------------------
                                   3339 ;accelData                 Allocated with name '_ReadAccel_accelData_1_171'
                                   3340 ;addrAccel                 Allocated to registers r7 
                                   3341 ;j                         Allocated to registers r6 
                                   3342 ;------------------------------------------------------------
                           000ABE  3343 	G$ReadAccel$0$0 ==.
                           000ABE  3344 	C$Lab_5.c$211$1$165 ==.
                                   3345 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:211: void ReadAccel(void)
                                   3346 ;	-----------------------------------------
                                   3347 ;	 function ReadAccel
                                   3348 ;	-----------------------------------------
      000ABE                       3349 _ReadAccel:
                           000ABE  3350 	C$Lab_5.c$214$1$165 ==.
                                   3351 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:214: unsigned char addrAccel = 0x3A;
      000ABE 7F 3A            [12] 3352 	mov	r7,#0x3a
                           000AC0  3353 	C$Lab_5.c$215$1$165 ==.
                                   3354 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:215: unsigned char j = 0;
      000AC0 7E 00            [12] 3355 	mov	r6,#0x00
                           000AC2  3356 	C$Lab_5.c$217$1$171 ==.
                                   3357 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:217: if (new_reading == 1)
      000AC2 74 01            [12] 3358 	mov	a,#0x01
      000AC4 B5*2E 02         [24] 3359 	cjne	a,_new_reading,00123$
      000AC7 80 03            [24] 3360 	sjmp	00124$
      000AC9                       3361 00123$:
      000AC9 02r0Cr04         [24] 3362 	ljmp	00108$
      000ACC                       3363 00124$:
                           000ACC  3364 	C$Lab_5.c$219$2$172 ==.
                                   3365 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:219: avg_gx = 0;
      000ACC E4               [12] 3366 	clr	a
      000ACD F5*37            [12] 3367 	mov	_avg_gx,a
      000ACF F5*38            [12] 3368 	mov	(_avg_gx + 1),a
                           000AD1  3369 	C$Lab_5.c$220$2$172 ==.
                                   3370 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:220: avg_gy = 0;
      000AD1 F5*39            [12] 3371 	mov	_avg_gy,a
      000AD3 F5*3A            [12] 3372 	mov	(_avg_gy + 1),a
                           000AD5  3373 	C$Lab_5.c$222$3$173 ==.
                                   3374 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:222: while (j < 8)
      000AD5                       3375 00103$:
      000AD5 BE 08 00         [24] 3376 	cjne	r6,#0x08,00125$
      000AD8                       3377 00125$:
      000AD8 40 03            [24] 3378 	jc	00126$
      000ADA 02r0Br63         [24] 3379 	ljmp	00105$
      000ADD                       3380 00126$:
                           000ADD  3381 	C$Lab_5.c$224$3$173 ==.
                                   3382 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:224: i2c_read_data(addrAccel, 0x27, accelData, 1);
      000ADD 75*10r3D         [24] 3383 	mov	_i2c_read_data_PARM_3,#_ReadAccel_accelData_1_171
      000AE0 75*11 00         [24] 3384 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      000AE3 75*12 40         [24] 3385 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      000AE6 75*0F 27         [24] 3386 	mov	_i2c_read_data_PARM_2,#0x27
      000AE9 75*13 01         [24] 3387 	mov	_i2c_read_data_PARM_4,#0x01
      000AEC 8F 82            [24] 3388 	mov	dpl,r7
      000AEE C0 07            [24] 3389 	push	ar7
      000AF0 C0 06            [24] 3390 	push	ar6
      000AF2 12r04r06         [24] 3391 	lcall	_i2c_read_data
      000AF5 D0 06            [24] 3392 	pop	ar6
      000AF7 D0 07            [24] 3393 	pop	ar7
                           000AF9  3394 	C$Lab_5.c$225$3$173 ==.
                                   3395 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:225: if ((accelData[0] & 0x03) == 0x03)
      000AF9 74 03            [12] 3396 	mov	a,#0x03
      000AFB 55*3D            [12] 3397 	anl	a,_ReadAccel_accelData_1_171
      000AFD FD               [12] 3398 	mov	r5,a
      000AFE BD 03 D4         [24] 3399 	cjne	r5,#0x03,00103$
                           000B01  3400 	C$Lab_5.c$227$4$174 ==.
                                   3401 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:227: i2c_read_data(addrAccel, 0x28|0x80, accelData, 4);	//assert MSB to read mult. Bytes
      000B01 75*10r3D         [24] 3402 	mov	_i2c_read_data_PARM_3,#_ReadAccel_accelData_1_171
      000B04 75*11 00         [24] 3403 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      000B07 75*12 40         [24] 3404 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      000B0A 75*0F A8         [24] 3405 	mov	_i2c_read_data_PARM_2,#0xa8
      000B0D 75*13 04         [24] 3406 	mov	_i2c_read_data_PARM_4,#0x04
      000B10 8F 82            [24] 3407 	mov	dpl,r7
      000B12 C0 07            [24] 3408 	push	ar7
      000B14 C0 06            [24] 3409 	push	ar6
      000B16 12r04r06         [24] 3410 	lcall	_i2c_read_data
      000B19 D0 06            [24] 3411 	pop	ar6
      000B1B D0 07            [24] 3412 	pop	ar7
                           000B1D  3413 	C$Lab_5.c$228$4$174 ==.
                                   3414 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:228: avg_gx += ((accelData[1] << 8) >> 4); 				//a simple << 4 WILL NOT WORK;
      000B1D AD*3E            [24] 3415 	mov	r5,(_ReadAccel_accelData_1_171 + 0x0001)
      000B1F 7C 00            [12] 3416 	mov	r4,#0x00
      000B21 ED               [12] 3417 	mov	a,r5
      000B22 C4               [12] 3418 	swap	a
      000B23 CC               [12] 3419 	xch	a,r4
      000B24 C4               [12] 3420 	swap	a
      000B25 54 0F            [12] 3421 	anl	a,#0x0f
      000B27 6C               [12] 3422 	xrl	a,r4
      000B28 CC               [12] 3423 	xch	a,r4
      000B29 54 0F            [12] 3424 	anl	a,#0x0f
      000B2B CC               [12] 3425 	xch	a,r4
      000B2C 6C               [12] 3426 	xrl	a,r4
      000B2D CC               [12] 3427 	xch	a,r4
      000B2E 30 E3 02         [24] 3428 	jnb	acc.3,00129$
      000B31 44 F0            [12] 3429 	orl	a,#0xf0
      000B33                       3430 00129$:
      000B33 FD               [12] 3431 	mov	r5,a
      000B34 EC               [12] 3432 	mov	a,r4
      000B35 25*37            [12] 3433 	add	a,_avg_gx
      000B37 F5*37            [12] 3434 	mov	_avg_gx,a
      000B39 ED               [12] 3435 	mov	a,r5
      000B3A 35*38            [12] 3436 	addc	a,(_avg_gx + 1)
      000B3C F5*38            [12] 3437 	mov	(_avg_gx + 1),a
                           000B3E  3438 	C$Lab_5.c$229$4$174 ==.
                                   3439 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:229: avg_gy += ((accelData[3] << 8) >> 4);				//it will not set the sign bit correctly
      000B3E AD*40            [24] 3440 	mov	r5,(_ReadAccel_accelData_1_171 + 0x0003)
      000B40 7C 00            [12] 3441 	mov	r4,#0x00
      000B42 ED               [12] 3442 	mov	a,r5
      000B43 C4               [12] 3443 	swap	a
      000B44 CC               [12] 3444 	xch	a,r4
      000B45 C4               [12] 3445 	swap	a
      000B46 54 0F            [12] 3446 	anl	a,#0x0f
      000B48 6C               [12] 3447 	xrl	a,r4
      000B49 CC               [12] 3448 	xch	a,r4
      000B4A 54 0F            [12] 3449 	anl	a,#0x0f
      000B4C CC               [12] 3450 	xch	a,r4
      000B4D 6C               [12] 3451 	xrl	a,r4
      000B4E CC               [12] 3452 	xch	a,r4
      000B4F 30 E3 02         [24] 3453 	jnb	acc.3,00130$
      000B52 44 F0            [12] 3454 	orl	a,#0xf0
      000B54                       3455 00130$:
      000B54 FD               [12] 3456 	mov	r5,a
      000B55 EC               [12] 3457 	mov	a,r4
      000B56 25*39            [12] 3458 	add	a,_avg_gy
      000B58 F5*39            [12] 3459 	mov	_avg_gy,a
      000B5A ED               [12] 3460 	mov	a,r5
      000B5B 35*3A            [12] 3461 	addc	a,(_avg_gy + 1)
      000B5D F5*3A            [12] 3462 	mov	(_avg_gy + 1),a
                           000B5F  3463 	C$Lab_5.c$230$4$174 ==.
                                   3464 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:230: j++;
      000B5F 0E               [12] 3465 	inc	r6
      000B60 02r0ArD5         [24] 3466 	ljmp	00103$
      000B63                       3467 00105$:
                           000B63  3468 	C$Lab_5.c$234$1$171 ==.
                                   3469 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:234: avg_gx = avg_gx/8.0;
      000B63 85*37 82         [24] 3470 	mov	dpl,_avg_gx
      000B66 85*38 83         [24] 3471 	mov	dph,(_avg_gx + 1)
      000B69 12r00r00         [24] 3472 	lcall	___sint2fs
      000B6C AC 82            [24] 3473 	mov	r4,dpl
      000B6E AD 83            [24] 3474 	mov	r5,dph
      000B70 AE F0            [24] 3475 	mov	r6,b
      000B72 FF               [12] 3476 	mov	r7,a
      000B73 E4               [12] 3477 	clr	a
      000B74 C0 E0            [24] 3478 	push	acc
      000B76 C0 E0            [24] 3479 	push	acc
      000B78 C0 E0            [24] 3480 	push	acc
      000B7A 74 41            [12] 3481 	mov	a,#0x41
      000B7C C0 E0            [24] 3482 	push	acc
      000B7E 8C 82            [24] 3483 	mov	dpl,r4
      000B80 8D 83            [24] 3484 	mov	dph,r5
      000B82 8E F0            [24] 3485 	mov	b,r6
      000B84 EF               [12] 3486 	mov	a,r7
      000B85 12r00r00         [24] 3487 	lcall	___fsdiv
      000B88 AC 82            [24] 3488 	mov	r4,dpl
      000B8A AD 83            [24] 3489 	mov	r5,dph
      000B8C AE F0            [24] 3490 	mov	r6,b
      000B8E FF               [12] 3491 	mov	r7,a
      000B8F E5 81            [12] 3492 	mov	a,sp
      000B91 24 FC            [12] 3493 	add	a,#0xfc
      000B93 F5 81            [12] 3494 	mov	sp,a
      000B95 8C 82            [24] 3495 	mov	dpl,r4
      000B97 8D 83            [24] 3496 	mov	dph,r5
      000B99 8E F0            [24] 3497 	mov	b,r6
      000B9B EF               [12] 3498 	mov	a,r7
      000B9C 12r00r00         [24] 3499 	lcall	___fs2sint
      000B9F 85 82*37         [24] 3500 	mov	_avg_gx,dpl
      000BA2 85 83*38         [24] 3501 	mov	(_avg_gx + 1),dph
                           000BA5  3502 	C$Lab_5.c$235$1$171 ==.
                                   3503 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:235: avg_gy = avg_gy/8.0;
      000BA5 85*39 82         [24] 3504 	mov	dpl,_avg_gy
      000BA8 85*3A 83         [24] 3505 	mov	dph,(_avg_gy + 1)
      000BAB 12r00r00         [24] 3506 	lcall	___sint2fs
      000BAE AC 82            [24] 3507 	mov	r4,dpl
      000BB0 AD 83            [24] 3508 	mov	r5,dph
      000BB2 AE F0            [24] 3509 	mov	r6,b
      000BB4 FF               [12] 3510 	mov	r7,a
      000BB5 E4               [12] 3511 	clr	a
      000BB6 C0 E0            [24] 3512 	push	acc
      000BB8 C0 E0            [24] 3513 	push	acc
      000BBA C0 E0            [24] 3514 	push	acc
      000BBC 74 41            [12] 3515 	mov	a,#0x41
      000BBE C0 E0            [24] 3516 	push	acc
      000BC0 8C 82            [24] 3517 	mov	dpl,r4
      000BC2 8D 83            [24] 3518 	mov	dph,r5
      000BC4 8E F0            [24] 3519 	mov	b,r6
      000BC6 EF               [12] 3520 	mov	a,r7
      000BC7 12r00r00         [24] 3521 	lcall	___fsdiv
      000BCA AC 82            [24] 3522 	mov	r4,dpl
      000BCC AD 83            [24] 3523 	mov	r5,dph
      000BCE AE F0            [24] 3524 	mov	r6,b
      000BD0 FF               [12] 3525 	mov	r7,a
      000BD1 E5 81            [12] 3526 	mov	a,sp
      000BD3 24 FC            [12] 3527 	add	a,#0xfc
      000BD5 F5 81            [12] 3528 	mov	sp,a
      000BD7 8C 82            [24] 3529 	mov	dpl,r4
      000BD9 8D 83            [24] 3530 	mov	dph,r5
      000BDB 8E F0            [24] 3531 	mov	b,r6
      000BDD EF               [12] 3532 	mov	a,r7
      000BDE 12r00r00         [24] 3533 	lcall	___fs2sint
      000BE1 85 82*39         [24] 3534 	mov	_avg_gy,dpl
      000BE4 85 83*3A         [24] 3535 	mov	(_avg_gy + 1),dph
                           000BE7  3536 	C$Lab_5.c$236$2$172 ==.
                                   3537 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:236: gx = avg_gx - x0;
      000BE7 E5*37            [12] 3538 	mov	a,_avg_gx
      000BE9 C3               [12] 3539 	clr	c
      000BEA 95*33            [12] 3540 	subb	a,_x0
      000BEC F5*2F            [12] 3541 	mov	_gx,a
      000BEE E5*38            [12] 3542 	mov	a,(_avg_gx + 1)
      000BF0 95*34            [12] 3543 	subb	a,(_x0 + 1)
      000BF2 F5*30            [12] 3544 	mov	(_gx + 1),a
                           000BF4  3545 	C$Lab_5.c$237$2$172 ==.
                                   3546 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:237: gy = avg_gy - y0;
      000BF4 E5*39            [12] 3547 	mov	a,_avg_gy
      000BF6 C3               [12] 3548 	clr	c
      000BF7 95*35            [12] 3549 	subb	a,_y0
      000BF9 F5*31            [12] 3550 	mov	_gy,a
      000BFB E5*3A            [12] 3551 	mov	a,(_avg_gy + 1)
      000BFD 95*36            [12] 3552 	subb	a,(_y0 + 1)
      000BFF F5*32            [12] 3553 	mov	(_gy + 1),a
                           000C01  3554 	C$Lab_5.c$238$2$172 ==.
                                   3555 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:238: new_reading = 0;
      000C01 75*2E 00         [24] 3556 	mov	_new_reading,#0x00
      000C04                       3557 00108$:
                           000C04  3558 	C$Lab_5.c$240$1$171 ==.
                           000C04  3559 	XG$ReadAccel$0$0 ==.
      000C04 22               [24] 3560 	ret
                                   3561 ;------------------------------------------------------------
                                   3562 ;Allocation info for local variables in function 'Accel_Calibrate'
                                   3563 ;------------------------------------------------------------
                                   3564 ;xsum                      Allocated to registers r6 r7 
                                   3565 ;ysum                      Allocated to registers r4 r5 
                                   3566 ;i                         Allocated to registers 
                                   3567 ;------------------------------------------------------------
                           000C05  3568 	G$Accel_Calibrate$0$0 ==.
                           000C05  3569 	C$Lab_5.c$242$1$171 ==.
                                   3570 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:242: void Accel_Calibrate(void)
                                   3571 ;	-----------------------------------------
                                   3572 ;	 function Accel_Calibrate
                                   3573 ;	-----------------------------------------
      000C05                       3574 _Accel_Calibrate:
                           000C05  3575 	C$Lab_5.c$244$1$171 ==.
                                   3576 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:244: unsigned int xsum = 0;
      000C05 7E 00            [12] 3577 	mov	r6,#0x00
      000C07 7F 00            [12] 3578 	mov	r7,#0x00
                           000C09  3579 	C$Lab_5.c$245$1$171 ==.
                                   3580 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:245: unsigned int ysum = 0;
      000C09 7C 00            [12] 3581 	mov	r4,#0x00
      000C0B 7D 00            [12] 3582 	mov	r5,#0x00
                           000C0D  3583 	C$Lab_5.c$246$1$171 ==.
                                   3584 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:246: unsigned char i = 0;
      000C0D 7B 00            [12] 3585 	mov	r3,#0x00
                           000C0F  3586 	C$Lab_5.c$248$1$176 ==.
                                   3587 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:248: while (i < 64)
      000C0F                       3588 00101$:
      000C0F BB 40 00         [24] 3589 	cjne	r3,#0x40,00113$
      000C12                       3590 00113$:
      000C12 50 2E            [24] 3591 	jnc	00103$
                           000C14  3592 	C$Lab_5.c$250$2$177 ==.
                                   3593 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:250: ReadAccel();
      000C14 C0 07            [24] 3594 	push	ar7
      000C16 C0 06            [24] 3595 	push	ar6
      000C18 C0 05            [24] 3596 	push	ar5
      000C1A C0 04            [24] 3597 	push	ar4
      000C1C C0 03            [24] 3598 	push	ar3
      000C1E 12r0ArBE         [24] 3599 	lcall	_ReadAccel
      000C21 D0 03            [24] 3600 	pop	ar3
      000C23 D0 04            [24] 3601 	pop	ar4
      000C25 D0 05            [24] 3602 	pop	ar5
      000C27 D0 06            [24] 3603 	pop	ar6
      000C29 D0 07            [24] 3604 	pop	ar7
                           000C2B  3605 	C$Lab_5.c$251$2$177 ==.
                                   3606 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:251: xsum += gx;
      000C2B A9*2F            [24] 3607 	mov	r1,_gx
      000C2D AA*30            [24] 3608 	mov	r2,(_gx + 1)
      000C2F E9               [12] 3609 	mov	a,r1
      000C30 2E               [12] 3610 	add	a,r6
      000C31 FE               [12] 3611 	mov	r6,a
      000C32 EA               [12] 3612 	mov	a,r2
      000C33 3F               [12] 3613 	addc	a,r7
      000C34 FF               [12] 3614 	mov	r7,a
                           000C35  3615 	C$Lab_5.c$252$2$177 ==.
                                   3616 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:252: ysum += gy;
      000C35 A9*31            [24] 3617 	mov	r1,_gy
      000C37 AA*32            [24] 3618 	mov	r2,(_gy + 1)
      000C39 E9               [12] 3619 	mov	a,r1
      000C3A 2C               [12] 3620 	add	a,r4
      000C3B FC               [12] 3621 	mov	r4,a
      000C3C EA               [12] 3622 	mov	a,r2
      000C3D 3D               [12] 3623 	addc	a,r5
      000C3E FD               [12] 3624 	mov	r5,a
                           000C3F  3625 	C$Lab_5.c$253$2$177 ==.
                                   3626 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:253: i++;
      000C3F 0B               [12] 3627 	inc	r3
      000C40 80 CD            [24] 3628 	sjmp	00101$
      000C42                       3629 00103$:
                           000C42  3630 	C$Lab_5.c$256$1$176 ==.
                                   3631 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:256: x0 = xsum/64.0;
      000C42 8E 82            [24] 3632 	mov	dpl,r6
      000C44 8F 83            [24] 3633 	mov	dph,r7
      000C46 C0 05            [24] 3634 	push	ar5
      000C48 C0 04            [24] 3635 	push	ar4
      000C4A 12r00r00         [24] 3636 	lcall	___uint2fs
      000C4D AA 82            [24] 3637 	mov	r2,dpl
      000C4F AB 83            [24] 3638 	mov	r3,dph
      000C51 AE F0            [24] 3639 	mov	r6,b
      000C53 FF               [12] 3640 	mov	r7,a
      000C54 E4               [12] 3641 	clr	a
      000C55 C0 E0            [24] 3642 	push	acc
      000C57 C0 E0            [24] 3643 	push	acc
      000C59 74 80            [12] 3644 	mov	a,#0x80
      000C5B C0 E0            [24] 3645 	push	acc
      000C5D 74 42            [12] 3646 	mov	a,#0x42
      000C5F C0 E0            [24] 3647 	push	acc
      000C61 8A 82            [24] 3648 	mov	dpl,r2
      000C63 8B 83            [24] 3649 	mov	dph,r3
      000C65 8E F0            [24] 3650 	mov	b,r6
      000C67 EF               [12] 3651 	mov	a,r7
      000C68 12r00r00         [24] 3652 	lcall	___fsdiv
      000C6B AA 82            [24] 3653 	mov	r2,dpl
      000C6D AB 83            [24] 3654 	mov	r3,dph
      000C6F AE F0            [24] 3655 	mov	r6,b
      000C71 FF               [12] 3656 	mov	r7,a
      000C72 E5 81            [12] 3657 	mov	a,sp
      000C74 24 FC            [12] 3658 	add	a,#0xfc
      000C76 F5 81            [12] 3659 	mov	sp,a
      000C78 8A 82            [24] 3660 	mov	dpl,r2
      000C7A 8B 83            [24] 3661 	mov	dph,r3
      000C7C 8E F0            [24] 3662 	mov	b,r6
      000C7E EF               [12] 3663 	mov	a,r7
      000C7F 12r00r00         [24] 3664 	lcall	___fs2sint
      000C82 85 82*33         [24] 3665 	mov	_x0,dpl
      000C85 85 83*34         [24] 3666 	mov	(_x0 + 1),dph
      000C88 D0 04            [24] 3667 	pop	ar4
      000C8A D0 05            [24] 3668 	pop	ar5
                           000C8C  3669 	C$Lab_5.c$257$1$176 ==.
                                   3670 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:257: y0 = ysum/64.0;
      000C8C 8C 82            [24] 3671 	mov	dpl,r4
      000C8E 8D 83            [24] 3672 	mov	dph,r5
      000C90 12r00r00         [24] 3673 	lcall	___uint2fs
      000C93 AC 82            [24] 3674 	mov	r4,dpl
      000C95 AD 83            [24] 3675 	mov	r5,dph
      000C97 AE F0            [24] 3676 	mov	r6,b
      000C99 FF               [12] 3677 	mov	r7,a
      000C9A E4               [12] 3678 	clr	a
      000C9B C0 E0            [24] 3679 	push	acc
      000C9D C0 E0            [24] 3680 	push	acc
      000C9F 74 80            [12] 3681 	mov	a,#0x80
      000CA1 C0 E0            [24] 3682 	push	acc
      000CA3 74 42            [12] 3683 	mov	a,#0x42
      000CA5 C0 E0            [24] 3684 	push	acc
      000CA7 8C 82            [24] 3685 	mov	dpl,r4
      000CA9 8D 83            [24] 3686 	mov	dph,r5
      000CAB 8E F0            [24] 3687 	mov	b,r6
      000CAD EF               [12] 3688 	mov	a,r7
      000CAE 12r00r00         [24] 3689 	lcall	___fsdiv
      000CB1 AC 82            [24] 3690 	mov	r4,dpl
      000CB3 AD 83            [24] 3691 	mov	r5,dph
      000CB5 AE F0            [24] 3692 	mov	r6,b
      000CB7 FF               [12] 3693 	mov	r7,a
      000CB8 E5 81            [12] 3694 	mov	a,sp
      000CBA 24 FC            [12] 3695 	add	a,#0xfc
      000CBC F5 81            [12] 3696 	mov	sp,a
      000CBE 8C 82            [24] 3697 	mov	dpl,r4
      000CC0 8D 83            [24] 3698 	mov	dph,r5
      000CC2 8E F0            [24] 3699 	mov	b,r6
      000CC4 EF               [12] 3700 	mov	a,r7
      000CC5 12r00r00         [24] 3701 	lcall	___fs2sint
      000CC8 85 82*35         [24] 3702 	mov	_y0,dpl
      000CCB 85 83*36         [24] 3703 	mov	(_y0 + 1),dph
                           000CCE  3704 	C$Lab_5.c$258$1$176 ==.
                           000CCE  3705 	XG$Accel_Calibrate$0$0 ==.
      000CCE 22               [24] 3706 	ret
                                   3707 ;------------------------------------------------------------
                                   3708 ;Allocation info for local variables in function 'getGain'
                                   3709 ;------------------------------------------------------------
                           000CCF  3710 	G$getGain$0$0 ==.
                           000CCF  3711 	C$Lab_5.c$264$1$176 ==.
                                   3712 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:264: void getGain(void) 
                                   3713 ;	-----------------------------------------
                                   3714 ;	 function getGain
                                   3715 ;	-----------------------------------------
      000CCF                       3716 _getGain:
                           000CCF  3717 	C$Lab_5.c$266$1$179 ==.
                                   3718 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:266: lcd_clear();									//clears lcd screen
      000CCF 12r01r00         [24] 3719 	lcall	_lcd_clear
                           000CD2  3720 	C$Lab_5.c$267$1$179 ==.
                                   3721 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:267: lcd_print("Input Drive X Gain: \r");			//gets input of desired drive gain from keypad and saves to variable
      000CD2 74r29            [12] 3722 	mov	a,#___str_3
      000CD4 C0 E0            [24] 3723 	push	acc
      000CD6 74s00            [12] 3724 	mov	a,#(___str_3 >> 8)
      000CD8 C0 E0            [24] 3725 	push	acc
      000CDA 74 80            [12] 3726 	mov	a,#0x80
      000CDC C0 E0            [24] 3727 	push	acc
      000CDE 12r00r7B         [24] 3728 	lcall	_lcd_print
      000CE1 15 81            [12] 3729 	dec	sp
      000CE3 15 81            [12] 3730 	dec	sp
      000CE5 15 81            [12] 3731 	dec	sp
                           000CE7  3732 	C$Lab_5.c$268$1$179 ==.
                                   3733 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:268: dr_kx = kpd_input(1);
      000CE7 75 82 01         [24] 3734 	mov	dpl,#0x01
      000CEA 12r01rB8         [24] 3735 	lcall	_kpd_input
      000CED AE 82            [24] 3736 	mov	r6,dpl
                           000CEF  3737 	C$Lab_5.c$269$1$179 ==.
                                   3738 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:269: printf("Drive X Gain: %d \r\n", dr_kx);
      000CEF EE               [12] 3739 	mov	a,r6
      000CF0 F5*1C            [12] 3740 	mov	_dr_kx,a
      000CF2 33               [12] 3741 	rlc	a
      000CF3 95 E0            [12] 3742 	subb	a,acc
      000CF5 FF               [12] 3743 	mov	r7,a
      000CF6 C0 06            [24] 3744 	push	ar6
      000CF8 C0 07            [24] 3745 	push	ar7
      000CFA 74r3F            [12] 3746 	mov	a,#___str_4
      000CFC C0 E0            [24] 3747 	push	acc
      000CFE 74s00            [12] 3748 	mov	a,#(___str_4 >> 8)
      000D00 C0 E0            [24] 3749 	push	acc
      000D02 74 80            [12] 3750 	mov	a,#0x80
      000D04 C0 E0            [24] 3751 	push	acc
      000D06 12r00r00         [24] 3752 	lcall	_printf
      000D09 E5 81            [12] 3753 	mov	a,sp
      000D0B 24 FB            [12] 3754 	add	a,#0xfb
      000D0D F5 81            [12] 3755 	mov	sp,a
                           000D0F  3756 	C$Lab_5.c$270$1$179 ==.
                                   3757 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:270: printcounts = 0;
      000D0F 75*2D 00         [24] 3758 	mov	_printcounts,#0x00
                           000D12  3759 	C$Lab_5.c$271$1$179 ==.
                                   3760 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:271: while (printcounts < 100);
      000D12                       3761 00101$:
      000D12 74 9C            [12] 3762 	mov	a,#0x100 - 0x64
      000D14 25*2D            [12] 3763 	add	a,_printcounts
      000D16 50 FA            [24] 3764 	jnc	00101$
                           000D18  3765 	C$Lab_5.c$272$1$179 ==.
                                   3766 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:272: lcd_clear();
      000D18 12r01r00         [24] 3767 	lcall	_lcd_clear
                           000D1B  3768 	C$Lab_5.c$274$1$179 ==.
                                   3769 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:274: lcd_print("Input Drive Y Gain: \r");			//gets input of desired drive gain from keypad and saves to variable
      000D1B 74r53            [12] 3770 	mov	a,#___str_5
      000D1D C0 E0            [24] 3771 	push	acc
      000D1F 74s00            [12] 3772 	mov	a,#(___str_5 >> 8)
      000D21 C0 E0            [24] 3773 	push	acc
      000D23 74 80            [12] 3774 	mov	a,#0x80
      000D25 C0 E0            [24] 3775 	push	acc
      000D27 12r00r7B         [24] 3776 	lcall	_lcd_print
      000D2A 15 81            [12] 3777 	dec	sp
      000D2C 15 81            [12] 3778 	dec	sp
      000D2E 15 81            [12] 3779 	dec	sp
                           000D30  3780 	C$Lab_5.c$275$1$179 ==.
                                   3781 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:275: dr_ky = kpd_input(1);
      000D30 75 82 01         [24] 3782 	mov	dpl,#0x01
      000D33 12r01rB8         [24] 3783 	lcall	_kpd_input
      000D36 AE 82            [24] 3784 	mov	r6,dpl
                           000D38  3785 	C$Lab_5.c$276$1$179 ==.
                                   3786 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:276: printf("Drive Y Gain: %d \r\n", dr_ky);
      000D38 EE               [12] 3787 	mov	a,r6
      000D39 F5*1D            [12] 3788 	mov	_dr_ky,a
      000D3B 33               [12] 3789 	rlc	a
      000D3C 95 E0            [12] 3790 	subb	a,acc
      000D3E FF               [12] 3791 	mov	r7,a
      000D3F C0 06            [24] 3792 	push	ar6
      000D41 C0 07            [24] 3793 	push	ar7
      000D43 74r69            [12] 3794 	mov	a,#___str_6
      000D45 C0 E0            [24] 3795 	push	acc
      000D47 74s00            [12] 3796 	mov	a,#(___str_6 >> 8)
      000D49 C0 E0            [24] 3797 	push	acc
      000D4B 74 80            [12] 3798 	mov	a,#0x80
      000D4D C0 E0            [24] 3799 	push	acc
      000D4F 12r00r00         [24] 3800 	lcall	_printf
      000D52 E5 81            [12] 3801 	mov	a,sp
      000D54 24 FB            [12] 3802 	add	a,#0xfb
      000D56 F5 81            [12] 3803 	mov	sp,a
                           000D58  3804 	C$Lab_5.c$277$1$179 ==.
                                   3805 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:277: printcounts = 0;
      000D58 75*2D 00         [24] 3806 	mov	_printcounts,#0x00
                           000D5B  3807 	C$Lab_5.c$278$1$179 ==.
                                   3808 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:278: while (printcounts < 100);
      000D5B                       3809 00104$:
      000D5B 74 9C            [12] 3810 	mov	a,#0x100 - 0x64
      000D5D 25*2D            [12] 3811 	add	a,_printcounts
      000D5F 50 FA            [24] 3812 	jnc	00104$
                           000D61  3813 	C$Lab_5.c$279$1$179 ==.
                                   3814 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:279: lcd_clear();							
      000D61 12r01r00         [24] 3815 	lcall	_lcd_clear
                           000D64  3816 	C$Lab_5.c$281$1$179 ==.
                                   3817 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:281: lcd_print("Input Steer Gain: \r\n");			//gets input of steering from keypad and saves to variable
      000D64 74r7D            [12] 3818 	mov	a,#___str_7
      000D66 C0 E0            [24] 3819 	push	acc
      000D68 74s00            [12] 3820 	mov	a,#(___str_7 >> 8)
      000D6A C0 E0            [24] 3821 	push	acc
      000D6C 74 80            [12] 3822 	mov	a,#0x80
      000D6E C0 E0            [24] 3823 	push	acc
      000D70 12r00r7B         [24] 3824 	lcall	_lcd_print
      000D73 15 81            [12] 3825 	dec	sp
      000D75 15 81            [12] 3826 	dec	sp
      000D77 15 81            [12] 3827 	dec	sp
                           000D79  3828 	C$Lab_5.c$282$1$179 ==.
                                   3829 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:282: sv_k = kpd_input(1);
      000D79 75 82 01         [24] 3830 	mov	dpl,#0x01
      000D7C 12r01rB8         [24] 3831 	lcall	_kpd_input
      000D7F 85 82*27         [24] 3832 	mov	_sv_k,dpl
      000D82 85 83*28         [24] 3833 	mov	(_sv_k + 1),dph
                           000D85  3834 	C$Lab_5.c$283$1$179 ==.
                                   3835 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:283: printf("Steer Gain: %d \r\n", sv_k);
      000D85 C0*27            [24] 3836 	push	_sv_k
      000D87 C0*28            [24] 3837 	push	(_sv_k + 1)
      000D89 74r92            [12] 3838 	mov	a,#___str_8
      000D8B C0 E0            [24] 3839 	push	acc
      000D8D 74s00            [12] 3840 	mov	a,#(___str_8 >> 8)
      000D8F C0 E0            [24] 3841 	push	acc
      000D91 74 80            [12] 3842 	mov	a,#0x80
      000D93 C0 E0            [24] 3843 	push	acc
      000D95 12r00r00         [24] 3844 	lcall	_printf
      000D98 E5 81            [12] 3845 	mov	a,sp
      000D9A 24 FB            [12] 3846 	add	a,#0xfb
      000D9C F5 81            [12] 3847 	mov	sp,a
                           000D9E  3848 	C$Lab_5.c$284$1$179 ==.
                                   3849 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:284: printcounts = 0;
      000D9E 75*2D 00         [24] 3850 	mov	_printcounts,#0x00
                           000DA1  3851 	C$Lab_5.c$285$1$179 ==.
                                   3852 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:285: while (printcounts < 100);
      000DA1                       3853 00107$:
      000DA1 74 9C            [12] 3854 	mov	a,#0x100 - 0x64
      000DA3 25*2D            [12] 3855 	add	a,_printcounts
      000DA5 50 FA            [24] 3856 	jnc	00107$
                           000DA7  3857 	C$Lab_5.c$286$1$179 ==.
                                   3858 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:286: lcd_clear();
      000DA7 12r01r00         [24] 3859 	lcall	_lcd_clear
                           000DAA  3860 	C$Lab_5.c$287$1$179 ==.
                           000DAA  3861 	XG$getGain$0$0 ==.
      000DAA 22               [24] 3862 	ret
                                   3863 ;------------------------------------------------------------
                                   3864 ;Allocation info for local variables in function 'printData'
                                   3865 ;------------------------------------------------------------
                           000DAB  3866 	G$printData$0$0 ==.
                           000DAB  3867 	C$Lab_5.c$293$1$179 ==.
                                   3868 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:293: void printData(void)								//prints necessary values
                                   3869 ;	-----------------------------------------
                                   3870 ;	 function printData
                                   3871 ;	-----------------------------------------
      000DAB                       3872 _printData:
                           000DAB  3873 	C$Lab_5.c$295$1$181 ==.
                                   3874 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:295: printf("X accel.   Y accel.   X zero   Y zero   Drive PW   Steering PW \r\n");
      000DAB 74rA4            [12] 3875 	mov	a,#___str_9
      000DAD C0 E0            [24] 3876 	push	acc
      000DAF 74s00            [12] 3877 	mov	a,#(___str_9 >> 8)
      000DB1 C0 E0            [24] 3878 	push	acc
      000DB3 74 80            [12] 3879 	mov	a,#0x80
      000DB5 C0 E0            [24] 3880 	push	acc
      000DB7 12r00r00         [24] 3881 	lcall	_printf
      000DBA 15 81            [12] 3882 	dec	sp
      000DBC 15 81            [12] 3883 	dec	sp
      000DBE 15 81            [12] 3884 	dec	sp
                           000DC0  3885 	C$Lab_5.c$296$1$181 ==.
                                   3886 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:296: printf("%8.3d,   %7.3d,   %5.3d,   %5.3d,   %7.4d,   %10.4d \r\n\n", gx, gy, x0, y0, dr_DrivePW, sv_temp_servo_pw);
      000DC0 C0*29            [24] 3887 	push	_sv_temp_servo_pw
      000DC2 C0*2A            [24] 3888 	push	(_sv_temp_servo_pw + 1)
      000DC4 C0*1A            [24] 3889 	push	_dr_DrivePW
      000DC6 C0*1B            [24] 3890 	push	(_dr_DrivePW + 1)
      000DC8 C0*35            [24] 3891 	push	_y0
      000DCA C0*36            [24] 3892 	push	(_y0 + 1)
      000DCC C0*33            [24] 3893 	push	_x0
      000DCE C0*34            [24] 3894 	push	(_x0 + 1)
      000DD0 C0*31            [24] 3895 	push	_gy
      000DD2 C0*32            [24] 3896 	push	(_gy + 1)
      000DD4 C0*2F            [24] 3897 	push	_gx
      000DD6 C0*30            [24] 3898 	push	(_gx + 1)
      000DD8 74rE6            [12] 3899 	mov	a,#___str_10
      000DDA C0 E0            [24] 3900 	push	acc
      000DDC 74s00            [12] 3901 	mov	a,#(___str_10 >> 8)
      000DDE C0 E0            [24] 3902 	push	acc
      000DE0 74 80            [12] 3903 	mov	a,#0x80
      000DE2 C0 E0            [24] 3904 	push	acc
      000DE4 12r00r00         [24] 3905 	lcall	_printf
      000DE7 E5 81            [12] 3906 	mov	a,sp
      000DE9 24 F1            [12] 3907 	add	a,#0xf1
      000DEB F5 81            [12] 3908 	mov	sp,a
                           000DED  3909 	C$Lab_5.c$298$1$181 ==.
                                   3910 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:298: lcd_clear();
      000DED 12r01r00         [24] 3911 	lcall	_lcd_clear
                           000DF0  3912 	C$Lab_5.c$299$1$181 ==.
                                   3913 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:299: lcd_print("Xgain: %.2d Ygain: %.2d\r", dr_kx, dr_ky);
      000DF0 E5*1D            [12] 3914 	mov	a,_dr_ky
      000DF2 FE               [12] 3915 	mov	r6,a
      000DF3 33               [12] 3916 	rlc	a
      000DF4 95 E0            [12] 3917 	subb	a,acc
      000DF6 FF               [12] 3918 	mov	r7,a
      000DF7 E5*1C            [12] 3919 	mov	a,_dr_kx
      000DF9 FC               [12] 3920 	mov	r4,a
      000DFA 33               [12] 3921 	rlc	a
      000DFB 95 E0            [12] 3922 	subb	a,acc
      000DFD FD               [12] 3923 	mov	r5,a
      000DFE C0 06            [24] 3924 	push	ar6
      000E00 C0 07            [24] 3925 	push	ar7
      000E02 C0 04            [24] 3926 	push	ar4
      000E04 C0 05            [24] 3927 	push	ar5
      000E06 74r1E            [12] 3928 	mov	a,#___str_11
      000E08 C0 E0            [24] 3929 	push	acc
      000E0A 74s01            [12] 3930 	mov	a,#(___str_11 >> 8)
      000E0C C0 E0            [24] 3931 	push	acc
      000E0E 74 80            [12] 3932 	mov	a,#0x80
      000E10 C0 E0            [24] 3933 	push	acc
      000E12 12r00r7B         [24] 3934 	lcall	_lcd_print
      000E15 E5 81            [12] 3935 	mov	a,sp
      000E17 24 F9            [12] 3936 	add	a,#0xf9
      000E19 F5 81            [12] 3937 	mov	sp,a
                           000E1B  3938 	C$Lab_5.c$300$1$181 ==.
                                   3939 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:300: lcd_print("Drive PW: %.4d \r", dr_DrivePW);
      000E1B C0*1A            [24] 3940 	push	_dr_DrivePW
      000E1D C0*1B            [24] 3941 	push	(_dr_DrivePW + 1)
      000E1F 74r37            [12] 3942 	mov	a,#___str_12
      000E21 C0 E0            [24] 3943 	push	acc
      000E23 74s01            [12] 3944 	mov	a,#(___str_12 >> 8)
      000E25 C0 E0            [24] 3945 	push	acc
      000E27 74 80            [12] 3946 	mov	a,#0x80
      000E29 C0 E0            [24] 3947 	push	acc
      000E2B 12r00r7B         [24] 3948 	lcall	_lcd_print
      000E2E E5 81            [12] 3949 	mov	a,sp
      000E30 24 FB            [12] 3950 	add	a,#0xfb
      000E32 F5 81            [12] 3951 	mov	sp,a
                           000E34  3952 	C$Lab_5.c$301$1$181 ==.
                                   3953 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:301: lcd_print("Steering PW: %.4d \r", sv_temp_servo_pw);
      000E34 C0*29            [24] 3954 	push	_sv_temp_servo_pw
      000E36 C0*2A            [24] 3955 	push	(_sv_temp_servo_pw + 1)
      000E38 74r48            [12] 3956 	mov	a,#___str_13
      000E3A C0 E0            [24] 3957 	push	acc
      000E3C 74s01            [12] 3958 	mov	a,#(___str_13 >> 8)
      000E3E C0 E0            [24] 3959 	push	acc
      000E40 74 80            [12] 3960 	mov	a,#0x80
      000E42 C0 E0            [24] 3961 	push	acc
      000E44 12r00r7B         [24] 3962 	lcall	_lcd_print
      000E47 E5 81            [12] 3963 	mov	a,sp
      000E49 24 FB            [12] 3964 	add	a,#0xfb
      000E4B F5 81            [12] 3965 	mov	sp,a
                           000E4D  3966 	C$Lab_5.c$302$1$181 ==.
                                   3967 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:302: lcd_print("Xacl: %.3d Yacl: %.3d\r", gx, gy);
      000E4D C0*31            [24] 3968 	push	_gy
      000E4F C0*32            [24] 3969 	push	(_gy + 1)
      000E51 C0*2F            [24] 3970 	push	_gx
      000E53 C0*30            [24] 3971 	push	(_gx + 1)
      000E55 74r5C            [12] 3972 	mov	a,#___str_14
      000E57 C0 E0            [24] 3973 	push	acc
      000E59 74s01            [12] 3974 	mov	a,#(___str_14 >> 8)
      000E5B C0 E0            [24] 3975 	push	acc
      000E5D 74 80            [12] 3976 	mov	a,#0x80
      000E5F C0 E0            [24] 3977 	push	acc
      000E61 12r00r7B         [24] 3978 	lcall	_lcd_print
      000E64 E5 81            [12] 3979 	mov	a,sp
      000E66 24 F9            [12] 3980 	add	a,#0xf9
      000E68 F5 81            [12] 3981 	mov	sp,a
                           000E6A  3982 	C$Lab_5.c$303$1$181 ==.
                           000E6A  3983 	XG$printData$0$0 ==.
      000E6A 22               [24] 3984 	ret
                                   3985 ;------------------------------------------------------------
                                   3986 ;Allocation info for local variables in function 'Port_Init'
                                   3987 ;------------------------------------------------------------
                           000E6B  3988 	G$Port_Init$0$0 ==.
                           000E6B  3989 	C$Lab_5.c$310$1$181 ==.
                                   3990 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:310: void Port_Init()
                                   3991 ;	-----------------------------------------
                                   3992 ;	 function Port_Init
                                   3993 ;	-----------------------------------------
      000E6B                       3994 _Port_Init:
                           000E6B  3995 	C$Lab_5.c$312$1$182 ==.
                                   3996 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:312: P0MDOUT &= 0x3F;
      000E6B 53 A4 3F         [24] 3997 	anl	_P0MDOUT,#0x3f
                           000E6E  3998 	C$Lab_5.c$313$1$182 ==.
                                   3999 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:313: P1MDOUT &= 0xE6;
      000E6E 53 A5 E6         [24] 4000 	anl	_P1MDOUT,#0xe6
                           000E71  4001 	C$Lab_5.c$314$1$182 ==.
                                   4002 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:314: P1MDIN &= ~0x08;
      000E71 53 BD F7         [24] 4003 	anl	_P1MDIN,#0xf7
                           000E74  4004 	C$Lab_5.c$315$1$182 ==.
                                   4005 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:315: P1MDIN |= 0x11;
      000E74 43 BD 11         [24] 4006 	orl	_P1MDIN,#0x11
                           000E77  4007 	C$Lab_5.c$316$1$182 ==.
                                   4008 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:316: P1 |= ~0xE6;
      000E77 43 90 19         [24] 4009 	orl	_P1,#0x19
                           000E7A  4010 	C$Lab_5.c$317$1$182 ==.
                                   4011 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:317: P3MDOUT &= 0x6F;
      000E7A 53 A7 6F         [24] 4012 	anl	_P3MDOUT,#0x6f
                           000E7D  4013 	C$Lab_5.c$318$1$182 ==.
                                   4014 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:318: P3MDOUT |= 0x60; 		
      000E7D 43 A7 60         [24] 4015 	orl	_P3MDOUT,#0x60
                           000E80  4016 	C$Lab_5.c$319$1$182 ==.
                                   4017 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:319: P3 |= ~0x6F; 
      000E80 43 B0 90         [24] 4018 	orl	_P3,#0x90
                           000E83  4019 	C$Lab_5.c$320$1$182 ==.
                           000E83  4020 	XG$Port_Init$0$0 ==.
      000E83 22               [24] 4021 	ret
                                   4022 ;------------------------------------------------------------
                                   4023 ;Allocation info for local variables in function 'XBR0_Init'
                                   4024 ;------------------------------------------------------------
                           000E84  4025 	G$XBR0_Init$0$0 ==.
                           000E84  4026 	C$Lab_5.c$324$1$182 ==.
                                   4027 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:324: void XBR0_Init()
                                   4028 ;	-----------------------------------------
                                   4029 ;	 function XBR0_Init
                                   4030 ;	-----------------------------------------
      000E84                       4031 _XBR0_Init:
                           000E84  4032 	C$Lab_5.c$326$1$183 ==.
                                   4033 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:326: XBR0 = 0x1F;
      000E84 75 E1 1F         [24] 4034 	mov	_XBR0,#0x1f
                           000E87  4035 	C$Lab_5.c$327$1$183 ==.
                           000E87  4036 	XG$XBR0_Init$0$0 ==.
      000E87 22               [24] 4037 	ret
                                   4038 ;------------------------------------------------------------
                                   4039 ;Allocation info for local variables in function 'PCA_Init'
                                   4040 ;------------------------------------------------------------
                           000E88  4041 	G$PCA_Init$0$0 ==.
                           000E88  4042 	C$Lab_5.c$331$1$183 ==.
                                   4043 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:331: void PCA_Init(void)
                                   4044 ;	-----------------------------------------
                                   4045 ;	 function PCA_Init
                                   4046 ;	-----------------------------------------
      000E88                       4047 _PCA_Init:
                           000E88  4048 	C$Lab_5.c$333$1$185 ==.
                                   4049 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:333: PCA0MD = 0x81;		//SYSCLK/12
      000E88 75 D9 81         [24] 4050 	mov	_PCA0MD,#0x81
                           000E8B  4051 	C$Lab_5.c$334$1$185 ==.
                                   4052 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:334: PCA0CPM0 = 0xC2;
      000E8B 75 DA C2         [24] 4053 	mov	_PCA0CPM0,#0xc2
                           000E8E  4054 	C$Lab_5.c$335$1$185 ==.
                                   4055 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:335: PCA0CPM1 = 0x00;
      000E8E 75 DB 00         [24] 4056 	mov	_PCA0CPM1,#0x00
                           000E91  4057 	C$Lab_5.c$336$1$185 ==.
                                   4058 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:336: PCA0CPM2 = 0xC2;
      000E91 75 DC C2         [24] 4059 	mov	_PCA0CPM2,#0xc2
                           000E94  4060 	C$Lab_5.c$337$1$185 ==.
                                   4061 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:337: PCA0CN = 0x40; 		//enable PCA counter
      000E94 75 D8 40         [24] 4062 	mov	_PCA0CN,#0x40
                           000E97  4063 	C$Lab_5.c$338$1$185 ==.
                           000E97  4064 	XG$PCA_Init$0$0 ==.
      000E97 22               [24] 4065 	ret
                                   4066 ;------------------------------------------------------------
                                   4067 ;Allocation info for local variables in function 'Interrupt_Init'
                                   4068 ;------------------------------------------------------------
                           000E98  4069 	G$Interrupt_Init$0$0 ==.
                           000E98  4070 	C$Lab_5.c$342$1$185 ==.
                                   4071 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:342: void Interrupt_Init()
                                   4072 ;	-----------------------------------------
                                   4073 ;	 function Interrupt_Init
                                   4074 ;	-----------------------------------------
      000E98                       4075 _Interrupt_Init:
                           000E98  4076 	C$Lab_5.c$344$1$186 ==.
                                   4077 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:344: EA = 1;			//enable global interrupts
      000E98 D2 AF            [12] 4078 	setb	_EA
                           000E9A  4079 	C$Lab_5.c$345$1$186 ==.
                                   4080 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:345: EIE1 = 0x08;	//enable PCA interrupt
      000E9A 75 E6 08         [24] 4081 	mov	_EIE1,#0x08
                           000E9D  4082 	C$Lab_5.c$346$1$186 ==.
                                   4083 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:346: ET0 =1;
      000E9D D2 A9            [12] 4084 	setb	_ET0
                           000E9F  4085 	C$Lab_5.c$347$1$186 ==.
                           000E9F  4086 	XG$Interrupt_Init$0$0 ==.
      000E9F 22               [24] 4087 	ret
                                   4088 ;------------------------------------------------------------
                                   4089 ;Allocation info for local variables in function 'PCA_ISR'
                                   4090 ;------------------------------------------------------------
                           000EA0  4091 	G$PCA_ISR$0$0 ==.
                           000EA0  4092 	C$Lab_5.c$351$1$186 ==.
                                   4093 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:351: void PCA_ISR (void) __interrupt 9
                                   4094 ;	-----------------------------------------
                                   4095 ;	 function PCA_ISR
                                   4096 ;	-----------------------------------------
      000EA0                       4097 _PCA_ISR:
      000EA0 C0 E0            [24] 4098 	push	acc
      000EA2 C0 D0            [24] 4099 	push	psw
                           000EA4  4100 	C$Lab_5.c$353$1$188 ==.
                                   4101 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:353: counts++;
      000EA4 05*2B            [12] 4102 	inc	_counts
      000EA6 E4               [12] 4103 	clr	a
      000EA7 B5*2B 02         [24] 4104 	cjne	a,_counts,00103$
      000EAA 05*2C            [12] 4105 	inc	(_counts + 1)
      000EAC                       4106 00103$:
                           000EAC  4107 	C$Lab_5.c$354$1$188 ==.
                                   4108 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:354: printcounts++;
      000EAC 05*2D            [12] 4109 	inc	_printcounts
                           000EAE  4110 	C$Lab_5.c$355$1$188 ==.
                                   4111 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:355: PCA0 = 28672;				//20ms start value
      000EAE 75 E9 00         [24] 4112 	mov	((_PCA0 >> 0) & 0xFF),#0x00
      000EB1 75 F9 70         [24] 4113 	mov	((_PCA0 >> 8) & 0xFF),#0x70
                           000EB4  4114 	C$Lab_5.c$356$1$188 ==.
                                   4115 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:356: CF = 0;
      000EB4 C2 DF            [12] 4116 	clr	_CF
                           000EB6  4117 	C$Lab_5.c$357$1$188 ==.
                                   4118 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:357: PCA0CN &= 0x40;
      000EB6 53 D8 40         [24] 4119 	anl	_PCA0CN,#0x40
                           000EB9  4120 	C$Lab_5.c$358$1$188 ==.
                                   4121 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:358: new_reading = 1;
      000EB9 75*2E 01         [24] 4122 	mov	_new_reading,#0x01
      000EBC D0 D0            [24] 4123 	pop	psw
      000EBE D0 E0            [24] 4124 	pop	acc
                           000EC0  4125 	C$Lab_5.c$359$1$188 ==.
                           000EC0  4126 	XG$PCA_ISR$0$0 ==.
      000EC0 32               [24] 4127 	reti
                                   4128 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                   4129 ;	eliminated unneeded push/pop dpl
                                   4130 ;	eliminated unneeded push/pop dph
                                   4131 ;	eliminated unneeded push/pop b
                                   4132 ;------------------------------------------------------------
                                   4133 ;Allocation info for local variables in function 'SMB_Init'
                                   4134 ;------------------------------------------------------------
                           000EC1  4135 	G$SMB_Init$0$0 ==.
                           000EC1  4136 	C$Lab_5.c$362$1$188 ==.
                                   4137 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:362: void SMB_Init(void)
                                   4138 ;	-----------------------------------------
                                   4139 ;	 function SMB_Init
                                   4140 ;	-----------------------------------------
      000EC1                       4141 _SMB_Init:
                           000EC1  4142 	C$Lab_5.c$364$1$190 ==.
                                   4143 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:364: SMB0CR=0x93; 	//set SCL to 100KHz (actual freq ~ 94,594Hz)*/
      000EC1 75 CF 93         [24] 4144 	mov	_SMB0CR,#0x93
                           000EC4  4145 	C$Lab_5.c$365$1$190 ==.
                                   4146 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:365: ENSMB=1; 		//bit 6 of SMB0CN, enable the SMBus */
      000EC4 D2 C6            [12] 4147 	setb	_ENSMB
                           000EC6  4148 	C$Lab_5.c$366$1$190 ==.
                           000EC6  4149 	XG$SMB_Init$0$0 ==.
      000EC6 22               [24] 4150 	ret
                                   4151 ;------------------------------------------------------------
                                   4152 ;Allocation info for local variables in function 'ADC_Init'
                                   4153 ;------------------------------------------------------------
                           000EC7  4154 	G$ADC_Init$0$0 ==.
                           000EC7  4155 	C$Lab_5.c$369$1$190 ==.
                                   4156 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:369: void ADC_Init(void)
                                   4157 ;	-----------------------------------------
                                   4158 ;	 function ADC_Init
                                   4159 ;	-----------------------------------------
      000EC7                       4160 _ADC_Init:
                           000EC7  4161 	C$Lab_5.c$372$1$192 ==.
                                   4162 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:372: REF0CN = 0x03;  //set VREF to internal pin not external
      000EC7 75 D1 03         [24] 4163 	mov	_REF0CN,#0x03
                           000ECA  4164 	C$Lab_5.c$373$1$192 ==.
                                   4165 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:373: ADC1CN = 0x80;  //set ADC1 to active
      000ECA 75 AA 80         [24] 4166 	mov	_ADC1CN,#0x80
                           000ECD  4167 	C$Lab_5.c$374$1$192 ==.
                                   4168 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:374: ADC1CF |= 0x01; //set gain to 1
      000ECD 43 AB 01         [24] 4169 	orl	_ADC1CF,#0x01
                           000ED0  4170 	C$Lab_5.c$375$1$192 ==.
                           000ED0  4171 	XG$ADC_Init$0$0 ==.
      000ED0 22               [24] 4172 	ret
                                   4173 ;------------------------------------------------------------
                                   4174 ;Allocation info for local variables in function 'read_AD_input'
                                   4175 ;------------------------------------------------------------
                                   4176 ;n                         Allocated to registers 
                                   4177 ;------------------------------------------------------------
                           000ED1  4178 	G$read_AD_input$0$0 ==.
                           000ED1  4179 	C$Lab_5.c$377$1$192 ==.
                                   4180 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:377: unsigned char read_AD_input(unsigned char n)
                                   4181 ;	-----------------------------------------
                                   4182 ;	 function read_AD_input
                                   4183 ;	-----------------------------------------
      000ED1                       4184 _read_AD_input:
      000ED1 85 82 AC         [24] 4185 	mov	_AMX1SL,dpl
                           000ED4  4186 	C$Lab_5.c$380$1$194 ==.
                                   4187 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:380: ADC1CN &= ~0x20; 				 //clears conversion flag
      000ED4 53 AA DF         [24] 4188 	anl	_ADC1CN,#0xdf
                           000ED7  4189 	C$Lab_5.c$381$1$194 ==.
                                   4190 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:381: ADC1CN |= 0x10; 				 //initiate A/D conversion
      000ED7 43 AA 10         [24] 4191 	orl	_ADC1CN,#0x10
                           000EDA  4192 	C$Lab_5.c$382$1$194 ==.
                                   4193 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:382: while ((ADC1CN & 0x20) == 0x00); //waits until the control register says conversion is complete
      000EDA                       4194 00101$:
      000EDA E5 AA            [12] 4195 	mov	a,_ADC1CN
      000EDC 30 E5 FB         [24] 4196 	jnb	acc.5,00101$
                           000EDF  4197 	C$Lab_5.c$383$1$194 ==.
                                   4198 ;	C:\Users\XuMartin\OneDrive2\OneDrive - Rensselaer Polytechnic Institute\1. LITEC\Labs\Lab 5\Lab 5.c:383: return ADC1; 				   	 //outputs conversion's value
      000EDF 85 9C 82         [24] 4199 	mov	dpl,_ADC1
                           000EE2  4200 	C$Lab_5.c$384$1$194 ==.
                           000EE2  4201 	XG$read_AD_input$0$0 ==.
      000EE2 22               [24] 4202 	ret
                                   4203 	.area CSEG    (CODE)
                                   4204 	.area CONST   (CODE)
                           000000  4205 FLab_5$__str_0$0$0 == .
      000000                       4206 ___str_0:
      000000 0A                    4207 	.db 0x0a
      000001 54 79 70 65 20 64 69  4208 	.ascii "Type digits; end w/#"
             67 69 74 73 3B 20 65
             6E 64 20 77 2F 23
      000015 00                    4209 	.db 0x00
                           000016  4210 FLab_5$__str_1$0$0 == .
      000016                       4211 ___str_1:
      000016 20 20 20 20 20 25 63  4212 	.ascii "     %c%c%c%c%c"
             25 63 25 63 25 63 25
             63
      000025 00                    4213 	.db 0x00
                           000026  4214 FLab_5$__str_2$0$0 == .
      000026                       4215 ___str_2:
      000026 25 63                 4216 	.ascii "%c"
      000028 00                    4217 	.db 0x00
                           000029  4218 FLab_5$__str_3$0$0 == .
      000029                       4219 ___str_3:
      000029 49 6E 70 75 74 20 44  4220 	.ascii "Input Drive X Gain: "
             72 69 76 65 20 58 20
             47 61 69 6E 3A 20
      00003D 0D                    4221 	.db 0x0d
      00003E 00                    4222 	.db 0x00
                           00003F  4223 FLab_5$__str_4$0$0 == .
      00003F                       4224 ___str_4:
      00003F 44 72 69 76 65 20 58  4225 	.ascii "Drive X Gain: %d "
             20 47 61 69 6E 3A 20
             25 64 20
      000050 0D                    4226 	.db 0x0d
      000051 0A                    4227 	.db 0x0a
      000052 00                    4228 	.db 0x00
                           000053  4229 FLab_5$__str_5$0$0 == .
      000053                       4230 ___str_5:
      000053 49 6E 70 75 74 20 44  4231 	.ascii "Input Drive Y Gain: "
             72 69 76 65 20 59 20
             47 61 69 6E 3A 20
      000067 0D                    4232 	.db 0x0d
      000068 00                    4233 	.db 0x00
                           000069  4234 FLab_5$__str_6$0$0 == .
      000069                       4235 ___str_6:
      000069 44 72 69 76 65 20 59  4236 	.ascii "Drive Y Gain: %d "
             20 47 61 69 6E 3A 20
             25 64 20
      00007A 0D                    4237 	.db 0x0d
      00007B 0A                    4238 	.db 0x0a
      00007C 00                    4239 	.db 0x00
                           00007D  4240 FLab_5$__str_7$0$0 == .
      00007D                       4241 ___str_7:
      00007D 49 6E 70 75 74 20 53  4242 	.ascii "Input Steer Gain: "
             74 65 65 72 20 47 61
             69 6E 3A 20
      00008F 0D                    4243 	.db 0x0d
      000090 0A                    4244 	.db 0x0a
      000091 00                    4245 	.db 0x00
                           000092  4246 FLab_5$__str_8$0$0 == .
      000092                       4247 ___str_8:
      000092 53 74 65 65 72 20 47  4248 	.ascii "Steer Gain: %d "
             61 69 6E 3A 20 25 64
             20
      0000A1 0D                    4249 	.db 0x0d
      0000A2 0A                    4250 	.db 0x0a
      0000A3 00                    4251 	.db 0x00
                           0000A4  4252 FLab_5$__str_9$0$0 == .
      0000A4                       4253 ___str_9:
      0000A4 58 20 61 63 63 65 6C  4254 	.ascii "X accel.   Y accel.   X zero   Y zero   Drive PW   Steering "
             2E 20 20 20 59 20 61
             63 63 65 6C 2E 20 20
             20 58 20 7A 65 72 6F
             20 20 20 59 20 7A 65
             72 6F 20 20 20 44 72
             69 76 65 20 50 57 20
             20 20 53 74 65 65 72
             69 6E 67 20
      0000E0 50 57 20              4255 	.ascii "PW "
      0000E3 0D                    4256 	.db 0x0d
      0000E4 0A                    4257 	.db 0x0a
      0000E5 00                    4258 	.db 0x00
                           0000E6  4259 FLab_5$__str_10$0$0 == .
      0000E6                       4260 ___str_10:
      0000E6 25 38 2E 33 64 2C 20  4261 	.ascii "%8.3d,   %7.3d,   %5.3d,   %5.3d,   %7.4d,   %10.4d "
             20 20 25 37 2E 33 64
             2C 20 20 20 25 35 2E
             33 64 2C 20 20 20 25
             35 2E 33 64 2C 20 20
             20 25 37 2E 34 64 2C
             20 20 20 25 31 30 2E
             34 64 20
      00011A 0D                    4262 	.db 0x0d
      00011B 0A                    4263 	.db 0x0a
      00011C 0A                    4264 	.db 0x0a
      00011D 00                    4265 	.db 0x00
                           00011E  4266 FLab_5$__str_11$0$0 == .
      00011E                       4267 ___str_11:
      00011E 58 67 61 69 6E 3A 20  4268 	.ascii "Xgain: %.2d Ygain: %.2d"
             25 2E 32 64 20 59 67
             61 69 6E 3A 20 25 2E
             32 64
      000135 0D                    4269 	.db 0x0d
      000136 00                    4270 	.db 0x00
                           000137  4271 FLab_5$__str_12$0$0 == .
      000137                       4272 ___str_12:
      000137 44 72 69 76 65 20 50  4273 	.ascii "Drive PW: %.4d "
             57 3A 20 25 2E 34 64
             20
      000146 0D                    4274 	.db 0x0d
      000147 00                    4275 	.db 0x00
                           000148  4276 FLab_5$__str_13$0$0 == .
      000148                       4277 ___str_13:
      000148 53 74 65 65 72 69 6E  4278 	.ascii "Steering PW: %.4d "
             67 20 50 57 3A 20 25
             2E 34 64 20
      00015A 0D                    4279 	.db 0x0d
      00015B 00                    4280 	.db 0x00
                           00015C  4281 FLab_5$__str_14$0$0 == .
      00015C                       4282 ___str_14:
      00015C 58 61 63 6C 3A 20 25  4283 	.ascii "Xacl: %.3d Yacl: %.3d"
             2E 33 64 20 59 61 63
             6C 3A 20 25 2E 33 64
      000171 0D                    4284 	.db 0x0d
      000172 00                    4285 	.db 0x00
                                   4286 	.area XINIT   (CODE)
                                   4287 	.area CABS    (ABS,CODE)
